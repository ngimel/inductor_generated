buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg152_1'), StarDep(name='arg2_1')]
buf0.node.kernel = aten.convolution


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep(name='buf1', index=75648*c0 + c1, size=(s0, 384))]
buf1.unmet_dependencies = []
buf1.met_dependencies = [MemoryDep(name='arg0_1', index=c1, size=(s0, 384))]
buf1.group.device = cuda:0
buf1.group.iteration = (384*s0, 1)
buf1.sizes = ([s0, 384], [])
buf1.aliases = ['buf3']
class buf1_loop_body:
    var_ranges = {z0: s0, z1: 384}
    index0 = z1
    index1 = 75648*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=75648*c0 + c1, size=(s0, 75264))]
buf2.unmet_dependencies = [MemoryDep(name='buf0', index=75264*c0 + c1 + 196*c2, size=(s0, 196, 384))]
buf2.met_dependencies = [MemoryDep(name='arg3_1', index=c1, size=(196*s0, 384))]
buf2.group.device = cuda:0
buf2.group.iteration = (75264*s0, 1)
buf2.sizes = ([s0, 196, 384], [])
buf2.aliases = ['buf3']
class buf2_loop_body:
    var_ranges = {z0: s0, z1: 196, z2: 384}
    index0 = 75264*z0 + z1 + 196*z2
    index1 = z2
    index2 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf2', get_index_2, add, None)
        return store


buf3: NopKernelSchedulerNode(ConcatKernel)
buf3.writes = [StarDep(name='buf3')]
buf3.unmet_dependencies = [StarDep(name='buf1'), StarDep(name='buf2')]
buf3.met_dependencies = []


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = 
    [   MemoryDep(name='buf4', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf4', index=c0, size=(197*s0,))]
buf4.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf4.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf4.group.device = cuda:0
buf4.group.iteration = (197*s0, 384)
buf4.sizes = ([s0, 197], [384])
class buf4_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf4', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(197*s0,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(197*s0,))]
buf5.met_dependencies = []
buf5.group.device = cuda:0
buf5.group.iteration = (197*s0, 1)
buf5.sizes = ([197*s0], [])
class buf5_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf5', get_index_1, div, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = 
    [   MemoryDep(name='buf6', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf6', index=c0, size=(197*s0,))]
buf6.unmet_dependencies = 
    [   MemoryDep(name='buf3', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf5', index=c0, size=(197*s0, 384))]
buf6.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf6.group.device = cuda:0
buf6.group.iteration = (197*s0, 384)
buf6.sizes = ([s0, 197], [384])
class buf6_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf6', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep(name='buf7', index=c0, size=(75648*s0,))]
buf7.unmet_dependencies = 
    [   MemoryDep(name='buf3', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf5', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf6', index=c0, size=(197*s0, 384))]
buf7.met_dependencies = 
    [   MemoryDep(name='arg1_1', index=c1, size=(s0, 75648)),
        MemoryDep(name='arg4_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg5_1', index=c1, size=(197*s0, 384))]
buf7.group.device = cuda:0
buf7.group.iteration = (75648*s0, 1)
buf7.sizes = ([s0, 197, 384], [])
class buf7_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf6', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg4_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg5_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf7', get_index_6, to_dtype_3, None)
        return store


buf8: ExternKernelSchedulerNode(ExternKernelOut)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf7')]
buf8.met_dependencies = [StarDep(name='arg6_1'), StarDep(name='arg7_1')]
buf8.node.kernel = extern_kernels.addmm


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep(name='buf9', index=c0, size=(75648*s0,))]
buf9.unmet_dependencies = [   MemoryDep(name='buf8', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf9.met_dependencies = []
buf9.group.device = cuda:0
buf9.group.iteration = (75648*s0, 1)
buf9.sizes = ([s0, 6, 197, 64], [])
class buf9_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep(name='buf10', index=c0, size=(75648*s0,))]
buf10.unmet_dependencies = [   MemoryDep(name='buf8', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf10.met_dependencies = []
buf10.group.device = cuda:0
buf10.group.iteration = (75648*s0, 1)
buf10.sizes = ([s0, 384, 197], [])
class buf10_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


buf11: ExternKernelSchedulerNode(ExternKernelOut)
buf11.writes = [StarDep(name='buf11')]
buf11.unmet_dependencies = [StarDep(name='buf10'), StarDep(name='buf9')]
buf11.met_dependencies = []
buf11.node.kernel = extern_kernels.bmm


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf12', index=c0, size=(1182*s0,))]
buf12.unmet_dependencies = [MemoryDep(name='buf11', index=c0, size=(232854*s0,))]
buf12.met_dependencies = []
buf12.group.device = cuda:0
buf12.group.iteration = (1182*s0, 197)
buf12.sizes = ([1182*s0], [197])
class buf12_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = 
    [   MemoryDep(name='buf13', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf13', index=c0, size=(1182*s0,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf12', index=c0, size=(1182*s0, 197))]
buf13.met_dependencies = []
buf13.group.device = cuda:0
buf13.group.iteration = (1182*s0, 197)
buf13.sizes = ([1182*s0], [197])
class buf13_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf13', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = [MemoryDep(name='buf14', index=c0, size=(232854*s0,))]
buf14.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf12', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf13', index=c0, size=(1182*s0, 197))]
buf14.met_dependencies = []
buf14.group.device = cuda:0
buf14.group.iteration = (232854*s0, 1)
buf14.sizes = ([1182*s0, 197], [])
class buf14_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf13', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf14', get_index_3, to_dtype_1, None)
        return store


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep(name='buf15', index=c0, size=(75648*s0,))]
buf15.unmet_dependencies = [   MemoryDep(name='buf8', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf15.met_dependencies = []
buf15.group.device = cuda:0
buf15.group.iteration = (75648*s0, 1)
buf15.sizes = ([s0, 6, 197, 64], [])
class buf15_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


buf16: ExternKernelSchedulerNode(ExternKernelOut)
buf16.writes = [StarDep(name='buf16')]
buf16.unmet_dependencies = [StarDep(name='buf14'), StarDep(name='buf15')]
buf16.met_dependencies = []
buf16.node.kernel = extern_kernels.bmm


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep(name='buf17', index=c0, size=(75648*s0,))]
buf17.unmet_dependencies = [   MemoryDep(name='buf16', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf17.met_dependencies = []
buf17.group.device = cuda:0
buf17.group.iteration = (75648*s0, 1)
buf17.sizes = ([s0, 197, 6, 64], [])
class buf17_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


buf18: ExternKernelSchedulerNode(ExternKernelOut)
buf18.writes = [StarDep(name='buf18')]
buf18.unmet_dependencies = [StarDep(name='buf17')]
buf18.met_dependencies = [StarDep(name='arg8_1'), StarDep(name='arg9_1')]
buf18.node.kernel = extern_kernels.addmm


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = 
    [   MemoryDep(name='buf19', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf19', index=c0, size=(197*s0,))]
buf19.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf19.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf19.group.device = cuda:0
buf19.group.iteration = (197*s0, 384)
buf19.sizes = ([s0, 197], [384])
class buf19_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf19', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = [MemoryDep(name='buf20', index=c0, size=(197*s0,))]
buf20.unmet_dependencies = [MemoryDep(name='buf19', index=c0, size=(197*s0,))]
buf20.met_dependencies = []
buf20.group.device = cuda:0
buf20.group.iteration = (197*s0, 1)
buf20.sizes = ([197*s0], [])
class buf20_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf20', get_index_1, div, None)
        return store


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = 
    [   MemoryDep(name='buf21', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf21', index=c0, size=(197*s0,))]
buf21.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf20', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf21.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf21.group.device = cuda:0
buf21.group.iteration = (197*s0, 384)
buf21.sizes = ([s0, 197], [384])
class buf21_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf20', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf21', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = [MemoryDep(name='buf22', index=c0, size=(75648*s0,))]
buf22.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf20', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf21', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf22.met_dependencies = 
    [   MemoryDep(name='arg10_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg11_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf22.group.device = cuda:0
buf22.group.iteration = (75648*s0, 1)
buf22.sizes = ([s0, 197, 384], [])
class buf22_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf20', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf21', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg10_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg11_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf22', get_index_7, to_dtype_3, None)
        return store


buf23: ExternKernelSchedulerNode(ExternKernelOut)
buf23.writes = [StarDep(name='buf23')]
buf23.unmet_dependencies = [StarDep(name='buf22')]
buf23.met_dependencies = [StarDep(name='arg12_1'), StarDep(name='arg13_1')]
buf23.node.kernel = extern_kernels.addmm


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = [MemoryDep(name='buf24', index=c0, size=(302592*s0,))]
buf24.unmet_dependencies = [MemoryDep(name='buf23', index=c0, size=(302592*s0,))]
buf24.met_dependencies = []
buf24.group.device = cuda:0
buf24.group.iteration = (302592*s0, 1)
buf24.sizes = ([302592*s0], [])
class buf24_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf24', get_index_2, to_dtype_2, None)
        return store


buf25: ExternKernelSchedulerNode(ExternKernelOut)
buf25.writes = [StarDep(name='buf25')]
buf25.unmet_dependencies = [StarDep(name='buf24')]
buf25.met_dependencies = [StarDep(name='arg14_1'), StarDep(name='arg15_1')]
buf25.node.kernel = extern_kernels.addmm


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = 
    [   MemoryDep(name='buf26', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf26', index=c0, size=(197*s0,))]
buf26.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf25', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf26.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf26.group.device = cuda:0
buf26.group.iteration = (197*s0, 384)
buf26.sizes = ([s0, 197], [384])
class buf26_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf25', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf26', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = [MemoryDep(name='buf27', index=c0, size=(197*s0,))]
buf27.unmet_dependencies = [MemoryDep(name='buf26', index=c0, size=(197*s0,))]
buf27.met_dependencies = []
buf27.group.device = cuda:0
buf27.group.iteration = (197*s0, 1)
buf27.sizes = ([197*s0], [])
class buf27_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf27', get_index_1, div, None)
        return store


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = 
    [   MemoryDep(name='buf28', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf28', index=c0, size=(197*s0,))]
buf28.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf25', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf27', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf28.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf28.group.device = cuda:0
buf28.group.iteration = (197*s0, 384)
buf28.sizes = ([s0, 197], [384])
class buf28_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf25', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf28', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = [MemoryDep(name='buf29', index=c0, size=(75648*s0,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf25', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf27', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf28', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,))]
buf29.met_dependencies = 
    [   MemoryDep(name='arg16_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg17_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf29.group.device = cuda:0
buf29.group.iteration = (75648*s0, 1)
buf29.sizes = ([s0, 197, 384], [])
class buf29_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 384}
    index0 = 75648*z0 + 384*z1 + z2
    index1 = 384*z1 + z2
    index2 = 197*z0 + z1
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf25', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf28', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg16_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg17_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf29', get_index_8, to_dtype_3, None)
        return store


buf30: ExternKernelSchedulerNode(ExternKernelOut)
buf30.writes = [StarDep(name='buf30')]
buf30.unmet_dependencies = [StarDep(name='buf29')]
buf30.met_dependencies = [StarDep(name='arg18_1'), StarDep(name='arg19_1')]
buf30.node.kernel = extern_kernels.addmm


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = [MemoryDep(name='buf31', index=c0, size=(75648*s0,))]
buf31.unmet_dependencies = [   MemoryDep(name='buf30', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf31.met_dependencies = []
buf31.group.device = cuda:0
buf31.group.iteration = (75648*s0, 1)
buf31.sizes = ([s0, 6, 197, 64], [])
class buf31_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = [MemoryDep(name='buf32', index=c0, size=(75648*s0,))]
buf32.unmet_dependencies = [   MemoryDep(name='buf30', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf32.met_dependencies = []
buf32.group.device = cuda:0
buf32.group.iteration = (75648*s0, 1)
buf32.sizes = ([s0, 384, 197], [])
class buf32_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


buf33: ExternKernelSchedulerNode(ExternKernelOut)
buf33.writes = [StarDep(name='buf33')]
buf33.unmet_dependencies = [StarDep(name='buf31'), StarDep(name='buf32')]
buf33.met_dependencies = []
buf33.node.kernel = extern_kernels.bmm


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf34', index=c0, size=(1182*s0,))]
buf34.unmet_dependencies = [MemoryDep(name='buf33', index=c0, size=(232854*s0,))]
buf34.met_dependencies = []
buf34.group.device = cuda:0
buf34.group.iteration = (1182*s0, 197)
buf34.sizes = ([1182*s0], [197])
class buf34_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = 
    [   MemoryDep(name='buf35', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf35', index=c0, size=(1182*s0,))]
buf35.unmet_dependencies = 
    [   MemoryDep(name='buf33', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf34', index=c0, size=(1182*s0, 197))]
buf35.met_dependencies = []
buf35.group.device = cuda:0
buf35.group.iteration = (1182*s0, 197)
buf35.sizes = ([1182*s0], [197])
class buf35_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf35', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = [MemoryDep(name='buf36', index=c0, size=(232854*s0,))]
buf36.unmet_dependencies = 
    [   MemoryDep(name='buf33', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf34', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf35', index=c0, size=(1182*s0, 197))]
buf36.met_dependencies = []
buf36.group.device = cuda:0
buf36.group.iteration = (232854*s0, 1)
buf36.sizes = ([1182*s0, 197], [])
class buf36_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf35', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf36', get_index_3, to_dtype_1, None)
        return store


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(75648*s0,))]
buf37.unmet_dependencies = [   MemoryDep(name='buf30', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf37.met_dependencies = []
buf37.group.device = cuda:0
buf37.group.iteration = (75648*s0, 1)
buf37.sizes = ([s0, 6, 197, 64], [])
class buf37_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store


buf38: ExternKernelSchedulerNode(ExternKernelOut)
buf38.writes = [StarDep(name='buf38')]
buf38.unmet_dependencies = [StarDep(name='buf36'), StarDep(name='buf37')]
buf38.met_dependencies = []
buf38.node.kernel = extern_kernels.bmm


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(75648*s0,))]
buf39.unmet_dependencies = [   MemoryDep(name='buf38', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf39.met_dependencies = []
buf39.group.device = cuda:0
buf39.group.iteration = (75648*s0, 1)
buf39.sizes = ([s0, 197, 6, 64], [])
class buf39_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


buf40: ExternKernelSchedulerNode(ExternKernelOut)
buf40.writes = [StarDep(name='buf40')]
buf40.unmet_dependencies = [StarDep(name='buf39')]
buf40.met_dependencies = [StarDep(name='arg20_1'), StarDep(name='arg21_1')]
buf40.node.kernel = extern_kernels.addmm


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep(name='buf41', index=c0, size=(75648*s0,))]
buf41.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf25', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf3', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf40', index=c0, size=(75648*s0,))]
buf41.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(s0, 75648))]
buf41.group.device = cuda:0
buf41.group.iteration = (75648*s0, 1)
buf41.sizes = ([s0, 75648], [])
class buf41_loop_body:
    var_ranges = {z0: s0, z1: 75648}
    index0 = 75648*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf25', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf40', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, add_3, None)
        return store


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = 
    [   MemoryDep(name='buf42', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf42', index=c0, size=(197*s0,))]
buf42.unmet_dependencies = [MemoryDep(name='buf41', index=c0, size=(75648*s0,))]
buf42.met_dependencies = []
buf42.group.device = cuda:0
buf42.group.iteration = (197*s0, 384)
buf42.sizes = ([197*s0], [384])
class buf42_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf42', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = [MemoryDep(name='buf43', index=c0, size=(197*s0,))]
buf43.unmet_dependencies = [MemoryDep(name='buf42', index=c0, size=(197*s0,))]
buf43.met_dependencies = []
buf43.group.device = cuda:0
buf43.group.iteration = (197*s0, 1)
buf43.sizes = ([197*s0], [])
class buf43_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf43', get_index_1, div, None)
        return store


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = 
    [   MemoryDep(name='buf44', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf44', index=c0, size=(197*s0,))]
buf44.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf43', index=c0, size=(197*s0, 384))]
buf44.met_dependencies = []
buf44.group.device = cuda:0
buf44.group.iteration = (197*s0, 384)
buf44.sizes = ([197*s0], [384])
class buf44_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf44', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = [MemoryDep(name='buf45', index=c0, size=(75648*s0,))]
buf45.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf43', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf44', index=c0, size=(197*s0, 384))]
buf45.met_dependencies = 
    [   MemoryDep(name='arg22_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg23_1', index=c1, size=(197*s0, 384))]
buf45.group.device = cuda:0
buf45.group.iteration = (75648*s0, 1)
buf45.sizes = ([197*s0, 384], [])
class buf45_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg23_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, to_dtype_3, None)
        return store


buf46: ExternKernelSchedulerNode(ExternKernelOut)
buf46.writes = [StarDep(name='buf46')]
buf46.unmet_dependencies = [StarDep(name='buf45')]
buf46.met_dependencies = [StarDep(name='arg24_1'), StarDep(name='arg25_1')]
buf46.node.kernel = extern_kernels.addmm


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(302592*s0,))]
buf47.unmet_dependencies = [MemoryDep(name='buf46', index=c0, size=(302592*s0,))]
buf47.met_dependencies = []
buf47.group.device = cuda:0
buf47.group.iteration = (302592*s0, 1)
buf47.sizes = ([302592*s0], [])
class buf47_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, to_dtype_2, None)
        return store


buf48: ExternKernelSchedulerNode(ExternKernelOut)
buf48.writes = [StarDep(name='buf48')]
buf48.unmet_dependencies = [StarDep(name='buf47')]
buf48.met_dependencies = [StarDep(name='arg26_1'), StarDep(name='arg27_1')]
buf48.node.kernel = extern_kernels.addmm


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = 
    [   MemoryDep(name='buf49', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf49', index=c0, size=(197*s0,))]
buf49.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,))]
buf49.met_dependencies = []
buf49.group.device = cuda:0
buf49.group.iteration = (197*s0, 384)
buf49.sizes = ([197*s0], [384])
class buf49_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf49', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf50: SchedulerNode(ComputedBuffer)
buf50.writes = [MemoryDep(name='buf50', index=c0, size=(197*s0,))]
buf50.unmet_dependencies = [MemoryDep(name='buf49', index=c0, size=(197*s0,))]
buf50.met_dependencies = []
buf50.group.device = cuda:0
buf50.group.iteration = (197*s0, 1)
buf50.sizes = ([197*s0], [])
class buf50_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf50', get_index_1, div, None)
        return store


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = 
    [   MemoryDep(name='buf51', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf51', index=c0, size=(197*s0,))]
buf51.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf50', index=c0, size=(197*s0, 384))]
buf51.met_dependencies = []
buf51.group.device = cuda:0
buf51.group.iteration = (197*s0, 384)
buf51.sizes = ([197*s0], [384])
class buf51_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf50', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf51', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = [MemoryDep(name='buf52', index=c0, size=(75648*s0,))]
buf52.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf50', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf51', index=c0, size=(197*s0, 384))]
buf52.met_dependencies = 
    [   MemoryDep(name='arg28_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg29_1', index=c1, size=(197*s0, 384))]
buf52.group.device = cuda:0
buf52.group.iteration = (75648*s0, 1)
buf52.sizes = ([197*s0, 384], [])
class buf52_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf50', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf51', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg28_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg29_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf52', get_index_6, to_dtype_3, None)
        return store


buf53: ExternKernelSchedulerNode(ExternKernelOut)
buf53.writes = [StarDep(name='buf53')]
buf53.unmet_dependencies = [StarDep(name='buf52')]
buf53.met_dependencies = [StarDep(name='arg30_1'), StarDep(name='arg31_1')]
buf53.node.kernel = extern_kernels.addmm


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep(name='buf54', index=c0, size=(75648*s0,))]
buf54.unmet_dependencies = [   MemoryDep(name='buf53', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf54.met_dependencies = []
buf54.group.device = cuda:0
buf54.group.iteration = (75648*s0, 1)
buf54.sizes = ([s0, 6, 197, 64], [])
class buf54_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, load, None)
        return store


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep(name='buf55', index=c0, size=(75648*s0,))]
buf55.unmet_dependencies = [   MemoryDep(name='buf53', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf55.met_dependencies = []
buf55.group.device = cuda:0
buf55.group.iteration = (75648*s0, 1)
buf55.sizes = ([s0, 384, 197], [])
class buf55_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, load, None)
        return store


buf56: ExternKernelSchedulerNode(ExternKernelOut)
buf56.writes = [StarDep(name='buf56')]
buf56.unmet_dependencies = [StarDep(name='buf54'), StarDep(name='buf55')]
buf56.met_dependencies = []
buf56.node.kernel = extern_kernels.bmm


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = 
    [   MemoryDep(name='buf57', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf57', index=c0, size=(1182*s0,))]
buf57.unmet_dependencies = [MemoryDep(name='buf56', index=c0, size=(232854*s0,))]
buf57.met_dependencies = []
buf57.group.device = cuda:0
buf57.group.iteration = (1182*s0, 197)
buf57.sizes = ([1182*s0], [197])
class buf57_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf57', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = 
    [   MemoryDep(name='buf58', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf58', index=c0, size=(1182*s0,))]
buf58.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf57', index=c0, size=(1182*s0, 197))]
buf58.met_dependencies = []
buf58.group.device = cuda:0
buf58.group.iteration = (1182*s0, 197)
buf58.sizes = ([1182*s0], [197])
class buf58_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf58', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep(name='buf59', index=c0, size=(232854*s0,))]
buf59.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf57', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf58', index=c0, size=(1182*s0, 197))]
buf59.met_dependencies = []
buf59.group.device = cuda:0
buf59.group.iteration = (232854*s0, 1)
buf59.sizes = ([1182*s0, 197], [])
class buf59_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf58', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf59', get_index_3, to_dtype_1, None)
        return store


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = [MemoryDep(name='buf60', index=c0, size=(75648*s0,))]
buf60.unmet_dependencies = [   MemoryDep(name='buf53', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf60.met_dependencies = []
buf60.group.device = cuda:0
buf60.group.iteration = (75648*s0, 1)
buf60.sizes = ([s0, 6, 197, 64], [])
class buf60_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf60', get_index_1, load, None)
        return store


buf61: ExternKernelSchedulerNode(ExternKernelOut)
buf61.writes = [StarDep(name='buf61')]
buf61.unmet_dependencies = [StarDep(name='buf59'), StarDep(name='buf60')]
buf61.met_dependencies = []
buf61.node.kernel = extern_kernels.bmm


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = [MemoryDep(name='buf62', index=c0, size=(75648*s0,))]
buf62.unmet_dependencies = [   MemoryDep(name='buf61', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf62.met_dependencies = []
buf62.group.device = cuda:0
buf62.group.iteration = (75648*s0, 1)
buf62.sizes = ([s0, 197, 6, 64], [])
class buf62_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf62', get_index_1, load, None)
        return store


buf63: ExternKernelSchedulerNode(ExternKernelOut)
buf63.writes = [StarDep(name='buf63')]
buf63.unmet_dependencies = [StarDep(name='buf62')]
buf63.met_dependencies = [StarDep(name='arg32_1'), StarDep(name='arg33_1')]
buf63.node.kernel = extern_kernels.addmm


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = 
    [   MemoryDep(name='buf64', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf64', index=c0, size=(197*s0,))]
buf64.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,))]
buf64.met_dependencies = []
buf64.group.device = cuda:0
buf64.group.iteration = (197*s0, 384)
buf64.sizes = ([197*s0], [384])
class buf64_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf64', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = [MemoryDep(name='buf65', index=c0, size=(197*s0,))]
buf65.unmet_dependencies = [MemoryDep(name='buf64', index=c0, size=(197*s0,))]
buf65.met_dependencies = []
buf65.group.device = cuda:0
buf65.group.iteration = (197*s0, 1)
buf65.sizes = ([197*s0], [])
class buf65_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, div, None)
        return store


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = 
    [   MemoryDep(name='buf66', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf66', index=c0, size=(197*s0,))]
buf66.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf65', index=c0, size=(197*s0, 384))]
buf66.met_dependencies = []
buf66.group.device = cuda:0
buf66.group.iteration = (197*s0, 384)
buf66.sizes = ([197*s0], [384])
class buf66_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf66', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep(name='buf67', index=c0, size=(75648*s0,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf65', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf66', index=c0, size=(197*s0, 384))]
buf67.met_dependencies = 
    [   MemoryDep(name='arg34_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg35_1', index=c1, size=(197*s0, 384))]
buf67.group.device = cuda:0
buf67.group.iteration = (75648*s0, 1)
buf67.sizes = ([197*s0, 384], [])
class buf67_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf66', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg34_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg35_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf67', get_index_7, to_dtype_3, None)
        return store


buf68: ExternKernelSchedulerNode(ExternKernelOut)
buf68.writes = [StarDep(name='buf68')]
buf68.unmet_dependencies = [StarDep(name='buf67')]
buf68.met_dependencies = [StarDep(name='arg36_1'), StarDep(name='arg37_1')]
buf68.node.kernel = extern_kernels.addmm


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = [MemoryDep(name='buf69', index=c0, size=(302592*s0,))]
buf69.unmet_dependencies = [MemoryDep(name='buf68', index=c0, size=(302592*s0,))]
buf69.met_dependencies = []
buf69.group.device = cuda:0
buf69.group.iteration = (302592*s0, 1)
buf69.sizes = ([302592*s0], [])
class buf69_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, to_dtype_2, None)
        return store


buf70: ExternKernelSchedulerNode(ExternKernelOut)
buf70.writes = [StarDep(name='buf70')]
buf70.unmet_dependencies = [StarDep(name='buf69')]
buf70.met_dependencies = [StarDep(name='arg38_1'), StarDep(name='arg39_1')]
buf70.node.kernel = extern_kernels.addmm


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = 
    [   MemoryDep(name='buf71', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf71', index=c0, size=(197*s0,))]
buf71.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf70', index=c0, size=(75648*s0,))]
buf71.met_dependencies = []
buf71.group.device = cuda:0
buf71.group.iteration = (197*s0, 384)
buf71.sizes = ([197*s0], [384])
class buf71_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf70', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf71', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = [MemoryDep(name='buf72', index=c0, size=(197*s0,))]
buf72.unmet_dependencies = [MemoryDep(name='buf71', index=c0, size=(197*s0,))]
buf72.met_dependencies = []
buf72.group.device = cuda:0
buf72.group.iteration = (197*s0, 1)
buf72.sizes = ([197*s0], [])
class buf72_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf72', get_index_1, div, None)
        return store


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = 
    [   MemoryDep(name='buf73', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf73', index=c0, size=(197*s0,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf70', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf72', index=c0, size=(197*s0, 384))]
buf73.met_dependencies = []
buf73.group.device = cuda:0
buf73.group.iteration = (197*s0, 384)
buf73.sizes = ([197*s0], [384])
class buf73_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf70', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf72', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf73', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf74: SchedulerNode(ComputedBuffer)
buf74.writes = [MemoryDep(name='buf74', index=c0, size=(75648*s0,))]
buf74.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf70', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf72', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf73', index=c0, size=(197*s0, 384))]
buf74.met_dependencies = 
    [   MemoryDep(name='arg40_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg41_1', index=c1, size=(197*s0, 384))]
buf74.group.device = cuda:0
buf74.group.iteration = (75648*s0, 1)
buf74.sizes = ([197*s0, 384], [])
class buf74_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf70', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf72', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf73', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg40_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg41_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf74', get_index_8, to_dtype_3, None)
        return store


buf75: ExternKernelSchedulerNode(ExternKernelOut)
buf75.writes = [StarDep(name='buf75')]
buf75.unmet_dependencies = [StarDep(name='buf74')]
buf75.met_dependencies = [StarDep(name='arg42_1'), StarDep(name='arg43_1')]
buf75.node.kernel = extern_kernels.addmm


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = [MemoryDep(name='buf76', index=c0, size=(75648*s0,))]
buf76.unmet_dependencies = [   MemoryDep(name='buf75', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf76.met_dependencies = []
buf76.group.device = cuda:0
buf76.group.iteration = (75648*s0, 1)
buf76.sizes = ([s0, 6, 197, 64], [])
class buf76_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(75648*s0,))]
buf77.unmet_dependencies = [   MemoryDep(name='buf75', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf77.met_dependencies = []
buf77.group.device = cuda:0
buf77.group.iteration = (75648*s0, 1)
buf77.sizes = ([s0, 384, 197], [])
class buf77_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf77', get_index_1, load, None)
        return store


buf78: ExternKernelSchedulerNode(ExternKernelOut)
buf78.writes = [StarDep(name='buf78')]
buf78.unmet_dependencies = [StarDep(name='buf76'), StarDep(name='buf77')]
buf78.met_dependencies = []
buf78.node.kernel = extern_kernels.bmm


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = 
    [   MemoryDep(name='buf79', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf79', index=c0, size=(1182*s0,))]
buf79.unmet_dependencies = [MemoryDep(name='buf78', index=c0, size=(232854*s0,))]
buf79.met_dependencies = []
buf79.group.device = cuda:0
buf79.group.iteration = (1182*s0, 197)
buf79.sizes = ([1182*s0], [197])
class buf79_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf79', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf80: SchedulerNode(ComputedBuffer)
buf80.writes = 
    [   MemoryDep(name='buf80', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf80', index=c0, size=(1182*s0,))]
buf80.unmet_dependencies = 
    [   MemoryDep(name='buf78', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf79', index=c0, size=(1182*s0, 197))]
buf80.met_dependencies = []
buf80.group.device = cuda:0
buf80.group.iteration = (1182*s0, 197)
buf80.sizes = ([1182*s0], [197])
class buf80_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf80', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf81: SchedulerNode(ComputedBuffer)
buf81.writes = [MemoryDep(name='buf81', index=c0, size=(232854*s0,))]
buf81.unmet_dependencies = 
    [   MemoryDep(name='buf78', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf79', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf80', index=c0, size=(1182*s0, 197))]
buf81.met_dependencies = []
buf81.group.device = cuda:0
buf81.group.iteration = (232854*s0, 1)
buf81.sizes = ([1182*s0, 197], [])
class buf81_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf80', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf81', get_index_3, to_dtype_1, None)
        return store


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = [MemoryDep(name='buf82', index=c0, size=(75648*s0,))]
buf82.unmet_dependencies = [   MemoryDep(name='buf75', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf82.met_dependencies = []
buf82.group.device = cuda:0
buf82.group.iteration = (75648*s0, 1)
buf82.sizes = ([s0, 6, 197, 64], [])
class buf82_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


buf83: ExternKernelSchedulerNode(ExternKernelOut)
buf83.writes = [StarDep(name='buf83')]
buf83.unmet_dependencies = [StarDep(name='buf81'), StarDep(name='buf82')]
buf83.met_dependencies = []
buf83.node.kernel = extern_kernels.bmm


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = [MemoryDep(name='buf84', index=c0, size=(75648*s0,))]
buf84.unmet_dependencies = [   MemoryDep(name='buf83', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf84.met_dependencies = []
buf84.group.device = cuda:0
buf84.group.iteration = (75648*s0, 1)
buf84.sizes = ([s0, 197, 6, 64], [])
class buf84_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, load, None)
        return store


buf85: ExternKernelSchedulerNode(ExternKernelOut)
buf85.writes = [StarDep(name='buf85')]
buf85.unmet_dependencies = [StarDep(name='buf84')]
buf85.met_dependencies = [StarDep(name='arg44_1'), StarDep(name='arg45_1')]
buf85.node.kernel = extern_kernels.addmm


buf86: SchedulerNode(ComputedBuffer)
buf86.writes = [MemoryDep(name='buf86', index=c0, size=(75648*s0,))]
buf86.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf48', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf63', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf70', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf85', index=c0, size=(75648*s0,))]
buf86.met_dependencies = []
buf86.group.device = cuda:0
buf86.group.iteration = (75648*s0, 1)
buf86.sizes = ([75648*s0], [])
class buf86_loop_body:
    var_ranges = {z0: 75648*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf70', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf85', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf86', get_index_5, add_3, None)
        return store


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = 
    [   MemoryDep(name='buf87', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf87', index=c0, size=(197*s0,))]
buf87.unmet_dependencies = [MemoryDep(name='buf86', index=c0, size=(75648*s0,))]
buf87.met_dependencies = []
buf87.group.device = cuda:0
buf87.group.iteration = (197*s0, 384)
buf87.sizes = ([197*s0], [384])
class buf87_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf87', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf88: SchedulerNode(ComputedBuffer)
buf88.writes = [MemoryDep(name='buf88', index=c0, size=(197*s0,))]
buf88.unmet_dependencies = [MemoryDep(name='buf87', index=c0, size=(197*s0,))]
buf88.met_dependencies = []
buf88.group.device = cuda:0
buf88.group.iteration = (197*s0, 1)
buf88.sizes = ([197*s0], [])
class buf88_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf88', get_index_1, div, None)
        return store


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf89', index=c0, size=(197*s0,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf88', index=c0, size=(197*s0, 384))]
buf89.met_dependencies = []
buf89.group.device = cuda:0
buf89.group.iteration = (197*s0, 384)
buf89.sizes = ([197*s0], [384])
class buf89_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(75648*s0,))]
buf90.unmet_dependencies = 
    [   MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf88', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf89', index=c0, size=(197*s0, 384))]
buf90.met_dependencies = 
    [   MemoryDep(name='arg46_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg47_1', index=c1, size=(197*s0, 384))]
buf90.group.device = cuda:0
buf90.group.iteration = (75648*s0, 1)
buf90.sizes = ([197*s0, 384], [])
class buf90_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf89', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg46_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg47_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, to_dtype_3, None)
        return store


buf91: ExternKernelSchedulerNode(ExternKernelOut)
buf91.writes = [StarDep(name='buf91')]
buf91.unmet_dependencies = [StarDep(name='buf90')]
buf91.met_dependencies = [StarDep(name='arg48_1'), StarDep(name='arg49_1')]
buf91.node.kernel = extern_kernels.addmm


buf92: SchedulerNode(ComputedBuffer)
buf92.writes = [MemoryDep(name='buf92', index=c0, size=(302592*s0,))]
buf92.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(302592*s0,))]
buf92.met_dependencies = []
buf92.group.device = cuda:0
buf92.group.iteration = (302592*s0, 1)
buf92.sizes = ([302592*s0], [])
class buf92_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf92', get_index_2, to_dtype_2, None)
        return store


buf93: ExternKernelSchedulerNode(ExternKernelOut)
buf93.writes = [StarDep(name='buf93')]
buf93.unmet_dependencies = [StarDep(name='buf92')]
buf93.met_dependencies = [StarDep(name='arg50_1'), StarDep(name='arg51_1')]
buf93.node.kernel = extern_kernels.addmm


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = 
    [   MemoryDep(name='buf94', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf94', index=c0, size=(197*s0,))]
buf94.unmet_dependencies = 
    [   MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf94.met_dependencies = []
buf94.group.device = cuda:0
buf94.group.iteration = (197*s0, 384)
buf94.sizes = ([197*s0], [384])
class buf94_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf94', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(197*s0,))]
buf95.unmet_dependencies = [MemoryDep(name='buf94', index=c0, size=(197*s0,))]
buf95.met_dependencies = []
buf95.group.device = cuda:0
buf95.group.iteration = (197*s0, 1)
buf95.sizes = ([197*s0], [])
class buf95_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf95', get_index_1, div, None)
        return store


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = 
    [   MemoryDep(name='buf96', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf96', index=c0, size=(197*s0,))]
buf96.unmet_dependencies = 
    [   MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf95', index=c0, size=(197*s0, 384))]
buf96.met_dependencies = []
buf96.group.device = cuda:0
buf96.group.iteration = (197*s0, 384)
buf96.sizes = ([197*s0], [384])
class buf96_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf95', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf96', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep(name='buf97', index=c0, size=(75648*s0,))]
buf97.unmet_dependencies = 
    [   MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf95', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf96', index=c0, size=(197*s0, 384))]
buf97.met_dependencies = 
    [   MemoryDep(name='arg52_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg53_1', index=c1, size=(197*s0, 384))]
buf97.group.device = cuda:0
buf97.group.iteration = (75648*s0, 1)
buf97.sizes = ([197*s0, 384], [])
class buf97_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf95', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf96', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg52_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg53_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf97', get_index_6, to_dtype_3, None)
        return store


buf98: ExternKernelSchedulerNode(ExternKernelOut)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf97')]
buf98.met_dependencies = [StarDep(name='arg54_1'), StarDep(name='arg55_1')]
buf98.node.kernel = extern_kernels.addmm


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = [MemoryDep(name='buf99', index=c0, size=(75648*s0,))]
buf99.unmet_dependencies = [   MemoryDep(name='buf98', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf99.met_dependencies = []
buf99.group.device = cuda:0
buf99.group.iteration = (75648*s0, 1)
buf99.sizes = ([s0, 6, 197, 64], [])
class buf99_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf99', get_index_1, load, None)
        return store


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = [MemoryDep(name='buf100', index=c0, size=(75648*s0,))]
buf100.unmet_dependencies = [   MemoryDep(name='buf98', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf100.met_dependencies = []
buf100.group.device = cuda:0
buf100.group.iteration = (75648*s0, 1)
buf100.sizes = ([s0, 384, 197], [])
class buf100_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


buf101: ExternKernelSchedulerNode(ExternKernelOut)
buf101.writes = [StarDep(name='buf101')]
buf101.unmet_dependencies = [StarDep(name='buf100'), StarDep(name='buf99')]
buf101.met_dependencies = []
buf101.node.kernel = extern_kernels.bmm


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = 
    [   MemoryDep(name='buf102', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf102', index=c0, size=(1182*s0,))]
buf102.unmet_dependencies = [MemoryDep(name='buf101', index=c0, size=(232854*s0,))]
buf102.met_dependencies = []
buf102.group.device = cuda:0
buf102.group.iteration = (1182*s0, 197)
buf102.sizes = ([1182*s0], [197])
class buf102_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf102', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = 
    [   MemoryDep(name='buf103', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf103', index=c0, size=(1182*s0,))]
buf103.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf102', index=c0, size=(1182*s0, 197))]
buf103.met_dependencies = []
buf103.group.device = cuda:0
buf103.group.iteration = (1182*s0, 197)
buf103.sizes = ([1182*s0], [197])
class buf103_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf103', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = [MemoryDep(name='buf104', index=c0, size=(232854*s0,))]
buf104.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf102', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf103', index=c0, size=(1182*s0, 197))]
buf104.met_dependencies = []
buf104.group.device = cuda:0
buf104.group.iteration = (232854*s0, 1)
buf104.sizes = ([1182*s0, 197], [])
class buf104_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf103', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf104', get_index_3, to_dtype_1, None)
        return store


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = [MemoryDep(name='buf105', index=c0, size=(75648*s0,))]
buf105.unmet_dependencies = [   MemoryDep(name='buf98', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf105.met_dependencies = []
buf105.group.device = cuda:0
buf105.group.iteration = (75648*s0, 1)
buf105.sizes = ([s0, 6, 197, 64], [])
class buf105_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


buf106: ExternKernelSchedulerNode(ExternKernelOut)
buf106.writes = [StarDep(name='buf106')]
buf106.unmet_dependencies = [StarDep(name='buf104'), StarDep(name='buf105')]
buf106.met_dependencies = []
buf106.node.kernel = extern_kernels.bmm


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = [MemoryDep(name='buf107', index=c0, size=(75648*s0,))]
buf107.unmet_dependencies = [   MemoryDep(name='buf106', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf107.met_dependencies = []
buf107.group.device = cuda:0
buf107.group.iteration = (75648*s0, 1)
buf107.sizes = ([s0, 197, 6, 64], [])
class buf107_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf107', get_index_1, load, None)
        return store


buf108: ExternKernelSchedulerNode(ExternKernelOut)
buf108.writes = [StarDep(name='buf108')]
buf108.unmet_dependencies = [StarDep(name='buf107')]
buf108.met_dependencies = [StarDep(name='arg56_1'), StarDep(name='arg57_1')]
buf108.node.kernel = extern_kernels.addmm


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = 
    [   MemoryDep(name='buf109', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf109', index=c0, size=(197*s0,))]
buf109.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf109.met_dependencies = []
buf109.group.device = cuda:0
buf109.group.iteration = (197*s0, 384)
buf109.sizes = ([197*s0], [384])
class buf109_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf109', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf110: SchedulerNode(ComputedBuffer)
buf110.writes = [MemoryDep(name='buf110', index=c0, size=(197*s0,))]
buf110.unmet_dependencies = [MemoryDep(name='buf109', index=c0, size=(197*s0,))]
buf110.met_dependencies = []
buf110.group.device = cuda:0
buf110.group.iteration = (197*s0, 1)
buf110.sizes = ([197*s0], [])
class buf110_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf110', get_index_1, div, None)
        return store


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = 
    [   MemoryDep(name='buf111', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf111', index=c0, size=(197*s0,))]
buf111.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf110', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf111.met_dependencies = []
buf111.group.device = cuda:0
buf111.group.iteration = (197*s0, 384)
buf111.sizes = ([197*s0], [384])
class buf111_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf110', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf111', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = [MemoryDep(name='buf112', index=c0, size=(75648*s0,))]
buf112.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf110', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf111', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf112.met_dependencies = 
    [   MemoryDep(name='arg58_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg59_1', index=c1, size=(197*s0, 384))]
buf112.group.device = cuda:0
buf112.group.iteration = (75648*s0, 1)
buf112.sizes = ([197*s0, 384], [])
class buf112_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf110', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf111', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg58_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg59_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf112', get_index_7, to_dtype_3, None)
        return store


buf113: ExternKernelSchedulerNode(ExternKernelOut)
buf113.writes = [StarDep(name='buf113')]
buf113.unmet_dependencies = [StarDep(name='buf112')]
buf113.met_dependencies = [StarDep(name='arg60_1'), StarDep(name='arg61_1')]
buf113.node.kernel = extern_kernels.addmm


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = [MemoryDep(name='buf114', index=c0, size=(302592*s0,))]
buf114.unmet_dependencies = [MemoryDep(name='buf113', index=c0, size=(302592*s0,))]
buf114.met_dependencies = []
buf114.group.device = cuda:0
buf114.group.iteration = (302592*s0, 1)
buf114.sizes = ([302592*s0], [])
class buf114_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf114', get_index_2, to_dtype_2, None)
        return store


buf115: ExternKernelSchedulerNode(ExternKernelOut)
buf115.writes = [StarDep(name='buf115')]
buf115.unmet_dependencies = [StarDep(name='buf114')]
buf115.met_dependencies = [StarDep(name='arg62_1'), StarDep(name='arg63_1')]
buf115.node.kernel = extern_kernels.addmm


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = 
    [   MemoryDep(name='buf116', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf116', index=c0, size=(197*s0,))]
buf116.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf115', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf116.met_dependencies = []
buf116.group.device = cuda:0
buf116.group.iteration = (197*s0, 384)
buf116.sizes = ([197*s0], [384])
class buf116_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf115', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf116', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(197*s0,))]
buf117.unmet_dependencies = [MemoryDep(name='buf116', index=c0, size=(197*s0,))]
buf117.met_dependencies = []
buf117.group.device = cuda:0
buf117.group.iteration = (197*s0, 1)
buf117.sizes = ([197*s0], [])
class buf117_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf117', get_index_1, div, None)
        return store


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = 
    [   MemoryDep(name='buf118', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf118', index=c0, size=(197*s0,))]
buf118.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf115', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf117', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf118.met_dependencies = []
buf118.group.device = cuda:0
buf118.group.iteration = (197*s0, 384)
buf118.sizes = ([197*s0], [384])
class buf118_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf115', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf117', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf118', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = [MemoryDep(name='buf119', index=c0, size=(75648*s0,))]
buf119.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf115', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf117', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf118', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf119.met_dependencies = 
    [   MemoryDep(name='arg64_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg65_1', index=c1, size=(197*s0, 384))]
buf119.group.device = cuda:0
buf119.group.iteration = (75648*s0, 1)
buf119.sizes = ([197*s0, 384], [])
class buf119_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf115', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf117', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf118', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg64_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg65_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf119', get_index_8, to_dtype_3, None)
        return store


buf120: ExternKernelSchedulerNode(ExternKernelOut)
buf120.writes = [StarDep(name='buf120')]
buf120.unmet_dependencies = [StarDep(name='buf119')]
buf120.met_dependencies = [StarDep(name='arg66_1'), StarDep(name='arg67_1')]
buf120.node.kernel = extern_kernels.addmm


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep(name='buf121', index=c0, size=(75648*s0,))]
buf121.unmet_dependencies = [   MemoryDep(name='buf120', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf121.met_dependencies = []
buf121.group.device = cuda:0
buf121.group.iteration = (75648*s0, 1)
buf121.sizes = ([s0, 6, 197, 64], [])
class buf121_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf121', get_index_1, load, None)
        return store


buf122: SchedulerNode(ComputedBuffer)
buf122.writes = [MemoryDep(name='buf122', index=c0, size=(75648*s0,))]
buf122.unmet_dependencies = [   MemoryDep(name='buf120', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf122.met_dependencies = []
buf122.group.device = cuda:0
buf122.group.iteration = (75648*s0, 1)
buf122.sizes = ([s0, 384, 197], [])
class buf122_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store


buf123: ExternKernelSchedulerNode(ExternKernelOut)
buf123.writes = [StarDep(name='buf123')]
buf123.unmet_dependencies = [StarDep(name='buf121'), StarDep(name='buf122')]
buf123.met_dependencies = []
buf123.node.kernel = extern_kernels.bmm


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = 
    [   MemoryDep(name='buf124', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf124', index=c0, size=(1182*s0,))]
buf124.unmet_dependencies = [MemoryDep(name='buf123', index=c0, size=(232854*s0,))]
buf124.met_dependencies = []
buf124.group.device = cuda:0
buf124.group.iteration = (1182*s0, 197)
buf124.sizes = ([1182*s0], [197])
class buf124_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf124', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = 
    [   MemoryDep(name='buf125', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf125', index=c0, size=(1182*s0,))]
buf125.unmet_dependencies = 
    [   MemoryDep(name='buf123', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf124', index=c0, size=(1182*s0, 197))]
buf125.met_dependencies = []
buf125.group.device = cuda:0
buf125.group.iteration = (1182*s0, 197)
buf125.sizes = ([1182*s0], [197])
class buf125_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf125', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep(name='buf126', index=c0, size=(232854*s0,))]
buf126.unmet_dependencies = 
    [   MemoryDep(name='buf123', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf124', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf125', index=c0, size=(1182*s0, 197))]
buf126.met_dependencies = []
buf126.group.device = cuda:0
buf126.group.iteration = (232854*s0, 1)
buf126.sizes = ([1182*s0, 197], [])
class buf126_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf126', get_index_3, to_dtype_1, None)
        return store


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(75648*s0,))]
buf127.unmet_dependencies = [   MemoryDep(name='buf120', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf127.met_dependencies = []
buf127.group.device = cuda:0
buf127.group.iteration = (75648*s0, 1)
buf127.sizes = ([s0, 6, 197, 64], [])
class buf127_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf127', get_index_1, load, None)
        return store


buf128: ExternKernelSchedulerNode(ExternKernelOut)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf126'), StarDep(name='buf127')]
buf128.met_dependencies = []
buf128.node.kernel = extern_kernels.bmm


buf129: SchedulerNode(ComputedBuffer)
buf129.writes = [MemoryDep(name='buf129', index=c0, size=(75648*s0,))]
buf129.unmet_dependencies = [   MemoryDep(name='buf128', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf129.met_dependencies = []
buf129.group.device = cuda:0
buf129.group.iteration = (75648*s0, 1)
buf129.sizes = ([s0, 197, 6, 64], [])
class buf129_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf129', get_index_1, load, None)
        return store


buf130: ExternKernelSchedulerNode(ExternKernelOut)
buf130.writes = [StarDep(name='buf130')]
buf130.unmet_dependencies = [StarDep(name='buf129')]
buf130.met_dependencies = [StarDep(name='arg68_1'), StarDep(name='arg69_1')]
buf130.node.kernel = extern_kernels.addmm


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = [MemoryDep(name='buf131', index=c0, size=(75648*s0,))]
buf131.unmet_dependencies = 
    [   MemoryDep(name='buf108', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf115', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf130', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf86', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf93', index=c0, size=(75648*s0,))]
buf131.met_dependencies = []
buf131.group.device = cuda:0
buf131.group.iteration = (75648*s0, 1)
buf131.sizes = ([75648*s0], [])
class buf131_loop_body:
    var_ranges = {z0: 75648*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf115', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf130', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, add_3, None)
        return store


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = 
    [   MemoryDep(name='buf132', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf132', index=c0, size=(197*s0,))]
buf132.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(75648*s0,))]
buf132.met_dependencies = []
buf132.group.device = cuda:0
buf132.group.iteration = (197*s0, 384)
buf132.sizes = ([197*s0], [384])
class buf132_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf132', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(197*s0,))]
buf133.unmet_dependencies = [MemoryDep(name='buf132', index=c0, size=(197*s0,))]
buf133.met_dependencies = []
buf133.group.device = cuda:0
buf133.group.iteration = (197*s0, 1)
buf133.sizes = ([197*s0], [])
class buf133_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf133', get_index_1, div, None)
        return store


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = 
    [   MemoryDep(name='buf134', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf134', index=c0, size=(197*s0,))]
buf134.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf133', index=c0, size=(197*s0, 384))]
buf134.met_dependencies = []
buf134.group.device = cuda:0
buf134.group.iteration = (197*s0, 384)
buf134.sizes = ([197*s0], [384])
class buf134_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf134', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(75648*s0,))]
buf135.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf133', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf134', index=c0, size=(197*s0, 384))]
buf135.met_dependencies = 
    [   MemoryDep(name='arg70_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg71_1', index=c1, size=(197*s0, 384))]
buf135.group.device = cuda:0
buf135.group.iteration = (75648*s0, 1)
buf135.sizes = ([197*s0, 384], [])
class buf135_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf134', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg70_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg71_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, to_dtype_3, None)
        return store


buf136: ExternKernelSchedulerNode(ExternKernelOut)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf135')]
buf136.met_dependencies = [StarDep(name='arg72_1'), StarDep(name='arg73_1')]
buf136.node.kernel = extern_kernels.addmm


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = [MemoryDep(name='buf137', index=c0, size=(302592*s0,))]
buf137.unmet_dependencies = [MemoryDep(name='buf136', index=c0, size=(302592*s0,))]
buf137.met_dependencies = []
buf137.group.device = cuda:0
buf137.group.iteration = (302592*s0, 1)
buf137.sizes = ([302592*s0], [])
class buf137_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf137', get_index_2, to_dtype_2, None)
        return store


buf138: ExternKernelSchedulerNode(ExternKernelOut)
buf138.writes = [StarDep(name='buf138')]
buf138.unmet_dependencies = [StarDep(name='buf137')]
buf138.met_dependencies = [StarDep(name='arg74_1'), StarDep(name='arg75_1')]
buf138.node.kernel = extern_kernels.addmm


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = 
    [   MemoryDep(name='buf139', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf139', index=c0, size=(197*s0,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,))]
buf139.met_dependencies = []
buf139.group.device = cuda:0
buf139.group.iteration = (197*s0, 384)
buf139.sizes = ([197*s0], [384])
class buf139_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf139', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = [MemoryDep(name='buf140', index=c0, size=(197*s0,))]
buf140.unmet_dependencies = [MemoryDep(name='buf139', index=c0, size=(197*s0,))]
buf140.met_dependencies = []
buf140.group.device = cuda:0
buf140.group.iteration = (197*s0, 1)
buf140.sizes = ([197*s0], [])
class buf140_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf140', get_index_1, div, None)
        return store


buf141: SchedulerNode(ComputedBuffer)
buf141.writes = 
    [   MemoryDep(name='buf141', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf141', index=c0, size=(197*s0,))]
buf141.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf140', index=c0, size=(197*s0, 384))]
buf141.met_dependencies = []
buf141.group.device = cuda:0
buf141.group.iteration = (197*s0, 384)
buf141.sizes = ([197*s0], [384])
class buf141_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf140', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf141', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = [MemoryDep(name='buf142', index=c0, size=(75648*s0,))]
buf142.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf140', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf141', index=c0, size=(197*s0, 384))]
buf142.met_dependencies = 
    [   MemoryDep(name='arg76_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg77_1', index=c1, size=(197*s0, 384))]
buf142.group.device = cuda:0
buf142.group.iteration = (75648*s0, 1)
buf142.sizes = ([197*s0, 384], [])
class buf142_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf140', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf141', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg76_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg77_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf142', get_index_6, to_dtype_3, None)
        return store


buf143: ExternKernelSchedulerNode(ExternKernelOut)
buf143.writes = [StarDep(name='buf143')]
buf143.unmet_dependencies = [StarDep(name='buf142')]
buf143.met_dependencies = [StarDep(name='arg78_1'), StarDep(name='arg79_1')]
buf143.node.kernel = extern_kernels.addmm


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = [MemoryDep(name='buf144', index=c0, size=(75648*s0,))]
buf144.unmet_dependencies = [   MemoryDep(name='buf143', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf144.met_dependencies = []
buf144.group.device = cuda:0
buf144.group.iteration = (75648*s0, 1)
buf144.sizes = ([s0, 6, 197, 64], [])
class buf144_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf144', get_index_1, load, None)
        return store


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = [MemoryDep(name='buf145', index=c0, size=(75648*s0,))]
buf145.unmet_dependencies = [   MemoryDep(name='buf143', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf145.met_dependencies = []
buf145.group.device = cuda:0
buf145.group.iteration = (75648*s0, 1)
buf145.sizes = ([s0, 384, 197], [])
class buf145_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store


buf146: ExternKernelSchedulerNode(ExternKernelOut)
buf146.writes = [StarDep(name='buf146')]
buf146.unmet_dependencies = [StarDep(name='buf144'), StarDep(name='buf145')]
buf146.met_dependencies = []
buf146.node.kernel = extern_kernels.bmm


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = 
    [   MemoryDep(name='buf147', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf147', index=c0, size=(1182*s0,))]
buf147.unmet_dependencies = [MemoryDep(name='buf146', index=c0, size=(232854*s0,))]
buf147.met_dependencies = []
buf147.group.device = cuda:0
buf147.group.iteration = (1182*s0, 197)
buf147.sizes = ([1182*s0], [197])
class buf147_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf147', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf148', index=c0, size=(1182*s0,))]
buf148.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf147', index=c0, size=(1182*s0, 197))]
buf148.met_dependencies = []
buf148.group.device = cuda:0
buf148.group.iteration = (1182*s0, 197)
buf148.sizes = ([1182*s0], [197])
class buf148_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = [MemoryDep(name='buf149', index=c0, size=(232854*s0,))]
buf149.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf147', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf148', index=c0, size=(1182*s0, 197))]
buf149.met_dependencies = []
buf149.group.device = cuda:0
buf149.group.iteration = (232854*s0, 1)
buf149.sizes = ([1182*s0, 197], [])
class buf149_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf148', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf149', get_index_3, to_dtype_1, None)
        return store


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = [MemoryDep(name='buf150', index=c0, size=(75648*s0,))]
buf150.unmet_dependencies = [   MemoryDep(name='buf143', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf150.met_dependencies = []
buf150.group.device = cuda:0
buf150.group.iteration = (75648*s0, 1)
buf150.sizes = ([s0, 6, 197, 64], [])
class buf150_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf150', get_index_1, load, None)
        return store


buf151: ExternKernelSchedulerNode(ExternKernelOut)
buf151.writes = [StarDep(name='buf151')]
buf151.unmet_dependencies = [StarDep(name='buf149'), StarDep(name='buf150')]
buf151.met_dependencies = []
buf151.node.kernel = extern_kernels.bmm


buf152: SchedulerNode(ComputedBuffer)
buf152.writes = [MemoryDep(name='buf152', index=c0, size=(75648*s0,))]
buf152.unmet_dependencies = [   MemoryDep(name='buf151', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf152.met_dependencies = []
buf152.group.device = cuda:0
buf152.group.iteration = (75648*s0, 1)
buf152.sizes = ([s0, 197, 6, 64], [])
class buf152_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, load, None)
        return store


buf153: ExternKernelSchedulerNode(ExternKernelOut)
buf153.writes = [StarDep(name='buf153')]
buf153.unmet_dependencies = [StarDep(name='buf152')]
buf153.met_dependencies = [StarDep(name='arg80_1'), StarDep(name='arg81_1')]
buf153.node.kernel = extern_kernels.addmm


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = 
    [   MemoryDep(name='buf154', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf154', index=c0, size=(197*s0,))]
buf154.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,))]
buf154.met_dependencies = []
buf154.group.device = cuda:0
buf154.group.iteration = (197*s0, 384)
buf154.sizes = ([197*s0], [384])
class buf154_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf154', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = [MemoryDep(name='buf155', index=c0, size=(197*s0,))]
buf155.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(197*s0,))]
buf155.met_dependencies = []
buf155.group.device = cuda:0
buf155.group.iteration = (197*s0, 1)
buf155.sizes = ([197*s0], [])
class buf155_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf155', get_index_1, div, None)
        return store


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = 
    [   MemoryDep(name='buf156', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf156', index=c0, size=(197*s0,))]
buf156.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf155', index=c0, size=(197*s0, 384))]
buf156.met_dependencies = []
buf156.group.device = cuda:0
buf156.group.iteration = (197*s0, 384)
buf156.sizes = ([197*s0], [384])
class buf156_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf155', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf156', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(75648*s0,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf155', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf156', index=c0, size=(197*s0, 384))]
buf157.met_dependencies = 
    [   MemoryDep(name='arg82_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg83_1', index=c1, size=(197*s0, 384))]
buf157.group.device = cuda:0
buf157.group.iteration = (75648*s0, 1)
buf157.sizes = ([197*s0, 384], [])
class buf157_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf155', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf156', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg82_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg83_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf157', get_index_7, to_dtype_3, None)
        return store


buf158: ExternKernelSchedulerNode(ExternKernelOut)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf157')]
buf158.met_dependencies = [StarDep(name='arg84_1'), StarDep(name='arg85_1')]
buf158.node.kernel = extern_kernels.addmm


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = [MemoryDep(name='buf159', index=c0, size=(302592*s0,))]
buf159.unmet_dependencies = [MemoryDep(name='buf158', index=c0, size=(302592*s0,))]
buf159.met_dependencies = []
buf159.group.device = cuda:0
buf159.group.iteration = (302592*s0, 1)
buf159.sizes = ([302592*s0], [])
class buf159_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf158', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf159', get_index_2, to_dtype_2, None)
        return store


buf160: ExternKernelSchedulerNode(ExternKernelOut)
buf160.writes = [StarDep(name='buf160')]
buf160.unmet_dependencies = [StarDep(name='buf159')]
buf160.met_dependencies = [StarDep(name='arg86_1'), StarDep(name='arg87_1')]
buf160.node.kernel = extern_kernels.addmm


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = 
    [   MemoryDep(name='buf161', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf161', index=c0, size=(197*s0,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf160', index=c0, size=(75648*s0,))]
buf161.met_dependencies = []
buf161.group.device = cuda:0
buf161.group.iteration = (197*s0, 384)
buf161.sizes = ([197*s0], [384])
class buf161_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf161', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = [MemoryDep(name='buf162', index=c0, size=(197*s0,))]
buf162.unmet_dependencies = [MemoryDep(name='buf161', index=c0, size=(197*s0,))]
buf162.met_dependencies = []
buf162.group.device = cuda:0
buf162.group.iteration = (197*s0, 1)
buf162.sizes = ([197*s0], [])
class buf162_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, div, None)
        return store


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = 
    [   MemoryDep(name='buf163', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf163', index=c0, size=(197*s0,))]
buf163.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf160', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf162', index=c0, size=(197*s0, 384))]
buf163.met_dependencies = []
buf163.group.device = cuda:0
buf163.group.iteration = (197*s0, 384)
buf163.sizes = ([197*s0], [384])
class buf163_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf162', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf163', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf164: SchedulerNode(ComputedBuffer)
buf164.writes = [MemoryDep(name='buf164', index=c0, size=(75648*s0,))]
buf164.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf160', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf162', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf163', index=c0, size=(197*s0, 384))]
buf164.met_dependencies = 
    [   MemoryDep(name='arg88_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg89_1', index=c1, size=(197*s0, 384))]
buf164.group.device = cuda:0
buf164.group.iteration = (75648*s0, 1)
buf164.sizes = ([197*s0, 384], [])
class buf164_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf162', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf163', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg88_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg89_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf164', get_index_8, to_dtype_3, None)
        return store


buf165: ExternKernelSchedulerNode(ExternKernelOut)
buf165.writes = [StarDep(name='buf165')]
buf165.unmet_dependencies = [StarDep(name='buf164')]
buf165.met_dependencies = [StarDep(name='arg90_1'), StarDep(name='arg91_1')]
buf165.node.kernel = extern_kernels.addmm


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = [MemoryDep(name='buf166', index=c0, size=(75648*s0,))]
buf166.unmet_dependencies = [   MemoryDep(name='buf165', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf166.met_dependencies = []
buf166.group.device = cuda:0
buf166.group.iteration = (75648*s0, 1)
buf166.sizes = ([s0, 6, 197, 64], [])
class buf166_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf166', get_index_1, load, None)
        return store


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = [MemoryDep(name='buf167', index=c0, size=(75648*s0,))]
buf167.unmet_dependencies = [   MemoryDep(name='buf165', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf167.met_dependencies = []
buf167.group.device = cuda:0
buf167.group.iteration = (75648*s0, 1)
buf167.sizes = ([s0, 384, 197], [])
class buf167_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf167', get_index_1, load, None)
        return store


buf168: ExternKernelSchedulerNode(ExternKernelOut)
buf168.writes = [StarDep(name='buf168')]
buf168.unmet_dependencies = [StarDep(name='buf166'), StarDep(name='buf167')]
buf168.met_dependencies = []
buf168.node.kernel = extern_kernels.bmm


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = 
    [   MemoryDep(name='buf169', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf169', index=c0, size=(1182*s0,))]
buf169.unmet_dependencies = [MemoryDep(name='buf168', index=c0, size=(232854*s0,))]
buf169.met_dependencies = []
buf169.group.device = cuda:0
buf169.group.iteration = (1182*s0, 197)
buf169.sizes = ([1182*s0], [197])
class buf169_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf169', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = 
    [   MemoryDep(name='buf170', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf170', index=c0, size=(1182*s0,))]
buf170.unmet_dependencies = 
    [   MemoryDep(name='buf168', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf169', index=c0, size=(1182*s0, 197))]
buf170.met_dependencies = []
buf170.group.device = cuda:0
buf170.group.iteration = (1182*s0, 197)
buf170.sizes = ([1182*s0], [197])
class buf170_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf169', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf170', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = [MemoryDep(name='buf171', index=c0, size=(232854*s0,))]
buf171.unmet_dependencies = 
    [   MemoryDep(name='buf168', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf169', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf170', index=c0, size=(1182*s0, 197))]
buf171.met_dependencies = []
buf171.group.device = cuda:0
buf171.group.iteration = (232854*s0, 1)
buf171.sizes = ([1182*s0, 197], [])
class buf171_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf169', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf170', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf171', get_index_3, to_dtype_1, None)
        return store


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = [MemoryDep(name='buf172', index=c0, size=(75648*s0,))]
buf172.unmet_dependencies = [   MemoryDep(name='buf165', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf172.met_dependencies = []
buf172.group.device = cuda:0
buf172.group.iteration = (75648*s0, 1)
buf172.sizes = ([s0, 6, 197, 64], [])
class buf172_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf172', get_index_1, load, None)
        return store


buf173: ExternKernelSchedulerNode(ExternKernelOut)
buf173.writes = [StarDep(name='buf173')]
buf173.unmet_dependencies = [StarDep(name='buf171'), StarDep(name='buf172')]
buf173.met_dependencies = []
buf173.node.kernel = extern_kernels.bmm


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = [MemoryDep(name='buf174', index=c0, size=(75648*s0,))]
buf174.unmet_dependencies = [   MemoryDep(name='buf173', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf174.met_dependencies = []
buf174.group.device = cuda:0
buf174.group.iteration = (75648*s0, 1)
buf174.sizes = ([s0, 197, 6, 64], [])
class buf174_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store


buf175: ExternKernelSchedulerNode(ExternKernelOut)
buf175.writes = [StarDep(name='buf175')]
buf175.unmet_dependencies = [StarDep(name='buf174')]
buf175.met_dependencies = [StarDep(name='arg92_1'), StarDep(name='arg93_1')]
buf175.node.kernel = extern_kernels.addmm


buf176: SchedulerNode(ComputedBuffer)
buf176.writes = [MemoryDep(name='buf176', index=c0, size=(75648*s0,))]
buf176.unmet_dependencies = 
    [   MemoryDep(name='buf131', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf138', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf153', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf160', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf175', index=c0, size=(75648*s0,))]
buf176.met_dependencies = []
buf176.group.device = cuda:0
buf176.group.iteration = (75648*s0, 1)
buf176.sizes = ([75648*s0], [])
class buf176_loop_body:
    var_ranges = {z0: 75648*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf175', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, add_3, None)
        return store


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = 
    [   MemoryDep(name='buf177', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf177', index=c0, size=(197*s0,))]
buf177.unmet_dependencies = [MemoryDep(name='buf176', index=c0, size=(75648*s0,))]
buf177.met_dependencies = []
buf177.group.device = cuda:0
buf177.group.iteration = (197*s0, 384)
buf177.sizes = ([197*s0], [384])
class buf177_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf177', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = [MemoryDep(name='buf178', index=c0, size=(197*s0,))]
buf178.unmet_dependencies = [MemoryDep(name='buf177', index=c0, size=(197*s0,))]
buf178.met_dependencies = []
buf178.group.device = cuda:0
buf178.group.iteration = (197*s0, 1)
buf178.sizes = ([197*s0], [])
class buf178_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, div, None)
        return store


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = 
    [   MemoryDep(name='buf179', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf179', index=c0, size=(197*s0,))]
buf179.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf178', index=c0, size=(197*s0, 384))]
buf179.met_dependencies = []
buf179.group.device = cuda:0
buf179.group.iteration = (197*s0, 384)
buf179.sizes = ([197*s0], [384])
class buf179_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf178', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf179', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = [MemoryDep(name='buf180', index=c0, size=(75648*s0,))]
buf180.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf178', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf179', index=c0, size=(197*s0, 384))]
buf180.met_dependencies = 
    [   MemoryDep(name='arg94_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg95_1', index=c1, size=(197*s0, 384))]
buf180.group.device = cuda:0
buf180.group.iteration = (75648*s0, 1)
buf180.sizes = ([197*s0, 384], [])
class buf180_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf178', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf179', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg94_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg95_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf180', get_index_5, to_dtype_3, None)
        return store


buf181: ExternKernelSchedulerNode(ExternKernelOut)
buf181.writes = [StarDep(name='buf181')]
buf181.unmet_dependencies = [StarDep(name='buf180')]
buf181.met_dependencies = [StarDep(name='arg96_1'), StarDep(name='arg97_1')]
buf181.node.kernel = extern_kernels.addmm


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = [MemoryDep(name='buf182', index=c0, size=(302592*s0,))]
buf182.unmet_dependencies = [MemoryDep(name='buf181', index=c0, size=(302592*s0,))]
buf182.met_dependencies = []
buf182.group.device = cuda:0
buf182.group.iteration = (302592*s0, 1)
buf182.sizes = ([302592*s0], [])
class buf182_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf181', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf182', get_index_2, to_dtype_2, None)
        return store


buf183: ExternKernelSchedulerNode(ExternKernelOut)
buf183.writes = [StarDep(name='buf183')]
buf183.unmet_dependencies = [StarDep(name='buf182')]
buf183.met_dependencies = [StarDep(name='arg98_1'), StarDep(name='arg99_1')]
buf183.node.kernel = extern_kernels.addmm


buf184: SchedulerNode(ComputedBuffer)
buf184.writes = 
    [   MemoryDep(name='buf184', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf184', index=c0, size=(197*s0,))]
buf184.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,))]
buf184.met_dependencies = []
buf184.group.device = cuda:0
buf184.group.iteration = (197*s0, 384)
buf184.sizes = ([197*s0], [384])
class buf184_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf184', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = [MemoryDep(name='buf185', index=c0, size=(197*s0,))]
buf185.unmet_dependencies = [MemoryDep(name='buf184', index=c0, size=(197*s0,))]
buf185.met_dependencies = []
buf185.group.device = cuda:0
buf185.group.iteration = (197*s0, 1)
buf185.sizes = ([197*s0], [])
class buf185_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, div, None)
        return store


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = 
    [   MemoryDep(name='buf186', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf186', index=c0, size=(197*s0,))]
buf186.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf185', index=c0, size=(197*s0, 384))]
buf186.met_dependencies = []
buf186.group.device = cuda:0
buf186.group.iteration = (197*s0, 384)
buf186.sizes = ([197*s0], [384])
class buf186_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf186', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = [MemoryDep(name='buf187', index=c0, size=(75648*s0,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf185', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf186', index=c0, size=(197*s0, 384))]
buf187.met_dependencies = 
    [   MemoryDep(name='arg100_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg101_1', index=c1, size=(197*s0, 384))]
buf187.group.device = cuda:0
buf187.group.iteration = (75648*s0, 1)
buf187.sizes = ([197*s0, 384], [])
class buf187_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf186', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg101_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf187', get_index_6, to_dtype_3, None)
        return store


buf188: ExternKernelSchedulerNode(ExternKernelOut)
buf188.writes = [StarDep(name='buf188')]
buf188.unmet_dependencies = [StarDep(name='buf187')]
buf188.met_dependencies = [StarDep(name='arg102_1'), StarDep(name='arg103_1')]
buf188.node.kernel = extern_kernels.addmm


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = [MemoryDep(name='buf189', index=c0, size=(75648*s0,))]
buf189.unmet_dependencies = [   MemoryDep(name='buf188', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf189.met_dependencies = []
buf189.group.device = cuda:0
buf189.group.iteration = (75648*s0, 1)
buf189.sizes = ([s0, 6, 197, 64], [])
class buf189_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf189', get_index_1, load, None)
        return store


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = [MemoryDep(name='buf190', index=c0, size=(75648*s0,))]
buf190.unmet_dependencies = [   MemoryDep(name='buf188', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf190.met_dependencies = []
buf190.group.device = cuda:0
buf190.group.iteration = (75648*s0, 1)
buf190.sizes = ([s0, 384, 197], [])
class buf190_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


buf191: ExternKernelSchedulerNode(ExternKernelOut)
buf191.writes = [StarDep(name='buf191')]
buf191.unmet_dependencies = [StarDep(name='buf189'), StarDep(name='buf190')]
buf191.met_dependencies = []
buf191.node.kernel = extern_kernels.bmm


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = 
    [   MemoryDep(name='buf192', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf192', index=c0, size=(1182*s0,))]
buf192.unmet_dependencies = [MemoryDep(name='buf191', index=c0, size=(232854*s0,))]
buf192.met_dependencies = []
buf192.group.device = cuda:0
buf192.group.iteration = (1182*s0, 197)
buf192.sizes = ([1182*s0], [197])
class buf192_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf192', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = 
    [   MemoryDep(name='buf193', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf193', index=c0, size=(1182*s0,))]
buf193.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf192', index=c0, size=(1182*s0, 197))]
buf193.met_dependencies = []
buf193.group.device = cuda:0
buf193.group.iteration = (1182*s0, 197)
buf193.sizes = ([1182*s0], [197])
class buf193_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf193', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf194: SchedulerNode(ComputedBuffer)
buf194.writes = [MemoryDep(name='buf194', index=c0, size=(232854*s0,))]
buf194.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf192', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf193', index=c0, size=(1182*s0, 197))]
buf194.met_dependencies = []
buf194.group.device = cuda:0
buf194.group.iteration = (232854*s0, 1)
buf194.sizes = ([1182*s0, 197], [])
class buf194_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf193', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf194', get_index_3, to_dtype_1, None)
        return store


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = [MemoryDep(name='buf195', index=c0, size=(75648*s0,))]
buf195.unmet_dependencies = [   MemoryDep(name='buf188', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf195.met_dependencies = []
buf195.group.device = cuda:0
buf195.group.iteration = (75648*s0, 1)
buf195.sizes = ([s0, 6, 197, 64], [])
class buf195_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf195', get_index_1, load, None)
        return store


buf196: ExternKernelSchedulerNode(ExternKernelOut)
buf196.writes = [StarDep(name='buf196')]
buf196.unmet_dependencies = [StarDep(name='buf194'), StarDep(name='buf195')]
buf196.met_dependencies = []
buf196.node.kernel = extern_kernels.bmm


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = [MemoryDep(name='buf197', index=c0, size=(75648*s0,))]
buf197.unmet_dependencies = [   MemoryDep(name='buf196', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf197.met_dependencies = []
buf197.group.device = cuda:0
buf197.group.iteration = (75648*s0, 1)
buf197.sizes = ([s0, 197, 6, 64], [])
class buf197_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf197', get_index_1, load, None)
        return store


buf198: ExternKernelSchedulerNode(ExternKernelOut)
buf198.writes = [StarDep(name='buf198')]
buf198.unmet_dependencies = [StarDep(name='buf197')]
buf198.met_dependencies = [StarDep(name='arg104_1'), StarDep(name='arg105_1')]
buf198.node.kernel = extern_kernels.addmm


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = 
    [   MemoryDep(name='buf199', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf199', index=c0, size=(197*s0,))]
buf199.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,))]
buf199.met_dependencies = []
buf199.group.device = cuda:0
buf199.group.iteration = (197*s0, 384)
buf199.sizes = ([197*s0], [384])
class buf199_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf199', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf200: SchedulerNode(ComputedBuffer)
buf200.writes = [MemoryDep(name='buf200', index=c0, size=(197*s0,))]
buf200.unmet_dependencies = [MemoryDep(name='buf199', index=c0, size=(197*s0,))]
buf200.met_dependencies = []
buf200.group.device = cuda:0
buf200.group.iteration = (197*s0, 1)
buf200.sizes = ([197*s0], [])
class buf200_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf200', get_index_1, div, None)
        return store


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = 
    [   MemoryDep(name='buf201', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf201', index=c0, size=(197*s0,))]
buf201.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf200', index=c0, size=(197*s0, 384))]
buf201.met_dependencies = []
buf201.group.device = cuda:0
buf201.group.iteration = (197*s0, 384)
buf201.sizes = ([197*s0], [384])
class buf201_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf201', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = [MemoryDep(name='buf202', index=c0, size=(75648*s0,))]
buf202.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf200', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf201', index=c0, size=(197*s0, 384))]
buf202.met_dependencies = 
    [   MemoryDep(name='arg106_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg107_1', index=c1, size=(197*s0, 384))]
buf202.group.device = cuda:0
buf202.group.iteration = (75648*s0, 1)
buf202.sizes = ([197*s0, 384], [])
class buf202_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg106_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg107_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf202', get_index_7, to_dtype_3, None)
        return store


buf203: ExternKernelSchedulerNode(ExternKernelOut)
buf203.writes = [StarDep(name='buf203')]
buf203.unmet_dependencies = [StarDep(name='buf202')]
buf203.met_dependencies = [StarDep(name='arg108_1'), StarDep(name='arg109_1')]
buf203.node.kernel = extern_kernels.addmm


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = [MemoryDep(name='buf204', index=c0, size=(302592*s0,))]
buf204.unmet_dependencies = [MemoryDep(name='buf203', index=c0, size=(302592*s0,))]
buf204.met_dependencies = []
buf204.group.device = cuda:0
buf204.group.iteration = (302592*s0, 1)
buf204.sizes = ([302592*s0], [])
class buf204_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf203', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf204', get_index_2, to_dtype_2, None)
        return store


buf205: ExternKernelSchedulerNode(ExternKernelOut)
buf205.writes = [StarDep(name='buf205')]
buf205.unmet_dependencies = [StarDep(name='buf204')]
buf205.met_dependencies = [StarDep(name='arg110_1'), StarDep(name='arg111_1')]
buf205.node.kernel = extern_kernels.addmm


buf206: SchedulerNode(ComputedBuffer)
buf206.writes = 
    [   MemoryDep(name='buf206', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf206', index=c0, size=(197*s0,))]
buf206.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf205', index=c0, size=(75648*s0,))]
buf206.met_dependencies = []
buf206.group.device = cuda:0
buf206.group.iteration = (197*s0, 384)
buf206.sizes = ([197*s0], [384])
class buf206_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf206', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf207: SchedulerNode(ComputedBuffer)
buf207.writes = [MemoryDep(name='buf207', index=c0, size=(197*s0,))]
buf207.unmet_dependencies = [MemoryDep(name='buf206', index=c0, size=(197*s0,))]
buf207.met_dependencies = []
buf207.group.device = cuda:0
buf207.group.iteration = (197*s0, 1)
buf207.sizes = ([197*s0], [])
class buf207_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf207', get_index_1, div, None)
        return store


buf208: SchedulerNode(ComputedBuffer)
buf208.writes = 
    [   MemoryDep(name='buf208', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf208', index=c0, size=(197*s0,))]
buf208.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf205', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf207', index=c0, size=(197*s0, 384))]
buf208.met_dependencies = []
buf208.group.device = cuda:0
buf208.group.iteration = (197*s0, 384)
buf208.sizes = ([197*s0], [384])
class buf208_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf207', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf208', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = [MemoryDep(name='buf209', index=c0, size=(75648*s0,))]
buf209.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf205', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf207', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf208', index=c0, size=(197*s0, 384))]
buf209.met_dependencies = 
    [   MemoryDep(name='arg112_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg113_1', index=c1, size=(197*s0, 384))]
buf209.group.device = cuda:0
buf209.group.iteration = (75648*s0, 1)
buf209.sizes = ([197*s0, 384], [])
class buf209_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf207', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf208', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg112_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg113_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf209', get_index_8, to_dtype_3, None)
        return store


buf210: ExternKernelSchedulerNode(ExternKernelOut)
buf210.writes = [StarDep(name='buf210')]
buf210.unmet_dependencies = [StarDep(name='buf209')]
buf210.met_dependencies = [StarDep(name='arg114_1'), StarDep(name='arg115_1')]
buf210.node.kernel = extern_kernels.addmm


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = [MemoryDep(name='buf211', index=c0, size=(75648*s0,))]
buf211.unmet_dependencies = [   MemoryDep(name='buf210', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf211.met_dependencies = []
buf211.group.device = cuda:0
buf211.group.iteration = (75648*s0, 1)
buf211.sizes = ([s0, 6, 197, 64], [])
class buf211_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf211', get_index_1, load, None)
        return store


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(75648*s0,))]
buf212.unmet_dependencies = [   MemoryDep(name='buf210', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf212.met_dependencies = []
buf212.group.device = cuda:0
buf212.group.iteration = (75648*s0, 1)
buf212.sizes = ([s0, 384, 197], [])
class buf212_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf212', get_index_1, load, None)
        return store


buf213: ExternKernelSchedulerNode(ExternKernelOut)
buf213.writes = [StarDep(name='buf213')]
buf213.unmet_dependencies = [StarDep(name='buf211'), StarDep(name='buf212')]
buf213.met_dependencies = []
buf213.node.kernel = extern_kernels.bmm


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = 
    [   MemoryDep(name='buf214', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf214', index=c0, size=(1182*s0,))]
buf214.unmet_dependencies = [MemoryDep(name='buf213', index=c0, size=(232854*s0,))]
buf214.met_dependencies = []
buf214.group.device = cuda:0
buf214.group.iteration = (1182*s0, 197)
buf214.sizes = ([1182*s0], [197])
class buf214_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf214', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = 
    [   MemoryDep(name='buf215', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf215', index=c0, size=(1182*s0,))]
buf215.unmet_dependencies = 
    [   MemoryDep(name='buf213', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf214', index=c0, size=(1182*s0, 197))]
buf215.met_dependencies = []
buf215.group.device = cuda:0
buf215.group.iteration = (1182*s0, 197)
buf215.sizes = ([1182*s0], [197])
class buf215_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf215', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = [MemoryDep(name='buf216', index=c0, size=(232854*s0,))]
buf216.unmet_dependencies = 
    [   MemoryDep(name='buf213', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf214', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf215', index=c0, size=(1182*s0, 197))]
buf216.met_dependencies = []
buf216.group.device = cuda:0
buf216.group.iteration = (232854*s0, 1)
buf216.sizes = ([1182*s0, 197], [])
class buf216_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf215', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf216', get_index_3, to_dtype_1, None)
        return store


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = [MemoryDep(name='buf217', index=c0, size=(75648*s0,))]
buf217.unmet_dependencies = [   MemoryDep(name='buf210', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf217.met_dependencies = []
buf217.group.device = cuda:0
buf217.group.iteration = (75648*s0, 1)
buf217.sizes = ([s0, 6, 197, 64], [])
class buf217_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf217', get_index_1, load, None)
        return store


buf218: ExternKernelSchedulerNode(ExternKernelOut)
buf218.writes = [StarDep(name='buf218')]
buf218.unmet_dependencies = [StarDep(name='buf216'), StarDep(name='buf217')]
buf218.met_dependencies = []
buf218.node.kernel = extern_kernels.bmm


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = [MemoryDep(name='buf219', index=c0, size=(75648*s0,))]
buf219.unmet_dependencies = [   MemoryDep(name='buf218', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf219.met_dependencies = []
buf219.group.device = cuda:0
buf219.group.iteration = (75648*s0, 1)
buf219.sizes = ([s0, 197, 6, 64], [])
class buf219_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf219', get_index_1, load, None)
        return store


buf220: ExternKernelSchedulerNode(ExternKernelOut)
buf220.writes = [StarDep(name='buf220')]
buf220.unmet_dependencies = [StarDep(name='buf219')]
buf220.met_dependencies = [StarDep(name='arg116_1'), StarDep(name='arg117_1')]
buf220.node.kernel = extern_kernels.addmm


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep(name='buf221', index=c0, size=(75648*s0,))]
buf221.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf183', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf198', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf205', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf220', index=c0, size=(75648*s0,))]
buf221.met_dependencies = []
buf221.group.device = cuda:0
buf221.group.iteration = (75648*s0, 1)
buf221.sizes = ([75648*s0], [])
class buf221_loop_body:
    var_ranges = {z0: 75648*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf220', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_3, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = 
    [   MemoryDep(name='buf222', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf222', index=c0, size=(197*s0,))]
buf222.unmet_dependencies = [MemoryDep(name='buf221', index=c0, size=(75648*s0,))]
buf222.met_dependencies = []
buf222.group.device = cuda:0
buf222.group.iteration = (197*s0, 384)
buf222.sizes = ([197*s0], [384])
class buf222_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf222', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(197*s0,))]
buf223.unmet_dependencies = [MemoryDep(name='buf222', index=c0, size=(197*s0,))]
buf223.met_dependencies = []
buf223.group.device = cuda:0
buf223.group.iteration = (197*s0, 1)
buf223.sizes = ([197*s0], [])
class buf223_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf223', get_index_1, div, None)
        return store


buf224: SchedulerNode(ComputedBuffer)
buf224.writes = 
    [   MemoryDep(name='buf224', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf224', index=c0, size=(197*s0,))]
buf224.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf223', index=c0, size=(197*s0, 384))]
buf224.met_dependencies = []
buf224.group.device = cuda:0
buf224.group.iteration = (197*s0, 384)
buf224.sizes = ([197*s0], [384])
class buf224_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf223', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf224', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = [MemoryDep(name='buf225', index=c0, size=(75648*s0,))]
buf225.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf223', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf224', index=c0, size=(197*s0, 384))]
buf225.met_dependencies = 
    [   MemoryDep(name='arg118_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg119_1', index=c1, size=(197*s0, 384))]
buf225.group.device = cuda:0
buf225.group.iteration = (75648*s0, 1)
buf225.sizes = ([197*s0, 384], [])
class buf225_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf223', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf224', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg119_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf225', get_index_5, to_dtype_3, None)
        return store


buf226: ExternKernelSchedulerNode(ExternKernelOut)
buf226.writes = [StarDep(name='buf226')]
buf226.unmet_dependencies = [StarDep(name='buf225')]
buf226.met_dependencies = [StarDep(name='arg120_1'), StarDep(name='arg121_1')]
buf226.node.kernel = extern_kernels.addmm


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = [MemoryDep(name='buf227', index=c0, size=(302592*s0,))]
buf227.unmet_dependencies = [MemoryDep(name='buf226', index=c0, size=(302592*s0,))]
buf227.met_dependencies = []
buf227.group.device = cuda:0
buf227.group.iteration = (302592*s0, 1)
buf227.sizes = ([302592*s0], [])
class buf227_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf226', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf227', get_index_2, to_dtype_2, None)
        return store


buf228: ExternKernelSchedulerNode(ExternKernelOut)
buf228.writes = [StarDep(name='buf228')]
buf228.unmet_dependencies = [StarDep(name='buf227')]
buf228.met_dependencies = [StarDep(name='arg122_1'), StarDep(name='arg123_1')]
buf228.node.kernel = extern_kernels.addmm


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = 
    [   MemoryDep(name='buf229', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf229', index=c0, size=(197*s0,))]
buf229.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,))]
buf229.met_dependencies = []
buf229.group.device = cuda:0
buf229.group.iteration = (197*s0, 384)
buf229.sizes = ([197*s0], [384])
class buf229_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf229', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf230: SchedulerNode(ComputedBuffer)
buf230.writes = [MemoryDep(name='buf230', index=c0, size=(197*s0,))]
buf230.unmet_dependencies = [MemoryDep(name='buf229', index=c0, size=(197*s0,))]
buf230.met_dependencies = []
buf230.group.device = cuda:0
buf230.group.iteration = (197*s0, 1)
buf230.sizes = ([197*s0], [])
class buf230_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf230', get_index_1, div, None)
        return store


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = 
    [   MemoryDep(name='buf231', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf231', index=c0, size=(197*s0,))]
buf231.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf230', index=c0, size=(197*s0, 384))]
buf231.met_dependencies = []
buf231.group.device = cuda:0
buf231.group.iteration = (197*s0, 384)
buf231.sizes = ([197*s0], [384])
class buf231_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf230', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf231', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = [MemoryDep(name='buf232', index=c0, size=(75648*s0,))]
buf232.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf230', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf231', index=c0, size=(197*s0, 384))]
buf232.met_dependencies = 
    [   MemoryDep(name='arg124_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg125_1', index=c1, size=(197*s0, 384))]
buf232.group.device = cuda:0
buf232.group.iteration = (75648*s0, 1)
buf232.sizes = ([197*s0, 384], [])
class buf232_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf230', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf231', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg124_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg125_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf232', get_index_6, to_dtype_3, None)
        return store


buf233: ExternKernelSchedulerNode(ExternKernelOut)
buf233.writes = [StarDep(name='buf233')]
buf233.unmet_dependencies = [StarDep(name='buf232')]
buf233.met_dependencies = [StarDep(name='arg126_1'), StarDep(name='arg127_1')]
buf233.node.kernel = extern_kernels.addmm


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = [MemoryDep(name='buf234', index=c0, size=(75648*s0,))]
buf234.unmet_dependencies = [   MemoryDep(name='buf233', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf234.met_dependencies = []
buf234.group.device = cuda:0
buf234.group.iteration = (75648*s0, 1)
buf234.sizes = ([s0, 6, 197, 64], [])
class buf234_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = [MemoryDep(name='buf235', index=c0, size=(75648*s0,))]
buf235.unmet_dependencies = [   MemoryDep(name='buf233', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf235.met_dependencies = []
buf235.group.device = cuda:0
buf235.group.iteration = (75648*s0, 1)
buf235.sizes = ([s0, 384, 197], [])
class buf235_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf235', get_index_1, load, None)
        return store


buf236: ExternKernelSchedulerNode(ExternKernelOut)
buf236.writes = [StarDep(name='buf236')]
buf236.unmet_dependencies = [StarDep(name='buf234'), StarDep(name='buf235')]
buf236.met_dependencies = []
buf236.node.kernel = extern_kernels.bmm


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = 
    [   MemoryDep(name='buf237', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf237', index=c0, size=(1182*s0,))]
buf237.unmet_dependencies = [MemoryDep(name='buf236', index=c0, size=(232854*s0,))]
buf237.met_dependencies = []
buf237.group.device = cuda:0
buf237.group.iteration = (1182*s0, 197)
buf237.sizes = ([1182*s0], [197])
class buf237_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf237', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = 
    [   MemoryDep(name='buf238', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf238', index=c0, size=(1182*s0,))]
buf238.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf237', index=c0, size=(1182*s0, 197))]
buf238.met_dependencies = []
buf238.group.device = cuda:0
buf238.group.iteration = (1182*s0, 197)
buf238.sizes = ([1182*s0], [197])
class buf238_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf237', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf238', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(232854*s0,))]
buf239.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf237', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf238', index=c0, size=(1182*s0, 197))]
buf239.met_dependencies = []
buf239.group.device = cuda:0
buf239.group.iteration = (232854*s0, 1)
buf239.sizes = ([1182*s0, 197], [])
class buf239_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf237', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf238', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf239', get_index_3, to_dtype_1, None)
        return store


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = [MemoryDep(name='buf240', index=c0, size=(75648*s0,))]
buf240.unmet_dependencies = [   MemoryDep(name='buf233', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf240.met_dependencies = []
buf240.group.device = cuda:0
buf240.group.iteration = (75648*s0, 1)
buf240.sizes = ([s0, 6, 197, 64], [])
class buf240_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store


buf241: ExternKernelSchedulerNode(ExternKernelOut)
buf241.writes = [StarDep(name='buf241')]
buf241.unmet_dependencies = [StarDep(name='buf239'), StarDep(name='buf240')]
buf241.met_dependencies = []
buf241.node.kernel = extern_kernels.bmm


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = [MemoryDep(name='buf242', index=c0, size=(75648*s0,))]
buf242.unmet_dependencies = [   MemoryDep(name='buf241', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf242.met_dependencies = []
buf242.group.device = cuda:0
buf242.group.iteration = (75648*s0, 1)
buf242.sizes = ([s0, 197, 6, 64], [])
class buf242_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf242', get_index_1, load, None)
        return store


buf243: ExternKernelSchedulerNode(ExternKernelOut)
buf243.writes = [StarDep(name='buf243')]
buf243.unmet_dependencies = [StarDep(name='buf242')]
buf243.met_dependencies = [StarDep(name='arg128_1'), StarDep(name='arg129_1')]
buf243.node.kernel = extern_kernels.addmm


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = 
    [   MemoryDep(name='buf244', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf244', index=c0, size=(197*s0,))]
buf244.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,))]
buf244.met_dependencies = []
buf244.group.device = cuda:0
buf244.group.iteration = (197*s0, 384)
buf244.sizes = ([197*s0], [384])
class buf244_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf244', torch.float32, torch.float32, 'sum', get_index_3, to_dtype)
        return reduction


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep(name='buf245', index=c0, size=(197*s0,))]
buf245.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(197*s0,))]
buf245.met_dependencies = []
buf245.group.device = cuda:0
buf245.group.iteration = (197*s0, 1)
buf245.sizes = ([197*s0], [])
class buf245_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf245', get_index_1, div, None)
        return store


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = 
    [   MemoryDep(name='buf246', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf246', index=c0, size=(197*s0,))]
buf246.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf245', index=c0, size=(197*s0, 384))]
buf246.met_dependencies = []
buf246.group.device = cuda:0
buf246.group.iteration = (197*s0, 384)
buf246.sizes = ([197*s0], [384])
class buf246_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf245', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        square = ops.square(sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf246', torch.float32, torch.float32, 'sum', get_index_4, square)
        return reduction


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = [MemoryDep(name='buf247', index=c0, size=(75648*s0,))]
buf247.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf245', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf246', index=c0, size=(197*s0, 384))]
buf247.met_dependencies = 
    [   MemoryDep(name='arg130_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg131_1', index=c1, size=(197*s0, 384))]
buf247.group.device = cuda:0
buf247.group.iteration = (75648*s0, 1)
buf247.sizes = ([197*s0, 384], [])
class buf247_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        to_dtype = ops.to_dtype(add_1, torch.float32)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf245', get_index_3)
        sub = ops.sub(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf246', get_index_4)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg130_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_5, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg131_1', get_index_6)
        to_dtype_2 = ops.to_dtype(load_6, torch.float32)
        add_3 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_3, torch.float16)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf247', get_index_7, to_dtype_3, None)
        return store


buf248: ExternKernelSchedulerNode(ExternKernelOut)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf247')]
buf248.met_dependencies = [StarDep(name='arg132_1'), StarDep(name='arg133_1')]
buf248.node.kernel = extern_kernels.addmm


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = [MemoryDep(name='buf249', index=c0, size=(302592*s0,))]
buf249.unmet_dependencies = [MemoryDep(name='buf248', index=c0, size=(302592*s0,))]
buf249.met_dependencies = []
buf249.group.device = cuda:0
buf249.group.iteration = (302592*s0, 1)
buf249.sizes = ([302592*s0], [])
class buf249_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf248', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf249', get_index_2, to_dtype_2, None)
        return store


buf250: ExternKernelSchedulerNode(ExternKernelOut)
buf250.writes = [StarDep(name='buf250')]
buf250.unmet_dependencies = [StarDep(name='buf249')]
buf250.met_dependencies = [StarDep(name='arg134_1'), StarDep(name='arg135_1')]
buf250.node.kernel = extern_kernels.addmm


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf251', index=c0, size=(197*s0,))]
buf251.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf250', index=c0, size=(75648*s0,))]
buf251.met_dependencies = []
buf251.group.device = cuda:0
buf251.group.iteration = (197*s0, 384)
buf251.sizes = ([197*s0], [384])
class buf251_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf250', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'sum', get_index_4, to_dtype)
        return reduction


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = [MemoryDep(name='buf252', index=c0, size=(197*s0,))]
buf252.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(197*s0,))]
buf252.met_dependencies = []
buf252.group.device = cuda:0
buf252.group.iteration = (197*s0, 1)
buf252.sizes = ([197*s0], [])
class buf252_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, div, None)
        return store


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = 
    [   MemoryDep(name='buf253', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf253', index=c0, size=(197*s0,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf250', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf252', index=c0, size=(197*s0, 384))]
buf253.met_dependencies = []
buf253.group.device = cuda:0
buf253.group.iteration = (197*s0, 384)
buf253.sizes = ([197*s0], [384])
class buf253_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf250', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf252', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf253', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf254: SchedulerNode(ComputedBuffer)
buf254.writes = [MemoryDep(name='buf254', index=c0, size=(75648*s0,))]
buf254.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf250', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf252', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf253', index=c0, size=(197*s0, 384))]
buf254.met_dependencies = 
    [   MemoryDep(name='arg136_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg137_1', index=c1, size=(197*s0, 384))]
buf254.group.device = cuda:0
buf254.group.iteration = (75648*s0, 1)
buf254.sizes = ([197*s0, 384], [])
class buf254_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf250', get_index_3)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float32)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf252', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf253', get_index_5)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg136_1', get_index_6)
        to_dtype_1 = ops.to_dtype(load_6, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg137_1', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.float32)
        add_4 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_4, torch.float16)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf254', get_index_8, to_dtype_3, None)
        return store


buf255: ExternKernelSchedulerNode(ExternKernelOut)
buf255.writes = [StarDep(name='buf255')]
buf255.unmet_dependencies = [StarDep(name='buf254')]
buf255.met_dependencies = [StarDep(name='arg138_1'), StarDep(name='arg139_1')]
buf255.node.kernel = extern_kernels.addmm


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = [MemoryDep(name='buf256', index=c0, size=(75648*s0,))]
buf256.unmet_dependencies = [   MemoryDep(name='buf255', index=226944*c0 + 64*c1 + 1152*c2 + c3, size=(s0, 6, 197, 64))]
buf256.met_dependencies = []
buf256.group.device = cuda:0
buf256.group.iteration = (75648*s0, 1)
buf256.sizes = ([s0, 6, 197, 64], [])
class buf256_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf256', get_index_1, load, None)
        return store


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep(name='buf257', index=c0, size=(75648*s0,))]
buf257.unmet_dependencies = [   MemoryDep(name='buf255', index=226944*c0 + c1 + 1152*c2 + 384, size=(s0, 384, 197))]
buf257.met_dependencies = []
buf257.group.device = cuda:0
buf257.group.iteration = (75648*s0, 1)
buf257.sizes = ([s0, 384, 197], [])
class buf257_loop_body:
    var_ranges = {z0: s0, z1: 384, z2: 197}
    index0 = 226944*z0 + z1 + 1152*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


buf258: ExternKernelSchedulerNode(ExternKernelOut)
buf258.writes = [StarDep(name='buf258')]
buf258.unmet_dependencies = [StarDep(name='buf256'), StarDep(name='buf257')]
buf258.met_dependencies = []
buf258.node.kernel = extern_kernels.bmm


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = 
    [   MemoryDep(name='buf259', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf259', index=c0, size=(1182*s0,))]
buf259.unmet_dependencies = [MemoryDep(name='buf258', index=c0, size=(232854*s0,))]
buf259.met_dependencies = []
buf259.group.device = cuda:0
buf259.group.iteration = (1182*s0, 197)
buf259.sizes = ([1182*s0], [197])
class buf259_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf259', torch.float32, torch.float32, 'max', get_index_1, to_dtype)
        return reduction


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = 
    [   MemoryDep(name='buf260', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf260', index=c0, size=(1182*s0,))]
buf260.unmet_dependencies = 
    [   MemoryDep(name='buf258', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf259', index=c0, size=(1182*s0, 197))]
buf260.met_dependencies = []
buf260.group.device = cuda:0
buf260.group.iteration = (1182*s0, 197)
buf260.sizes = ([1182*s0], [197])
class buf260_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf259', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf260', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = [MemoryDep(name='buf261', index=c0, size=(232854*s0,))]
buf261.unmet_dependencies = 
    [   MemoryDep(name='buf258', index=c0, size=(232854*s0,)),
        MemoryDep(name='buf259', index=c0, size=(1182*s0, 197)),
        MemoryDep(name='buf260', index=c0, size=(1182*s0, 197))]
buf261.met_dependencies = []
buf261.group.device = cuda:0
buf261.group.iteration = (232854*s0, 1)
buf261.sizes = ([1182*s0, 197], [])
class buf261_loop_body:
    var_ranges = {z0: 1182*s0, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(0.125, torch.float16)
        mul = ops.mul(load, constant)
        to_dtype = ops.to_dtype(mul, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf259', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf260', get_index_2)
        div = ops.div(exp, load_2)
        to_dtype_1 = ops.to_dtype(div, torch.float16)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf261', get_index_3, to_dtype_1, None)
        return store


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = [MemoryDep(name='buf262', index=c0, size=(75648*s0,))]
buf262.unmet_dependencies = [   MemoryDep(name='buf255', index=226944*c0 + 64*c1 + 1152*c2 + c3 + 768, size=(s0, 6, 197, 64))]
buf262.met_dependencies = []
buf262.group.device = cuda:0
buf262.group.iteration = (75648*s0, 1)
buf262.sizes = ([s0, 6, 197, 64], [])
class buf262_loop_body:
    var_ranges = {z0: s0, z1: 6, z2: 197, z3: 64}
    index0 = 226944*z0 + 64*z1 + 1152*z2 + z3 + 768
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store


buf263: ExternKernelSchedulerNode(ExternKernelOut)
buf263.writes = [StarDep(name='buf263')]
buf263.unmet_dependencies = [StarDep(name='buf261'), StarDep(name='buf262')]
buf263.met_dependencies = []
buf263.node.kernel = extern_kernels.bmm


buf264: SchedulerNode(ComputedBuffer)
buf264.writes = [MemoryDep(name='buf264', index=c0, size=(75648*s0,))]
buf264.unmet_dependencies = [   MemoryDep(name='buf263', index=75648*c0 + 64*c1 + 12608*c2 + c3, size=(s0, 197, 6, 64))]
buf264.met_dependencies = []
buf264.group.device = cuda:0
buf264.group.iteration = (75648*s0, 1)
buf264.sizes = ([s0, 197, 6, 64], [])
class buf264_loop_body:
    var_ranges = {z0: s0, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf264', get_index_1, load, None)
        return store


buf265: ExternKernelSchedulerNode(ExternKernelOut)
buf265.writes = [StarDep(name='buf265')]
buf265.unmet_dependencies = [StarDep(name='buf264')]
buf265.met_dependencies = [StarDep(name='arg140_1'), StarDep(name='arg141_1')]
buf265.node.kernel = extern_kernels.addmm


buf266: SchedulerNode(ComputedBuffer)
buf266.writes = [MemoryDep(name='buf266', index=c0, size=(75648*s0,))]
buf266.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf228', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf243', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf250', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf265', index=c0, size=(75648*s0,))]
buf266.met_dependencies = []
buf266.group.device = cuda:0
buf266.group.iteration = (75648*s0, 1)
buf266.sizes = ([75648*s0], [])
class buf266_loop_body:
    var_ranges = {z0: 75648*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf250', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf265', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf266', get_index_5, add_3, None)
        return store


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = 
    [   MemoryDep(name='buf267', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf267', index=c0, size=(197*s0,))]
buf267.unmet_dependencies = [MemoryDep(name='buf266', index=c0, size=(75648*s0,))]
buf267.met_dependencies = []
buf267.group.device = cuda:0
buf267.group.iteration = (197*s0, 384)
buf267.sizes = ([197*s0], [384])
class buf267_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf267', torch.float32, torch.float32, 'sum', get_index_1, to_dtype)
        return reduction


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = [MemoryDep(name='buf268', index=c0, size=(197*s0,))]
buf268.unmet_dependencies = [MemoryDep(name='buf267', index=c0, size=(197*s0,))]
buf268.met_dependencies = []
buf268.group.device = cuda:0
buf268.group.iteration = (197*s0, 1)
buf268.sizes = ([197*s0], [])
class buf268_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf268', get_index_1, div, None)
        return store


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = 
    [   MemoryDep(name='buf269', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf269', index=c0, size=(197*s0,))]
buf269.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf268', index=c0, size=(197*s0, 384))]
buf269.met_dependencies = []
buf269.group.device = cuda:0
buf269.group.iteration = (197*s0, 384)
buf269.sizes = ([197*s0], [384])
class buf269_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf269', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = [MemoryDep(name='buf270', index=c0, size=(75648*s0,))]
buf270.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf268', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf269', index=c0, size=(197*s0, 384))]
buf270.met_dependencies = 
    [   MemoryDep(name='arg142_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg143_1', index=c1, size=(197*s0, 384))]
buf270.group.device = cuda:0
buf270.group.iteration = (75648*s0, 1)
buf270.sizes = ([197*s0, 384], [])
class buf270_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(to_dtype, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg142_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg143_1', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32)
        add_1 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float16)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, to_dtype_3, None)
        return store


buf271: ExternKernelSchedulerNode(ExternKernelOut)
buf271.writes = [StarDep(name='buf271')]
buf271.unmet_dependencies = [StarDep(name='buf270')]
buf271.met_dependencies = [StarDep(name='arg144_1'), StarDep(name='arg145_1')]
buf271.node.kernel = extern_kernels.addmm


buf272: SchedulerNode(ComputedBuffer)
buf272.writes = [MemoryDep(name='buf272', index=c0, size=(302592*s0,))]
buf272.unmet_dependencies = [MemoryDep(name='buf271', index=c0, size=(302592*s0,))]
buf272.met_dependencies = []
buf272.group.device = cuda:0
buf272.group.iteration = (302592*s0, 1)
buf272.sizes = ([302592*s0], [])
class buf272_loop_body:
    var_ranges = {z0: 302592*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf271', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf272', get_index_2, to_dtype_2, None)
        return store


buf273: ExternKernelSchedulerNode(ExternKernelOut)
buf273.writes = [StarDep(name='buf273')]
buf273.unmet_dependencies = [StarDep(name='buf272')]
buf273.met_dependencies = [StarDep(name='arg146_1'), StarDep(name='arg147_1')]
buf273.node.kernel = extern_kernels.addmm


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = 
    [   MemoryDep(name='buf274', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf274', index=c0, size=(197*s0,))]
buf274.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf273', index=c0, size=(75648*s0,))]
buf274.met_dependencies = []
buf274.group.device = cuda:0
buf274.group.iteration = (197*s0, 384)
buf274.sizes = ([197*s0], [384])
class buf274_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf273', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf274', torch.float32, torch.float32, 'sum', get_index_2, to_dtype)
        return reduction


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = [MemoryDep(name='buf275', index=c0, size=(197*s0,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=c0, size=(197*s0,))]
buf275.met_dependencies = []
buf275.group.device = cuda:0
buf275.group.iteration = (197*s0, 1)
buf275.sizes = ([197*s0], [])
class buf275_loop_body:
    var_ranges = {z0: 197*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf275', get_index_1, div, None)
        return store


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = 
    [   MemoryDep(name='buf276', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf276', index=c0, size=(197*s0,))]
buf276.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf273', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf275', index=c0, size=(197*s0, 384))]
buf276.met_dependencies = []
buf276.group.device = cuda:0
buf276.group.iteration = (197*s0, 384)
buf276.sizes = ([197*s0], [384])
class buf276_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf273', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf275', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf276', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = [MemoryDep(name='buf277', index=c0, size=(75648*s0,))]
buf277.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf273', index=c0, size=(75648*s0,)),
        MemoryDep(name='buf275', index=c0, size=(197*s0, 384)),
        MemoryDep(name='buf276', index=c0, size=(197*s0, 384))]
buf277.met_dependencies = 
    [   MemoryDep(name='arg148_1', index=c1, size=(197*s0, 384)),
        MemoryDep(name='arg149_1', index=c1, size=(197*s0, 384))]
buf277.group.device = cuda:0
buf277.group.iteration = (75648*s0, 1)
buf277.sizes = ([197*s0, 384], [])
class buf277_loop_body:
    var_ranges = {z0: 197*s0, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf273', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf275', get_index_2)
        sub = ops.sub(to_dtype, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf276', get_index_3)
        constant = ops.constant(384, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg148_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32)
        mul_1 = ops.mul(mul, to_dtype_1)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg149_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32)
        add_2 = ops.add(mul_1, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float16)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf277', get_index_6, to_dtype_3, None)
        return store


buf278: ExternKernelSchedulerNode(ExternKernelOut)
buf278.writes = [StarDep(name='buf278')]
buf278.unmet_dependencies = [StarDep(name='buf277')]
buf278.met_dependencies = [StarDep(name='arg150_1'), StarDep(name='arg151_1')]
buf278.node.kernel = extern_kernels.addmm


