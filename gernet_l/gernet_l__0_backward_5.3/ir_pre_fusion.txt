buf0: ExternKernelSchedulerNode(ExternKernelOut)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='permute_1'), StarDep(name='tangents_115')]
buf0.node.kernel = extern_kernels.mm


buf1: ExternKernelSchedulerNode(ExternKernelOut)
buf1.writes = [StarDep(name='buf1')]
buf1.unmet_dependencies = []
buf1.met_dependencies = [StarDep(name='tangents_115'), StarDep(name='view')]
buf1.node.kernel = extern_kernels.mm


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(1000, 8)),
        MemoryDep(name='buf2', index=c0, size=(1000,))]
buf2.unmet_dependencies = []
buf2.met_dependencies = [MemoryDep(name='tangents_115', index=c0 + 1000*c1, size=(1000, 8))]
buf2.group.device = cuda:0
buf2.group.iteration = (1000, 8)
buf2.sizes = ([1000], [8])
class buf2_loop_body:
    var_ranges = {z0: 1000, z1: 8}
    index0 = z0 + 1000*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_115', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = 
    [   MemoryDep(name='buf3', index=c0, size=(2560, 512)),
        MemoryDep(name='buf3', index=c0, size=(2560,))]
buf3.unmet_dependencies = [MemoryDep(name='buf0', index=c0 + 2560*c1, size=(2560, 8, 64))]
buf3.met_dependencies = [MemoryDep(name='le', index=64*c0 + 163840*c1 + c2, size=(2560, 8, 64))]
buf3.group.device = cuda:0
buf3.group.iteration = (2560, 512)
buf3.sizes = ([2560], [8, 64])
class buf3_loop_body:
    var_ranges = {z0: 2560, z1: 8, z2: 64}
    index0 = 64*z0 + 163840*z1 + z2
    index1 = z0 + 2560*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        constant_1 = ops.constant(64, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf3', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = 
    [   MemoryDep(name='buf4', index=c0, size=(2560, 512)),
        MemoryDep(name='buf4', index=c0, size=(2560,))]
buf4.unmet_dependencies = [MemoryDep(name='buf0', index=c0 + 2560*c1, size=(2560, 8, 64))]
buf4.met_dependencies = 
    [   MemoryDep(name='convolution_56', index=64*c0 + 163840*c1 + c2, size=(2560, 8, 64)),
        MemoryDep(name='le', index=64*c0 + 163840*c1 + c2, size=(2560, 8, 64)),
        MemoryDep(name='unsqueeze_230', index=c0, size=(2560, 512))]
buf4.group.device = cuda:0
buf4.group.iteration = (2560, 512)
buf4.sizes = ([2560], [8, 64])
class buf4_loop_body:
    var_ranges = {z0: 2560, z1: 8, z2: 64}
    index0 = 64*z0 + 163840*z1 + z2
    index1 = z0 + 2560*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        constant_1 = ops.constant(64, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_56', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('unsqueeze_230', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf4', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(2560,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(2560,))]
buf5.met_dependencies = [MemoryDep(name='squeeze_169', index=c0, size=(2560,))]
buf5.group.device = cuda:0
buf5.group.iteration = (2560, 1)
buf5.sizes = ([2560], [])
class buf5_loop_body:
    var_ranges = {z0: 2560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_169', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf5', get_index_2, mul, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(1310720,))]
buf6.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(20480, 64)),
        MemoryDep(name='buf3', index=c1, size=(8, 2560, 64)),
        MemoryDep(name='buf4', index=c1, size=(8, 2560, 64))]
buf6.met_dependencies = 
    [   MemoryDep(name='convolution_56', index=c0, size=(1310720,)),
        MemoryDep(name='le', index=c0, size=(1310720,)),
        MemoryDep(name='primals_344', index=c1, size=(8, 2560, 64)),
        MemoryDep(name='squeeze_169', index=c1, size=(8, 2560, 64)),
        MemoryDep(name='unsqueeze_230', index=c1, size=(8, 2560, 64))]
buf6.group.device = cuda:0
buf6.group.iteration = (1310720, 1)
buf6.sizes = ([8, 2560, 64], [])
class buf6_loop_body:
    var_ranges = {z0: 8, z1: 2560, z2: 64}
    index0 = 163840*z0 + 64*z1 + z2
    index1 = 2560*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        constant_1 = ops.constant(64, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_56', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('unsqueeze_230', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf4', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('squeeze_169', get_index_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('squeeze_169', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf3', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index2')
        load_8 = ops.load('squeeze_169', get_index_8)
        get_index_9 = self.get_index('index2')
        load_9 = ops.load('primals_344', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf6', get_index_10, mul_6, None)
        return store


buf7: ExternKernelSchedulerNode(FallbackKernel)
buf7.writes = [StarDep(name='buf7')]
buf7.unmet_dependencies = [StarDep(name='buf6')]
buf7.met_dependencies = [StarDep(name='primals_57'), StarDep(name='relu_51')]
buf7.node.kernel = aten.convolution_backward


buf8: ExternKernelSchedulerNode(MultiOutput)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf7')]
buf8.met_dependencies = []
buf8.node.kernel = None


buf9: ExternKernelSchedulerNode(MultiOutput)
buf9.writes = [StarDep(name='buf9')]
buf9.unmet_dependencies = [StarDep(name='buf7')]
buf9.met_dependencies = []
buf9.node.kernel = None


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = 
    [   MemoryDep(name='buf10', index=c0, size=(640, 512)),
        MemoryDep(name='buf10', index=c0, size=(640,))]
buf10.unmet_dependencies = [MemoryDep(name='buf8', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf10.met_dependencies = [MemoryDep(name='relu_51', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf10.group.device = cuda:0
buf10.group.iteration = (640, 512)
buf10.sizes = ([640], [8, 64])
class buf10_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_51', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf10', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(640, 512)),
        MemoryDep(name='buf11', index=c0, size=(640,))]
buf11.unmet_dependencies = [MemoryDep(name='buf8', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf11.met_dependencies = 
    [   MemoryDep(name='convolution_55', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_51', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_242', index=c0, size=(640, 512))]
buf11.group.device = cuda:0
buf11.group.iteration = (640, 512)
buf11.sizes = ([640], [8, 64])
class buf11_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_51', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_55', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_242', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep(name='buf12', index=c0, size=(640,))]
buf12.unmet_dependencies = [MemoryDep(name='buf11', index=c0, size=(640,))]
buf12.met_dependencies = [MemoryDep(name='squeeze_166', index=c0, size=(640,))]
buf12.group.device = cuda:0
buf12.group.iteration = (640, 1)
buf12.sizes = ([640], [])
class buf12_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_166', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf12', get_index_2, mul, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(327680,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf11', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf8', index=c0, size=(327680,))]
buf13.met_dependencies = 
    [   MemoryDep(name='convolution_55', index=c0, size=(327680,)),
        MemoryDep(name='primals_339', index=c1, size=(8, 640, 64)),
        MemoryDep(name='relu_51', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_166', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_242', index=c1, size=(8, 640, 64))]
buf13.group.device = cuda:0
buf13.group.iteration = (327680, 1)
buf13.sizes = ([8, 640, 64], [])
class buf13_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_51', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_55', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_242', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf11', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_166', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_166', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf10', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_166', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_339', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf13', get_index_10, mul_6, None)
        return store


buf14: ExternKernelSchedulerNode(FallbackKernel)
buf14.writes = [StarDep(name='buf14')]
buf14.unmet_dependencies = [StarDep(name='buf13')]
buf14.met_dependencies = [StarDep(name='primals_56'), StarDep(name='relu_50')]
buf14.node.kernel = aten.convolution_backward


buf15: ExternKernelSchedulerNode(MultiOutput)
buf15.writes = [StarDep(name='buf15')]
buf15.unmet_dependencies = [StarDep(name='buf14')]
buf15.met_dependencies = []
buf15.node.kernel = None


buf16: ExternKernelSchedulerNode(MultiOutput)
buf16.writes = [StarDep(name='buf16')]
buf16.unmet_dependencies = [StarDep(name='buf14')]
buf16.met_dependencies = []
buf16.node.kernel = None


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = 
    [   MemoryDep(name='buf17', index=c0, size=(1920, 512)),
        MemoryDep(name='buf17', index=c0, size=(1920,))]
buf17.unmet_dependencies = [MemoryDep(name='buf15', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf17.met_dependencies = [MemoryDep(name='relu_50', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf17.group.device = cuda:0
buf17.group.iteration = (1920, 512)
buf17.sizes = ([1920], [8, 64])
class buf17_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_50', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf17', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = 
    [   MemoryDep(name='buf18', index=c0, size=(1920, 512)),
        MemoryDep(name='buf18', index=c0, size=(1920,))]
buf18.unmet_dependencies = [MemoryDep(name='buf15', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf18.met_dependencies = 
    [   MemoryDep(name='convolution_54', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_50', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_254', index=c0, size=(1920, 512))]
buf18.group.device = cuda:0
buf18.group.iteration = (1920, 512)
buf18.sizes = ([1920], [8, 64])
class buf18_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_50', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_54', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_254', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf18', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep(name='buf19', index=c0, size=(1920,))]
buf19.unmet_dependencies = [MemoryDep(name='buf18', index=c0, size=(1920,))]
buf19.met_dependencies = [MemoryDep(name='squeeze_163', index=c0, size=(1920,))]
buf19.group.device = cuda:0
buf19.group.iteration = (1920, 1)
buf19.sizes = ([1920], [])
class buf19_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_163', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf19', get_index_2, mul, None)
        return store


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = [MemoryDep(name='buf20', index=c0, size=(983040,))]
buf20.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0, size=(983040,)),
        MemoryDep(name='buf17', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf18', index=c1, size=(8, 1920, 64))]
buf20.met_dependencies = 
    [   MemoryDep(name='convolution_54', index=c0, size=(983040,)),
        MemoryDep(name='primals_334', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_50', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_163', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_254', index=c1, size=(8, 1920, 64))]
buf20.group.device = cuda:0
buf20.group.iteration = (983040, 1)
buf20.sizes = ([8, 1920, 64], [])
class buf20_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_50', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_54', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_254', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf18', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_163', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_163', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf17', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_163', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_334', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf20', get_index_10, mul_6, None)
        return store


buf21: ExternKernelSchedulerNode(FallbackKernel)
buf21.writes = [StarDep(name='buf21')]
buf21.unmet_dependencies = [StarDep(name='buf20')]
buf21.met_dependencies = [StarDep(name='primals_55'), StarDep(name='relu_49')]
buf21.node.kernel = aten.convolution_backward


buf22: ExternKernelSchedulerNode(MultiOutput)
buf22.writes = [StarDep(name='buf22')]
buf22.unmet_dependencies = [StarDep(name='buf21')]
buf22.met_dependencies = []
buf22.node.kernel = None


buf23: ExternKernelSchedulerNode(MultiOutput)
buf23.writes = [StarDep(name='buf23')]
buf23.unmet_dependencies = [StarDep(name='buf21')]
buf23.met_dependencies = []
buf23.node.kernel = None


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = 
    [   MemoryDep(name='buf24', index=c0, size=(1920, 512)),
        MemoryDep(name='buf24', index=c0, size=(1920,))]
buf24.unmet_dependencies = [MemoryDep(name='buf22', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf24.met_dependencies = [MemoryDep(name='relu_49', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf24.group.device = cuda:0
buf24.group.iteration = (1920, 512)
buf24.sizes = ([1920], [8, 64])
class buf24_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_49', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf24', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = 
    [   MemoryDep(name='buf25', index=c0, size=(1920, 512)),
        MemoryDep(name='buf25', index=c0, size=(1920,))]
buf25.unmet_dependencies = [MemoryDep(name='buf22', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf25.met_dependencies = 
    [   MemoryDep(name='convolution_53', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_49', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_266', index=c0, size=(1920, 512))]
buf25.group.device = cuda:0
buf25.group.iteration = (1920, 512)
buf25.sizes = ([1920], [8, 64])
class buf25_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_49', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_53', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_266', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf25', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = [MemoryDep(name='buf26', index=c0, size=(1920,))]
buf26.unmet_dependencies = [MemoryDep(name='buf25', index=c0, size=(1920,))]
buf26.met_dependencies = [MemoryDep(name='squeeze_160', index=c0, size=(1920,))]
buf26.group.device = cuda:0
buf26.group.iteration = (1920, 1)
buf26.sizes = ([1920], [])
class buf26_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_160', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf26', get_index_2, mul, None)
        return store


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = [MemoryDep(name='buf27', index=c0, size=(983040,))]
buf27.unmet_dependencies = 
    [   MemoryDep(name='buf22', index=c0, size=(983040,)),
        MemoryDep(name='buf24', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf25', index=c1, size=(8, 1920, 64))]
buf27.met_dependencies = 
    [   MemoryDep(name='convolution_53', index=c0, size=(983040,)),
        MemoryDep(name='primals_329', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_49', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_160', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_266', index=c1, size=(8, 1920, 64))]
buf27.group.device = cuda:0
buf27.group.iteration = (983040, 1)
buf27.sizes = ([8, 1920, 64], [])
class buf27_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_49', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_53', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_266', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf25', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_160', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_160', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf24', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_160', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_329', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf27', get_index_10, mul_6, None)
        return store


buf28: ExternKernelSchedulerNode(FallbackKernel)
buf28.writes = [StarDep(name='buf28')]
buf28.unmet_dependencies = [StarDep(name='buf27')]
buf28.met_dependencies = [StarDep(name='primals_54'), StarDep(name='relu_48')]
buf28.node.kernel = aten.convolution_backward


buf29: ExternKernelSchedulerNode(MultiOutput)
buf29.writes = [StarDep(name='buf29')]
buf29.unmet_dependencies = [StarDep(name='buf28')]
buf29.met_dependencies = []
buf29.node.kernel = None


buf30: ExternKernelSchedulerNode(MultiOutput)
buf30.writes = [StarDep(name='buf30')]
buf30.unmet_dependencies = [StarDep(name='buf28')]
buf30.met_dependencies = []
buf30.node.kernel = None


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = 
    [   MemoryDep(name='buf31', index=c0, size=(640, 512)),
        MemoryDep(name='buf31', index=c0, size=(640,))]
buf31.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf8', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf31.met_dependencies = 
    [   MemoryDep(name='relu_48', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_51', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf31.group.device = cuda:0
buf31.group.iteration = (640, 512)
buf31.sizes = ([640], [8, 64])
class buf31_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_48', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_51', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        where = ops.where(le_1, constant_3, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf29', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf31', torch.float32, torch.float32, 'sum', get_index_4, where_1)
        return reduction


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = 
    [   MemoryDep(name='buf32', index=c0, size=(640, 512)),
        MemoryDep(name='buf32', index=c0, size=(640,))]
buf32.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf8', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf32.met_dependencies = 
    [   MemoryDep(name='convolution_52', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_48', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_51', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_278', index=c0, size=(640, 512))]
buf32.group.device = cuda:0
buf32.group.iteration = (640, 512)
buf32.sizes = ([640], [8, 64])
class buf32_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_48', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_51', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        where = ops.where(le_1, constant_3, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf29', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('convolution_52', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('unsqueeze_278', get_index_5)
        sub = ops.sub(load_4, load_5)
        mul = ops.mul(where_1, sub)
        get_index_6 = self.get_index('index1')
        reduction = ops.reduction('buf32', torch.float32, torch.float32, 'sum', get_index_6, mul)
        return reduction


buf33: SchedulerNode(ComputedBuffer)
buf33.writes = [MemoryDep(name='buf33', index=c0, size=(327680,))]
buf33.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(327680,)),
        MemoryDep(name='buf31', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf32', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf8', index=c0, size=(327680,))]
buf33.met_dependencies = 
    [   MemoryDep(name='convolution_52', index=c0, size=(327680,)),
        MemoryDep(name='relu_48', index=c0, size=(327680,)),
        MemoryDep(name='relu_51', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_157', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_278', index=c1, size=(8, 640, 64))]
buf33.group.device = cuda:0
buf33.group.iteration = (327680, 1)
buf33.sizes = ([8, 640, 64], [])
class buf33_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_48', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_51', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        where = ops.where(le_1, constant_3, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf29', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('convolution_52', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('unsqueeze_278', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf32', get_index_6)
        constant_4 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_6, constant_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_157', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_157', get_index_8)
        mul_1 = ops.mul(load_7, load_8)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where_1, mul_3)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf31', get_index_9)
        constant_5 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_9, constant_5)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf33', get_index_10, sub_2, None)
        return store


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = [MemoryDep(name='buf34', index=c0, size=(640,))]
buf34.unmet_dependencies = [MemoryDep(name='buf32', index=c0, size=(640,))]
buf34.met_dependencies = [MemoryDep(name='squeeze_157', index=c0, size=(640,))]
buf34.group.device = cuda:0
buf34.group.iteration = (640, 1)
buf34.sizes = ([640], [])
class buf34_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_157', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf34', get_index_2, mul, None)
        return store


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep(name='buf35', index=c0, size=(327680,))]
buf35.unmet_dependencies = [MemoryDep(name='buf33', index=c0, size=(327680,))]
buf35.met_dependencies = 
    [   MemoryDep(name='primals_324', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_157', index=c1, size=(8, 640, 64))]
buf35.group.device = cuda:0
buf35.group.iteration = (327680, 1)
buf35.sizes = ([8, 640, 64], [])
class buf35_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('squeeze_157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_324', get_index_2)
        mul = ops.mul(load_1, load_2)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf35', get_index_3, mul_1, None)
        return store


buf36: ExternKernelSchedulerNode(FallbackKernel)
buf36.writes = [StarDep(name='buf36')]
buf36.unmet_dependencies = [StarDep(name='buf35')]
buf36.met_dependencies = [StarDep(name='primals_53'), StarDep(name='relu_47')]
buf36.node.kernel = aten.convolution_backward


buf37: ExternKernelSchedulerNode(MultiOutput)
buf37.writes = [StarDep(name='buf37')]
buf37.unmet_dependencies = [StarDep(name='buf36')]
buf37.met_dependencies = []
buf37.node.kernel = None


buf38: ExternKernelSchedulerNode(MultiOutput)
buf38.writes = [StarDep(name='buf38')]
buf38.unmet_dependencies = [StarDep(name='buf36')]
buf38.met_dependencies = []
buf38.node.kernel = None


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = 
    [   MemoryDep(name='buf39', index=c0, size=(1920, 512)),
        MemoryDep(name='buf39', index=c0, size=(1920,))]
buf39.unmet_dependencies = [MemoryDep(name='buf37', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf39.met_dependencies = [MemoryDep(name='relu_47', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf39.group.device = cuda:0
buf39.group.iteration = (1920, 512)
buf39.sizes = ([1920], [8, 64])
class buf39_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf39', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = 
    [   MemoryDep(name='buf40', index=c0, size=(1920, 512)),
        MemoryDep(name='buf40', index=c0, size=(1920,))]
buf40.unmet_dependencies = [MemoryDep(name='buf37', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf40.met_dependencies = 
    [   MemoryDep(name='convolution_51', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_47', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_290', index=c0, size=(1920, 512))]
buf40.group.device = cuda:0
buf40.group.iteration = (1920, 512)
buf40.sizes = ([1920], [8, 64])
class buf40_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_51', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_290', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf40', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep(name='buf41', index=c0, size=(1920,))]
buf41.unmet_dependencies = [MemoryDep(name='buf40', index=c0, size=(1920,))]
buf41.met_dependencies = [MemoryDep(name='squeeze_154', index=c0, size=(1920,))]
buf41.group.device = cuda:0
buf41.group.iteration = (1920, 1)
buf41.sizes = ([1920], [])
class buf41_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_154', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf41', get_index_2, mul, None)
        return store


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = [MemoryDep(name='buf42', index=c0, size=(983040,))]
buf42.unmet_dependencies = 
    [   MemoryDep(name='buf37', index=c0, size=(983040,)),
        MemoryDep(name='buf39', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf40', index=c1, size=(8, 1920, 64))]
buf42.met_dependencies = 
    [   MemoryDep(name='convolution_51', index=c0, size=(983040,)),
        MemoryDep(name='primals_319', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_47', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_154', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_290', index=c1, size=(8, 1920, 64))]
buf42.group.device = cuda:0
buf42.group.iteration = (983040, 1)
buf42.sizes = ([8, 1920, 64], [])
class buf42_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_51', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_290', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf40', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_154', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_154', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf39', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_154', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_319', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf42', get_index_10, mul_6, None)
        return store


buf43: ExternKernelSchedulerNode(FallbackKernel)
buf43.writes = [StarDep(name='buf43')]
buf43.unmet_dependencies = [StarDep(name='buf42')]
buf43.met_dependencies = [StarDep(name='primals_52'), StarDep(name='relu_46')]
buf43.node.kernel = aten.convolution_backward


buf44: ExternKernelSchedulerNode(MultiOutput)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf43')]
buf44.met_dependencies = []
buf44.node.kernel = None


buf45: ExternKernelSchedulerNode(MultiOutput)
buf45.writes = [StarDep(name='buf45')]
buf45.unmet_dependencies = [StarDep(name='buf43')]
buf45.met_dependencies = []
buf45.node.kernel = None


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = 
    [   MemoryDep(name='buf46', index=c0, size=(1920, 512)),
        MemoryDep(name='buf46', index=c0, size=(1920,))]
buf46.unmet_dependencies = [MemoryDep(name='buf44', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf46.met_dependencies = [MemoryDep(name='relu_46', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf46.group.device = cuda:0
buf46.group.iteration = (1920, 512)
buf46.sizes = ([1920], [8, 64])
class buf46_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf46', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = 
    [   MemoryDep(name='buf47', index=c0, size=(1920, 512)),
        MemoryDep(name='buf47', index=c0, size=(1920,))]
buf47.unmet_dependencies = [MemoryDep(name='buf44', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf47.met_dependencies = 
    [   MemoryDep(name='convolution_50', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_46', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_302', index=c0, size=(1920, 512))]
buf47.group.device = cuda:0
buf47.group.iteration = (1920, 512)
buf47.sizes = ([1920], [8, 64])
class buf47_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_50', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_302', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf47', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = [MemoryDep(name='buf48', index=c0, size=(1920,))]
buf48.unmet_dependencies = [MemoryDep(name='buf47', index=c0, size=(1920,))]
buf48.met_dependencies = [MemoryDep(name='squeeze_151', index=c0, size=(1920,))]
buf48.group.device = cuda:0
buf48.group.iteration = (1920, 1)
buf48.sizes = ([1920], [])
class buf48_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_151', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, mul, None)
        return store


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep(name='buf49', index=c0, size=(983040,))]
buf49.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=c0, size=(983040,)),
        MemoryDep(name='buf46', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf47', index=c1, size=(8, 1920, 64))]
buf49.met_dependencies = 
    [   MemoryDep(name='convolution_50', index=c0, size=(983040,)),
        MemoryDep(name='primals_314', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_46', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_151', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_302', index=c1, size=(8, 1920, 64))]
buf49.group.device = cuda:0
buf49.group.iteration = (983040, 1)
buf49.sizes = ([8, 1920, 64], [])
class buf49_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_50', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_302', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf47', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_151', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_151', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf46', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_151', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_314', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf49', get_index_10, mul_6, None)
        return store


buf50: ExternKernelSchedulerNode(FallbackKernel)
buf50.writes = [StarDep(name='buf50')]
buf50.unmet_dependencies = [StarDep(name='buf49')]
buf50.met_dependencies = [StarDep(name='primals_51'), StarDep(name='relu_45')]
buf50.node.kernel = aten.convolution_backward


buf51: ExternKernelSchedulerNode(MultiOutput)
buf51.writes = [StarDep(name='buf51')]
buf51.unmet_dependencies = [StarDep(name='buf50')]
buf51.met_dependencies = []
buf51.node.kernel = None


buf52: ExternKernelSchedulerNode(MultiOutput)
buf52.writes = [StarDep(name='buf52')]
buf52.unmet_dependencies = [StarDep(name='buf50')]
buf52.met_dependencies = []
buf52.node.kernel = None


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep(name='buf53', index=c0, size=(327680,))]
buf53.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(327680,)),
        MemoryDep(name='buf51', index=c0, size=(327680,)),
        MemoryDep(name='buf8', index=c0, size=(327680,))]
buf53.met_dependencies = 
    [   MemoryDep(name='relu_45', index=c0, size=(327680,)),
        MemoryDep(name='relu_48', index=c0, size=(327680,)),
        MemoryDep(name='relu_51', index=c0, size=(327680,))]
buf53.group.device = cuda:0
buf53.group.iteration = (327680, 1)
buf53.sizes = ([327680], [])
class buf53_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_45', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_48', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('relu_51', get_index_2)
        constant_4 = ops.constant(0, torch.float32)
        le_2 = ops.le(load_2, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf8', get_index_3)
        where = ops.where(le_2, constant_5, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf29', get_index_4)
        add = ops.add(where, load_4)
        where_1 = ops.where(le_1, constant_3, add)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf51', get_index_5)
        add_1 = ops.add(where_1, load_5)
        where_2 = ops.where(le, constant_1, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf53', get_index_6, where_2, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = 
    [   MemoryDep(name='buf54', index=c0, size=(640, 512)),
        MemoryDep(name='buf54', index=c0, size=(640,))]
buf54.unmet_dependencies = [MemoryDep(name='buf53', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf54.met_dependencies = []
buf54.group.device = cuda:0
buf54.group.iteration = (640, 512)
buf54.sizes = ([640], [8, 64])
class buf54_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf54', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = 
    [   MemoryDep(name='buf55', index=c0, size=(640, 512)),
        MemoryDep(name='buf55', index=c0, size=(640,))]
buf55.unmet_dependencies = [MemoryDep(name='buf53', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf55.met_dependencies = 
    [   MemoryDep(name='convolution_49', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_314', index=c0, size=(640, 512))]
buf55.group.device = cuda:0
buf55.group.iteration = (640, 512)
buf55.sizes = ([640], [8, 64])
class buf55_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_314', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf55', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = [MemoryDep(name='buf56', index=c0, size=(640,))]
buf56.unmet_dependencies = [MemoryDep(name='buf55', index=c0, size=(640,))]
buf56.met_dependencies = [MemoryDep(name='squeeze_148', index=c0, size=(640,))]
buf56.group.device = cuda:0
buf56.group.iteration = (640, 1)
buf56.sizes = ([640], [])
class buf56_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_148', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, mul, None)
        return store


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = [MemoryDep(name='buf57', index=c0, size=(327680,))]
buf57.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(327680,)),
        MemoryDep(name='buf54', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf55', index=c1, size=(8, 640, 64))]
buf57.met_dependencies = 
    [   MemoryDep(name='convolution_49', index=c0, size=(327680,)),
        MemoryDep(name='primals_309', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_148', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_314', index=c1, size=(8, 640, 64))]
buf57.group.device = cuda:0
buf57.group.iteration = (327680, 1)
buf57.sizes = ([8, 640, 64], [])
class buf57_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_314', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf55', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_148', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_148', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf54', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_148', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_309', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf57', get_index_9, mul_6, None)
        return store


buf58: ExternKernelSchedulerNode(FallbackKernel)
buf58.writes = [StarDep(name='buf58')]
buf58.unmet_dependencies = [StarDep(name='buf57')]
buf58.met_dependencies = [StarDep(name='primals_50'), StarDep(name='relu_44')]
buf58.node.kernel = aten.convolution_backward


buf59: ExternKernelSchedulerNode(MultiOutput)
buf59.writes = [StarDep(name='buf59')]
buf59.unmet_dependencies = [StarDep(name='buf58')]
buf59.met_dependencies = []
buf59.node.kernel = None


buf60: ExternKernelSchedulerNode(MultiOutput)
buf60.writes = [StarDep(name='buf60')]
buf60.unmet_dependencies = [StarDep(name='buf58')]
buf60.met_dependencies = []
buf60.node.kernel = None


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = 
    [   MemoryDep(name='buf61', index=c0, size=(1920, 512)),
        MemoryDep(name='buf61', index=c0, size=(1920,))]
buf61.unmet_dependencies = [MemoryDep(name='buf59', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf61.met_dependencies = [MemoryDep(name='relu_44', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf61.group.device = cuda:0
buf61.group.iteration = (1920, 512)
buf61.sizes = ([1920], [8, 64])
class buf61_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf61', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = 
    [   MemoryDep(name='buf62', index=c0, size=(1920, 512)),
        MemoryDep(name='buf62', index=c0, size=(1920,))]
buf62.unmet_dependencies = [MemoryDep(name='buf59', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf62.met_dependencies = 
    [   MemoryDep(name='convolution_48', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_44', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_326', index=c0, size=(1920, 512))]
buf62.group.device = cuda:0
buf62.group.iteration = (1920, 512)
buf62.sizes = ([1920], [8, 64])
class buf62_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_326', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf62', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf63: SchedulerNode(ComputedBuffer)
buf63.writes = [MemoryDep(name='buf63', index=c0, size=(1920,))]
buf63.unmet_dependencies = [MemoryDep(name='buf62', index=c0, size=(1920,))]
buf63.met_dependencies = [MemoryDep(name='squeeze_145', index=c0, size=(1920,))]
buf63.group.device = cuda:0
buf63.group.iteration = (1920, 1)
buf63.sizes = ([1920], [])
class buf63_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_145', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf63', get_index_2, mul, None)
        return store


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = [MemoryDep(name='buf64', index=c0, size=(983040,))]
buf64.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0, size=(983040,)),
        MemoryDep(name='buf61', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf62', index=c1, size=(8, 1920, 64))]
buf64.met_dependencies = 
    [   MemoryDep(name='convolution_48', index=c0, size=(983040,)),
        MemoryDep(name='primals_304', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_44', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_145', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_326', index=c1, size=(8, 1920, 64))]
buf64.group.device = cuda:0
buf64.group.iteration = (983040, 1)
buf64.sizes = ([8, 1920, 64], [])
class buf64_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_326', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf62', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_145', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_145', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf61', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_145', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_304', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf64', get_index_10, mul_6, None)
        return store


buf65: ExternKernelSchedulerNode(FallbackKernel)
buf65.writes = [StarDep(name='buf65')]
buf65.unmet_dependencies = [StarDep(name='buf64')]
buf65.met_dependencies = [StarDep(name='primals_49'), StarDep(name='relu_43')]
buf65.node.kernel = aten.convolution_backward


buf66: ExternKernelSchedulerNode(MultiOutput)
buf66.writes = [StarDep(name='buf66')]
buf66.unmet_dependencies = [StarDep(name='buf65')]
buf66.met_dependencies = []
buf66.node.kernel = None


buf67: ExternKernelSchedulerNode(MultiOutput)
buf67.writes = [StarDep(name='buf67')]
buf67.unmet_dependencies = [StarDep(name='buf65')]
buf67.met_dependencies = []
buf67.node.kernel = None


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = 
    [   MemoryDep(name='buf68', index=c0, size=(1920, 512)),
        MemoryDep(name='buf68', index=c0, size=(1920,))]
buf68.unmet_dependencies = [MemoryDep(name='buf66', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf68.met_dependencies = [MemoryDep(name='relu_43', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf68.group.device = cuda:0
buf68.group.iteration = (1920, 512)
buf68.sizes = ([1920], [8, 64])
class buf68_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf68', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = 
    [   MemoryDep(name='buf69', index=c0, size=(1920, 512)),
        MemoryDep(name='buf69', index=c0, size=(1920,))]
buf69.unmet_dependencies = [MemoryDep(name='buf66', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf69.met_dependencies = 
    [   MemoryDep(name='convolution_47', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_43', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_338', index=c0, size=(1920, 512))]
buf69.group.device = cuda:0
buf69.group.iteration = (1920, 512)
buf69.sizes = ([1920], [8, 64])
class buf69_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_338', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf69', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = [MemoryDep(name='buf70', index=c0, size=(1920,))]
buf70.unmet_dependencies = [MemoryDep(name='buf69', index=c0, size=(1920,))]
buf70.met_dependencies = [MemoryDep(name='squeeze_142', index=c0, size=(1920,))]
buf70.group.device = cuda:0
buf70.group.iteration = (1920, 1)
buf70.sizes = ([1920], [])
class buf70_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_142', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf70', get_index_2, mul, None)
        return store


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = [MemoryDep(name='buf71', index=c0, size=(983040,))]
buf71.unmet_dependencies = 
    [   MemoryDep(name='buf66', index=c0, size=(983040,)),
        MemoryDep(name='buf68', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf69', index=c1, size=(8, 1920, 64))]
buf71.met_dependencies = 
    [   MemoryDep(name='convolution_47', index=c0, size=(983040,)),
        MemoryDep(name='primals_299', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_43', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_142', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_338', index=c1, size=(8, 1920, 64))]
buf71.group.device = cuda:0
buf71.group.iteration = (983040, 1)
buf71.sizes = ([8, 1920, 64], [])
class buf71_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_338', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf69', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_142', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_142', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf68', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_142', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_299', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf71', get_index_10, mul_6, None)
        return store


buf72: ExternKernelSchedulerNode(FallbackKernel)
buf72.writes = [StarDep(name='buf72')]
buf72.unmet_dependencies = [StarDep(name='buf71')]
buf72.met_dependencies = [StarDep(name='primals_48'), StarDep(name='relu_42')]
buf72.node.kernel = aten.convolution_backward


buf73: ExternKernelSchedulerNode(MultiOutput)
buf73.writes = [StarDep(name='buf73')]
buf73.unmet_dependencies = [StarDep(name='buf72')]
buf73.met_dependencies = []
buf73.node.kernel = None


buf74: ExternKernelSchedulerNode(MultiOutput)
buf74.writes = [StarDep(name='buf74')]
buf74.unmet_dependencies = [StarDep(name='buf72')]
buf74.met_dependencies = []
buf74.node.kernel = None


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = 
    [   MemoryDep(name='buf75', index=c0, size=(640, 512)),
        MemoryDep(name='buf75', index=c0, size=(640,))]
buf75.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf73', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf75.met_dependencies = [MemoryDep(name='relu_42', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf75.group.device = cuda:0
buf75.group.iteration = (640, 512)
buf75.sizes = ([640], [8, 64])
class buf75_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_42', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf75', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = 
    [   MemoryDep(name='buf76', index=c0, size=(640, 512)),
        MemoryDep(name='buf76', index=c0, size=(640,))]
buf76.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf73', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf76.met_dependencies = 
    [   MemoryDep(name='convolution_46', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_42', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_350', index=c0, size=(640, 512))]
buf76.group.device = cuda:0
buf76.group.iteration = (640, 512)
buf76.sizes = ([640], [8, 64])
class buf76_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_42', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_350', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf76', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(327680,))]
buf77.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(327680,)),
        MemoryDep(name='buf73', index=c0, size=(327680,)),
        MemoryDep(name='buf75', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf76', index=c1, size=(8, 640, 64))]
buf77.met_dependencies = 
    [   MemoryDep(name='convolution_46', index=c0, size=(327680,)),
        MemoryDep(name='primals_294', index=c1, size=(8, 640, 64)),
        MemoryDep(name='relu_42', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_139', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_350', index=c1, size=(8, 640, 64))]
buf77.group.device = cuda:0
buf77.group.iteration = (327680, 1)
buf77.sizes = ([8, 640, 64], [])
class buf77_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_42', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_350', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf76', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_139', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_139', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf75', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_139', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_294', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf77', get_index_11, mul_6, None)
        return store


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = [MemoryDep(name='buf78', index=c0, size=(640,))]
buf78.unmet_dependencies = [MemoryDep(name='buf76', index=c0, size=(640,))]
buf78.met_dependencies = [MemoryDep(name='squeeze_139', index=c0, size=(640,))]
buf78.group.device = cuda:0
buf78.group.iteration = (640, 1)
buf78.sizes = ([640], [])
class buf78_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_139', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, mul, None)
        return store


buf79: ExternKernelSchedulerNode(FallbackKernel)
buf79.writes = [StarDep(name='buf79')]
buf79.unmet_dependencies = [StarDep(name='buf77')]
buf79.met_dependencies = [StarDep(name='primals_47'), StarDep(name='relu_41')]
buf79.node.kernel = aten.convolution_backward


buf80: ExternKernelSchedulerNode(MultiOutput)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf79')]
buf80.met_dependencies = []
buf80.node.kernel = None


buf81: ExternKernelSchedulerNode(MultiOutput)
buf81.writes = [StarDep(name='buf81')]
buf81.unmet_dependencies = [StarDep(name='buf79')]
buf81.met_dependencies = []
buf81.node.kernel = None


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = 
    [   MemoryDep(name='buf82', index=c0, size=(1920, 512)),
        MemoryDep(name='buf82', index=c0, size=(1920,))]
buf82.unmet_dependencies = [MemoryDep(name='buf80', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf82.met_dependencies = [MemoryDep(name='relu_41', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf82.group.device = cuda:0
buf82.group.iteration = (1920, 512)
buf82.sizes = ([1920], [8, 64])
class buf82_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf82', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = 
    [   MemoryDep(name='buf83', index=c0, size=(1920, 512)),
        MemoryDep(name='buf83', index=c0, size=(1920,))]
buf83.unmet_dependencies = [MemoryDep(name='buf80', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf83.met_dependencies = 
    [   MemoryDep(name='convolution_45', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_41', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_362', index=c0, size=(1920, 512))]
buf83.group.device = cuda:0
buf83.group.iteration = (1920, 512)
buf83.sizes = ([1920], [8, 64])
class buf83_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_45', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_362', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf83', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = [MemoryDep(name='buf84', index=c0, size=(1920,))]
buf84.unmet_dependencies = [MemoryDep(name='buf83', index=c0, size=(1920,))]
buf84.met_dependencies = [MemoryDep(name='squeeze_136', index=c0, size=(1920,))]
buf84.group.device = cuda:0
buf84.group.iteration = (1920, 1)
buf84.sizes = ([1920], [])
class buf84_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_136', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, mul, None)
        return store


buf85: SchedulerNode(ComputedBuffer)
buf85.writes = [MemoryDep(name='buf85', index=c0, size=(983040,))]
buf85.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=c0, size=(983040,)),
        MemoryDep(name='buf82', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf83', index=c1, size=(8, 1920, 64))]
buf85.met_dependencies = 
    [   MemoryDep(name='convolution_45', index=c0, size=(983040,)),
        MemoryDep(name='primals_289', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_41', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_136', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_362', index=c1, size=(8, 1920, 64))]
buf85.group.device = cuda:0
buf85.group.iteration = (983040, 1)
buf85.sizes = ([8, 1920, 64], [])
class buf85_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_45', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_362', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf83', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_136', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_136', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf82', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_136', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_289', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf85', get_index_10, mul_6, None)
        return store


buf86: ExternKernelSchedulerNode(FallbackKernel)
buf86.writes = [StarDep(name='buf86')]
buf86.unmet_dependencies = [StarDep(name='buf85')]
buf86.met_dependencies = [StarDep(name='primals_46'), StarDep(name='relu_40')]
buf86.node.kernel = aten.convolution_backward


buf87: ExternKernelSchedulerNode(MultiOutput)
buf87.writes = [StarDep(name='buf87')]
buf87.unmet_dependencies = [StarDep(name='buf86')]
buf87.met_dependencies = []
buf87.node.kernel = None


buf88: ExternKernelSchedulerNode(MultiOutput)
buf88.writes = [StarDep(name='buf88')]
buf88.unmet_dependencies = [StarDep(name='buf86')]
buf88.met_dependencies = []
buf88.node.kernel = None


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(1920, 512)),
        MemoryDep(name='buf89', index=c0, size=(1920,))]
buf89.unmet_dependencies = [MemoryDep(name='buf87', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf89.met_dependencies = [MemoryDep(name='relu_40', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf89.group.device = cuda:0
buf89.group.iteration = (1920, 512)
buf89.sizes = ([1920], [8, 64])
class buf89_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = 
    [   MemoryDep(name='buf90', index=c0, size=(1920, 512)),
        MemoryDep(name='buf90', index=c0, size=(1920,))]
buf90.unmet_dependencies = [MemoryDep(name='buf87', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf90.met_dependencies = 
    [   MemoryDep(name='convolution_44', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_40', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_374', index=c0, size=(1920, 512))]
buf90.group.device = cuda:0
buf90.group.iteration = (1920, 512)
buf90.sizes = ([1920], [8, 64])
class buf90_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_374', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf90', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep(name='buf91', index=c0, size=(1920,))]
buf91.unmet_dependencies = [MemoryDep(name='buf90', index=c0, size=(1920,))]
buf91.met_dependencies = [MemoryDep(name='squeeze_133', index=c0, size=(1920,))]
buf91.group.device = cuda:0
buf91.group.iteration = (1920, 1)
buf91.sizes = ([1920], [])
class buf91_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_133', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf91', get_index_2, mul, None)
        return store


buf92: SchedulerNode(ComputedBuffer)
buf92.writes = [MemoryDep(name='buf92', index=c0, size=(983040,))]
buf92.unmet_dependencies = 
    [   MemoryDep(name='buf87', index=c0, size=(983040,)),
        MemoryDep(name='buf89', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf90', index=c1, size=(8, 1920, 64))]
buf92.met_dependencies = 
    [   MemoryDep(name='convolution_44', index=c0, size=(983040,)),
        MemoryDep(name='primals_284', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_40', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_133', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_374', index=c1, size=(8, 1920, 64))]
buf92.group.device = cuda:0
buf92.group.iteration = (983040, 1)
buf92.sizes = ([8, 1920, 64], [])
class buf92_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_374', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf90', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_133', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_133', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf89', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_133', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_284', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf92', get_index_10, mul_6, None)
        return store


buf93: ExternKernelSchedulerNode(FallbackKernel)
buf93.writes = [StarDep(name='buf93')]
buf93.unmet_dependencies = [StarDep(name='buf92')]
buf93.met_dependencies = [StarDep(name='primals_45'), StarDep(name='relu_39')]
buf93.node.kernel = aten.convolution_backward


buf94: ExternKernelSchedulerNode(MultiOutput)
buf94.writes = [StarDep(name='buf94')]
buf94.unmet_dependencies = [StarDep(name='buf93')]
buf94.met_dependencies = []
buf94.node.kernel = None


buf95: ExternKernelSchedulerNode(MultiOutput)
buf95.writes = [StarDep(name='buf95')]
buf95.unmet_dependencies = [StarDep(name='buf93')]
buf95.met_dependencies = []
buf95.node.kernel = None


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = [MemoryDep(name='buf96', index=c0, size=(327680,))]
buf96.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(327680,)),
        MemoryDep(name='buf73', index=c0, size=(327680,)),
        MemoryDep(name='buf94', index=c0, size=(327680,))]
buf96.met_dependencies = 
    [   MemoryDep(name='relu_39', index=c0, size=(327680,)),
        MemoryDep(name='relu_42', index=c0, size=(327680,))]
buf96.group.device = cuda:0
buf96.group.iteration = (327680, 1)
buf96.sizes = ([327680], [])
class buf96_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_39', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_42', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf73', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf94', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, where_1, None)
        return store


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = 
    [   MemoryDep(name='buf97', index=c0, size=(640, 512)),
        MemoryDep(name='buf97', index=c0, size=(640,))]
buf97.unmet_dependencies = [MemoryDep(name='buf96', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf97.met_dependencies = []
buf97.group.device = cuda:0
buf97.group.iteration = (640, 512)
buf97.sizes = ([640], [8, 64])
class buf97_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf97', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf98: SchedulerNode(ComputedBuffer)
buf98.writes = 
    [   MemoryDep(name='buf98', index=c0, size=(640, 512)),
        MemoryDep(name='buf98', index=c0, size=(640,))]
buf98.unmet_dependencies = [MemoryDep(name='buf96', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf98.met_dependencies = 
    [   MemoryDep(name='convolution_43', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_386', index=c0, size=(640, 512))]
buf98.group.device = cuda:0
buf98.group.iteration = (640, 512)
buf98.sizes = ([640], [8, 64])
class buf98_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_386', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf98', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = [MemoryDep(name='buf99', index=c0, size=(640,))]
buf99.unmet_dependencies = [MemoryDep(name='buf98', index=c0, size=(640,))]
buf99.met_dependencies = [MemoryDep(name='squeeze_130', index=c0, size=(640,))]
buf99.group.device = cuda:0
buf99.group.iteration = (640, 1)
buf99.sizes = ([640], [])
class buf99_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_130', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf99', get_index_2, mul, None)
        return store


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = [MemoryDep(name='buf100', index=c0, size=(327680,))]
buf100.unmet_dependencies = 
    [   MemoryDep(name='buf96', index=c0, size=(327680,)),
        MemoryDep(name='buf97', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf98', index=c1, size=(8, 640, 64))]
buf100.met_dependencies = 
    [   MemoryDep(name='convolution_43', index=c0, size=(327680,)),
        MemoryDep(name='primals_279', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_130', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_386', index=c1, size=(8, 640, 64))]
buf100.group.device = cuda:0
buf100.group.iteration = (327680, 1)
buf100.sizes = ([8, 640, 64], [])
class buf100_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_386', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf98', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_130', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_130', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf97', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_130', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_279', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf100', get_index_9, mul_6, None)
        return store


buf101: ExternKernelSchedulerNode(FallbackKernel)
buf101.writes = [StarDep(name='buf101')]
buf101.unmet_dependencies = [StarDep(name='buf100')]
buf101.met_dependencies = [StarDep(name='primals_44'), StarDep(name='relu_38')]
buf101.node.kernel = aten.convolution_backward


buf102: ExternKernelSchedulerNode(MultiOutput)
buf102.writes = [StarDep(name='buf102')]
buf102.unmet_dependencies = [StarDep(name='buf101')]
buf102.met_dependencies = []
buf102.node.kernel = None


buf103: ExternKernelSchedulerNode(MultiOutput)
buf103.writes = [StarDep(name='buf103')]
buf103.unmet_dependencies = [StarDep(name='buf101')]
buf103.met_dependencies = []
buf103.node.kernel = None


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = 
    [   MemoryDep(name='buf104', index=c0, size=(1920, 512)),
        MemoryDep(name='buf104', index=c0, size=(1920,))]
buf104.unmet_dependencies = [MemoryDep(name='buf102', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf104.met_dependencies = [MemoryDep(name='relu_38', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf104.group.device = cuda:0
buf104.group.iteration = (1920, 512)
buf104.sizes = ([1920], [8, 64])
class buf104_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf104', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = 
    [   MemoryDep(name='buf105', index=c0, size=(1920, 512)),
        MemoryDep(name='buf105', index=c0, size=(1920,))]
buf105.unmet_dependencies = [MemoryDep(name='buf102', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf105.met_dependencies = 
    [   MemoryDep(name='convolution_42', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_38', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_398', index=c0, size=(1920, 512))]
buf105.group.device = cuda:0
buf105.group.iteration = (1920, 512)
buf105.sizes = ([1920], [8, 64])
class buf105_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_42', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_398', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf105', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf106: SchedulerNode(ComputedBuffer)
buf106.writes = [MemoryDep(name='buf106', index=c0, size=(1920,))]
buf106.unmet_dependencies = [MemoryDep(name='buf105', index=c0, size=(1920,))]
buf106.met_dependencies = [MemoryDep(name='squeeze_127', index=c0, size=(1920,))]
buf106.group.device = cuda:0
buf106.group.iteration = (1920, 1)
buf106.sizes = ([1920], [])
class buf106_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_127', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf106', get_index_2, mul, None)
        return store


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = [MemoryDep(name='buf107', index=c0, size=(983040,))]
buf107.unmet_dependencies = 
    [   MemoryDep(name='buf102', index=c0, size=(983040,)),
        MemoryDep(name='buf104', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf105', index=c1, size=(8, 1920, 64))]
buf107.met_dependencies = 
    [   MemoryDep(name='convolution_42', index=c0, size=(983040,)),
        MemoryDep(name='primals_274', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_38', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_127', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_398', index=c1, size=(8, 1920, 64))]
buf107.group.device = cuda:0
buf107.group.iteration = (983040, 1)
buf107.sizes = ([8, 1920, 64], [])
class buf107_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_42', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_398', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf105', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_127', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_127', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf104', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_127', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_274', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf107', get_index_10, mul_6, None)
        return store


buf108: ExternKernelSchedulerNode(FallbackKernel)
buf108.writes = [StarDep(name='buf108')]
buf108.unmet_dependencies = [StarDep(name='buf107')]
buf108.met_dependencies = [StarDep(name='primals_43'), StarDep(name='relu_37')]
buf108.node.kernel = aten.convolution_backward


buf109: ExternKernelSchedulerNode(MultiOutput)
buf109.writes = [StarDep(name='buf109')]
buf109.unmet_dependencies = [StarDep(name='buf108')]
buf109.met_dependencies = []
buf109.node.kernel = None


buf110: ExternKernelSchedulerNode(MultiOutput)
buf110.writes = [StarDep(name='buf110')]
buf110.unmet_dependencies = [StarDep(name='buf108')]
buf110.met_dependencies = []
buf110.node.kernel = None


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = 
    [   MemoryDep(name='buf111', index=c0, size=(1920, 512)),
        MemoryDep(name='buf111', index=c0, size=(1920,))]
buf111.unmet_dependencies = [MemoryDep(name='buf109', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf111.met_dependencies = [MemoryDep(name='relu_37', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf111.group.device = cuda:0
buf111.group.iteration = (1920, 512)
buf111.sizes = ([1920], [8, 64])
class buf111_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf111', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = 
    [   MemoryDep(name='buf112', index=c0, size=(1920, 512)),
        MemoryDep(name='buf112', index=c0, size=(1920,))]
buf112.unmet_dependencies = [MemoryDep(name='buf109', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf112.met_dependencies = 
    [   MemoryDep(name='convolution_41', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_37', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_410', index=c0, size=(1920, 512))]
buf112.group.device = cuda:0
buf112.group.iteration = (1920, 512)
buf112.sizes = ([1920], [8, 64])
class buf112_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_410', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf112', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = [MemoryDep(name='buf113', index=c0, size=(1920,))]
buf113.unmet_dependencies = [MemoryDep(name='buf112', index=c0, size=(1920,))]
buf113.met_dependencies = [MemoryDep(name='squeeze_124', index=c0, size=(1920,))]
buf113.group.device = cuda:0
buf113.group.iteration = (1920, 1)
buf113.sizes = ([1920], [])
class buf113_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_124', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf113', get_index_2, mul, None)
        return store


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = [MemoryDep(name='buf114', index=c0, size=(983040,))]
buf114.unmet_dependencies = 
    [   MemoryDep(name='buf109', index=c0, size=(983040,)),
        MemoryDep(name='buf111', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf112', index=c1, size=(8, 1920, 64))]
buf114.met_dependencies = 
    [   MemoryDep(name='convolution_41', index=c0, size=(983040,)),
        MemoryDep(name='primals_269', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_37', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_124', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_410', index=c1, size=(8, 1920, 64))]
buf114.group.device = cuda:0
buf114.group.iteration = (983040, 1)
buf114.sizes = ([8, 1920, 64], [])
class buf114_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_410', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf112', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_124', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_124', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf111', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_124', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_269', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf114', get_index_10, mul_6, None)
        return store


buf115: ExternKernelSchedulerNode(FallbackKernel)
buf115.writes = [StarDep(name='buf115')]
buf115.unmet_dependencies = [StarDep(name='buf114')]
buf115.met_dependencies = [StarDep(name='primals_42'), StarDep(name='relu_36')]
buf115.node.kernel = aten.convolution_backward


buf116: ExternKernelSchedulerNode(MultiOutput)
buf116.writes = [StarDep(name='buf116')]
buf116.unmet_dependencies = [StarDep(name='buf115')]
buf116.met_dependencies = []
buf116.node.kernel = None


buf117: ExternKernelSchedulerNode(MultiOutput)
buf117.writes = [StarDep(name='buf117')]
buf117.unmet_dependencies = [StarDep(name='buf115')]
buf117.met_dependencies = []
buf117.node.kernel = None


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = 
    [   MemoryDep(name='buf118', index=c0, size=(640, 512)),
        MemoryDep(name='buf118', index=c0, size=(640,))]
buf118.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf96', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf118.met_dependencies = [MemoryDep(name='relu_36', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf118.group.device = cuda:0
buf118.group.iteration = (640, 512)
buf118.sizes = ([640], [8, 64])
class buf118_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_36', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf118', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = 
    [   MemoryDep(name='buf119', index=c0, size=(640, 512)),
        MemoryDep(name='buf119', index=c0, size=(640,))]
buf119.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf96', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf119.met_dependencies = 
    [   MemoryDep(name='convolution_40', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_36', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_422', index=c0, size=(640, 512))]
buf119.group.device = cuda:0
buf119.group.iteration = (640, 512)
buf119.sizes = ([640], [8, 64])
class buf119_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_36', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_40', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_422', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf119', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf120: SchedulerNode(ComputedBuffer)
buf120.writes = [MemoryDep(name='buf120', index=c0, size=(327680,))]
buf120.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(327680,)),
        MemoryDep(name='buf118', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf119', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf96', index=c0, size=(327680,))]
buf120.met_dependencies = 
    [   MemoryDep(name='convolution_40', index=c0, size=(327680,)),
        MemoryDep(name='primals_264', index=c1, size=(8, 640, 64)),
        MemoryDep(name='relu_36', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_121', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_422', index=c1, size=(8, 640, 64))]
buf120.group.device = cuda:0
buf120.group.iteration = (327680, 1)
buf120.sizes = ([8, 640, 64], [])
class buf120_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_36', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_40', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_422', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf119', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_121', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_121', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf118', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_121', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_264', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf120', get_index_11, mul_6, None)
        return store


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep(name='buf121', index=c0, size=(640,))]
buf121.unmet_dependencies = [MemoryDep(name='buf119', index=c0, size=(640,))]
buf121.met_dependencies = [MemoryDep(name='squeeze_121', index=c0, size=(640,))]
buf121.group.device = cuda:0
buf121.group.iteration = (640, 1)
buf121.sizes = ([640], [])
class buf121_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_121', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf121', get_index_2, mul, None)
        return store


buf122: ExternKernelSchedulerNode(FallbackKernel)
buf122.writes = [StarDep(name='buf122')]
buf122.unmet_dependencies = [StarDep(name='buf120')]
buf122.met_dependencies = [StarDep(name='primals_41'), StarDep(name='relu_35')]
buf122.node.kernel = aten.convolution_backward


buf123: ExternKernelSchedulerNode(MultiOutput)
buf123.writes = [StarDep(name='buf123')]
buf123.unmet_dependencies = [StarDep(name='buf122')]
buf123.met_dependencies = []
buf123.node.kernel = None


buf124: ExternKernelSchedulerNode(MultiOutput)
buf124.writes = [StarDep(name='buf124')]
buf124.unmet_dependencies = [StarDep(name='buf122')]
buf124.met_dependencies = []
buf124.node.kernel = None


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = 
    [   MemoryDep(name='buf125', index=c0, size=(1920, 512)),
        MemoryDep(name='buf125', index=c0, size=(1920,))]
buf125.unmet_dependencies = [MemoryDep(name='buf123', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf125.met_dependencies = [MemoryDep(name='relu_35', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf125.group.device = cuda:0
buf125.group.iteration = (1920, 512)
buf125.sizes = ([1920], [8, 64])
class buf125_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf123', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf125', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = 
    [   MemoryDep(name='buf126', index=c0, size=(1920, 512)),
        MemoryDep(name='buf126', index=c0, size=(1920,))]
buf126.unmet_dependencies = [MemoryDep(name='buf123', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf126.met_dependencies = 
    [   MemoryDep(name='convolution_39', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_35', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_434', index=c0, size=(1920, 512))]
buf126.group.device = cuda:0
buf126.group.iteration = (1920, 512)
buf126.sizes = ([1920], [8, 64])
class buf126_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf123', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_39', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_434', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf126', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(1920,))]
buf127.unmet_dependencies = [MemoryDep(name='buf126', index=c0, size=(1920,))]
buf127.met_dependencies = [MemoryDep(name='squeeze_118', index=c0, size=(1920,))]
buf127.group.device = cuda:0
buf127.group.iteration = (1920, 1)
buf127.sizes = ([1920], [])
class buf127_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_118', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, mul, None)
        return store


buf128: SchedulerNode(ComputedBuffer)
buf128.writes = [MemoryDep(name='buf128', index=c0, size=(983040,))]
buf128.unmet_dependencies = 
    [   MemoryDep(name='buf123', index=c0, size=(983040,)),
        MemoryDep(name='buf125', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf126', index=c1, size=(8, 1920, 64))]
buf128.met_dependencies = 
    [   MemoryDep(name='convolution_39', index=c0, size=(983040,)),
        MemoryDep(name='primals_259', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_35', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_118', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_434', index=c1, size=(8, 1920, 64))]
buf128.group.device = cuda:0
buf128.group.iteration = (983040, 1)
buf128.sizes = ([8, 1920, 64], [])
class buf128_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf123', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_39', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_434', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf126', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_118', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_118', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf125', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_118', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_259', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf128', get_index_10, mul_6, None)
        return store


buf129: ExternKernelSchedulerNode(FallbackKernel)
buf129.writes = [StarDep(name='buf129')]
buf129.unmet_dependencies = [StarDep(name='buf128')]
buf129.met_dependencies = [StarDep(name='primals_40'), StarDep(name='relu_34')]
buf129.node.kernel = aten.convolution_backward


buf130: ExternKernelSchedulerNode(MultiOutput)
buf130.writes = [StarDep(name='buf130')]
buf130.unmet_dependencies = [StarDep(name='buf129')]
buf130.met_dependencies = []
buf130.node.kernel = None


buf131: ExternKernelSchedulerNode(MultiOutput)
buf131.writes = [StarDep(name='buf131')]
buf131.unmet_dependencies = [StarDep(name='buf129')]
buf131.met_dependencies = []
buf131.node.kernel = None


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = 
    [   MemoryDep(name='buf132', index=c0, size=(1920, 512)),
        MemoryDep(name='buf132', index=c0, size=(1920,))]
buf132.unmet_dependencies = [MemoryDep(name='buf130', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf132.met_dependencies = [MemoryDep(name='relu_34', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf132.group.device = cuda:0
buf132.group.iteration = (1920, 512)
buf132.sizes = ([1920], [8, 64])
class buf132_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf132', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = 
    [   MemoryDep(name='buf133', index=c0, size=(1920, 512)),
        MemoryDep(name='buf133', index=c0, size=(1920,))]
buf133.unmet_dependencies = [MemoryDep(name='buf130', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf133.met_dependencies = 
    [   MemoryDep(name='convolution_38', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_34', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_446', index=c0, size=(1920, 512))]
buf133.group.device = cuda:0
buf133.group.iteration = (1920, 512)
buf133.sizes = ([1920], [8, 64])
class buf133_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_446', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf133', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = [MemoryDep(name='buf134', index=c0, size=(1920,))]
buf134.unmet_dependencies = [MemoryDep(name='buf133', index=c0, size=(1920,))]
buf134.met_dependencies = [MemoryDep(name='squeeze_115', index=c0, size=(1920,))]
buf134.group.device = cuda:0
buf134.group.iteration = (1920, 1)
buf134.sizes = ([1920], [])
class buf134_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_115', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf134', get_index_2, mul, None)
        return store


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(983040,))]
buf135.unmet_dependencies = 
    [   MemoryDep(name='buf130', index=c0, size=(983040,)),
        MemoryDep(name='buf132', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf133', index=c1, size=(8, 1920, 64))]
buf135.met_dependencies = 
    [   MemoryDep(name='convolution_38', index=c0, size=(983040,)),
        MemoryDep(name='primals_254', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_34', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_115', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_446', index=c1, size=(8, 1920, 64))]
buf135.group.device = cuda:0
buf135.group.iteration = (983040, 1)
buf135.sizes = ([8, 1920, 64], [])
class buf135_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_446', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf133', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_115', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_115', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf132', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_115', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_254', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf135', get_index_10, mul_6, None)
        return store


buf136: ExternKernelSchedulerNode(FallbackKernel)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf135')]
buf136.met_dependencies = [StarDep(name='primals_39'), StarDep(name='relu_33')]
buf136.node.kernel = aten.convolution_backward


buf137: ExternKernelSchedulerNode(MultiOutput)
buf137.writes = [StarDep(name='buf137')]
buf137.unmet_dependencies = [StarDep(name='buf136')]
buf137.met_dependencies = []
buf137.node.kernel = None


buf138: ExternKernelSchedulerNode(MultiOutput)
buf138.writes = [StarDep(name='buf138')]
buf138.unmet_dependencies = [StarDep(name='buf136')]
buf138.met_dependencies = []
buf138.node.kernel = None


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep(name='buf139', index=c0, size=(327680,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(327680,)),
        MemoryDep(name='buf137', index=c0, size=(327680,)),
        MemoryDep(name='buf96', index=c0, size=(327680,))]
buf139.met_dependencies = 
    [   MemoryDep(name='relu_33', index=c0, size=(327680,)),
        MemoryDep(name='relu_36', index=c0, size=(327680,))]
buf139.group.device = cuda:0
buf139.group.iteration = (327680, 1)
buf139.sizes = ([327680], [])
class buf139_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_33', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_36', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf116', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf137', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, where_1, None)
        return store


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = 
    [   MemoryDep(name='buf140', index=c0, size=(640, 512)),
        MemoryDep(name='buf140', index=c0, size=(640,))]
buf140.unmet_dependencies = [MemoryDep(name='buf139', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf140.met_dependencies = []
buf140.group.device = cuda:0
buf140.group.iteration = (640, 512)
buf140.sizes = ([640], [8, 64])
class buf140_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf140', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf141: SchedulerNode(ComputedBuffer)
buf141.writes = 
    [   MemoryDep(name='buf141', index=c0, size=(640, 512)),
        MemoryDep(name='buf141', index=c0, size=(640,))]
buf141.unmet_dependencies = [MemoryDep(name='buf139', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf141.met_dependencies = 
    [   MemoryDep(name='convolution_37', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_458', index=c0, size=(640, 512))]
buf141.group.device = cuda:0
buf141.group.iteration = (640, 512)
buf141.sizes = ([640], [8, 64])
class buf141_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_37', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_458', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf141', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = [MemoryDep(name='buf142', index=c0, size=(640,))]
buf142.unmet_dependencies = [MemoryDep(name='buf141', index=c0, size=(640,))]
buf142.met_dependencies = [MemoryDep(name='squeeze_112', index=c0, size=(640,))]
buf142.group.device = cuda:0
buf142.group.iteration = (640, 1)
buf142.sizes = ([640], [])
class buf142_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_112', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf142', get_index_2, mul, None)
        return store


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = [MemoryDep(name='buf143', index=c0, size=(327680,))]
buf143.unmet_dependencies = 
    [   MemoryDep(name='buf139', index=c0, size=(327680,)),
        MemoryDep(name='buf140', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf141', index=c1, size=(8, 640, 64))]
buf143.met_dependencies = 
    [   MemoryDep(name='convolution_37', index=c0, size=(327680,)),
        MemoryDep(name='primals_249', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_112', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_458', index=c1, size=(8, 640, 64))]
buf143.group.device = cuda:0
buf143.group.iteration = (327680, 1)
buf143.sizes = ([8, 640, 64], [])
class buf143_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_37', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_458', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf141', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_112', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_112', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf140', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_112', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_249', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf143', get_index_9, mul_6, None)
        return store


buf144: ExternKernelSchedulerNode(FallbackKernel)
buf144.writes = [StarDep(name='buf144')]
buf144.unmet_dependencies = [StarDep(name='buf143')]
buf144.met_dependencies = [StarDep(name='primals_38'), StarDep(name='relu_32')]
buf144.node.kernel = aten.convolution_backward


buf145: ExternKernelSchedulerNode(MultiOutput)
buf145.writes = [StarDep(name='buf145')]
buf145.unmet_dependencies = [StarDep(name='buf144')]
buf145.met_dependencies = []
buf145.node.kernel = None


buf146: ExternKernelSchedulerNode(MultiOutput)
buf146.writes = [StarDep(name='buf146')]
buf146.unmet_dependencies = [StarDep(name='buf144')]
buf146.met_dependencies = []
buf146.node.kernel = None


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = 
    [   MemoryDep(name='buf147', index=c0, size=(1920, 512)),
        MemoryDep(name='buf147', index=c0, size=(1920,))]
buf147.unmet_dependencies = [MemoryDep(name='buf145', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf147.met_dependencies = [MemoryDep(name='relu_32', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf147.group.device = cuda:0
buf147.group.iteration = (1920, 512)
buf147.sizes = ([1920], [8, 64])
class buf147_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf147', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(1920, 512)),
        MemoryDep(name='buf148', index=c0, size=(1920,))]
buf148.unmet_dependencies = [MemoryDep(name='buf145', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf148.met_dependencies = 
    [   MemoryDep(name='convolution_36', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_32', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_470', index=c0, size=(1920, 512))]
buf148.group.device = cuda:0
buf148.group.iteration = (1920, 512)
buf148.sizes = ([1920], [8, 64])
class buf148_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_470', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = [MemoryDep(name='buf149', index=c0, size=(1920,))]
buf149.unmet_dependencies = [MemoryDep(name='buf148', index=c0, size=(1920,))]
buf149.met_dependencies = [MemoryDep(name='squeeze_109', index=c0, size=(1920,))]
buf149.group.device = cuda:0
buf149.group.iteration = (1920, 1)
buf149.sizes = ([1920], [])
class buf149_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_109', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf149', get_index_2, mul, None)
        return store


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = [MemoryDep(name='buf150', index=c0, size=(983040,))]
buf150.unmet_dependencies = 
    [   MemoryDep(name='buf145', index=c0, size=(983040,)),
        MemoryDep(name='buf147', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf148', index=c1, size=(8, 1920, 64))]
buf150.met_dependencies = 
    [   MemoryDep(name='convolution_36', index=c0, size=(983040,)),
        MemoryDep(name='primals_244', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_32', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_109', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_470', index=c1, size=(8, 1920, 64))]
buf150.group.device = cuda:0
buf150.group.iteration = (983040, 1)
buf150.sizes = ([8, 1920, 64], [])
class buf150_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_470', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf148', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_109', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_109', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf147', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_109', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_244', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf150', get_index_10, mul_6, None)
        return store


buf151: ExternKernelSchedulerNode(FallbackKernel)
buf151.writes = [StarDep(name='buf151')]
buf151.unmet_dependencies = [StarDep(name='buf150')]
buf151.met_dependencies = [StarDep(name='primals_37'), StarDep(name='relu_31')]
buf151.node.kernel = aten.convolution_backward


buf152: ExternKernelSchedulerNode(MultiOutput)
buf152.writes = [StarDep(name='buf152')]
buf152.unmet_dependencies = [StarDep(name='buf151')]
buf152.met_dependencies = []
buf152.node.kernel = None


buf153: ExternKernelSchedulerNode(MultiOutput)
buf153.writes = [StarDep(name='buf153')]
buf153.unmet_dependencies = [StarDep(name='buf151')]
buf153.met_dependencies = []
buf153.node.kernel = None


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = 
    [   MemoryDep(name='buf154', index=c0, size=(1920, 512)),
        MemoryDep(name='buf154', index=c0, size=(1920,))]
buf154.unmet_dependencies = [MemoryDep(name='buf152', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf154.met_dependencies = [MemoryDep(name='relu_31', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf154.group.device = cuda:0
buf154.group.iteration = (1920, 512)
buf154.sizes = ([1920], [8, 64])
class buf154_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf154', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = 
    [   MemoryDep(name='buf155', index=c0, size=(1920, 512)),
        MemoryDep(name='buf155', index=c0, size=(1920,))]
buf155.unmet_dependencies = [MemoryDep(name='buf152', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf155.met_dependencies = 
    [   MemoryDep(name='convolution_35', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_31', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_482', index=c0, size=(1920, 512))]
buf155.group.device = cuda:0
buf155.group.iteration = (1920, 512)
buf155.sizes = ([1920], [8, 64])
class buf155_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_482', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf155', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = [MemoryDep(name='buf156', index=c0, size=(1920,))]
buf156.unmet_dependencies = [MemoryDep(name='buf155', index=c0, size=(1920,))]
buf156.met_dependencies = [MemoryDep(name='squeeze_106', index=c0, size=(1920,))]
buf156.group.device = cuda:0
buf156.group.iteration = (1920, 1)
buf156.sizes = ([1920], [])
class buf156_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_106', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf156', get_index_2, mul, None)
        return store


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(983040,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=c0, size=(983040,)),
        MemoryDep(name='buf154', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf155', index=c1, size=(8, 1920, 64))]
buf157.met_dependencies = 
    [   MemoryDep(name='convolution_35', index=c0, size=(983040,)),
        MemoryDep(name='primals_239', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_31', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_106', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_482', index=c1, size=(8, 1920, 64))]
buf157.group.device = cuda:0
buf157.group.iteration = (983040, 1)
buf157.sizes = ([8, 1920, 64], [])
class buf157_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_482', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf155', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_106', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_106', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf154', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_106', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_239', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf157', get_index_10, mul_6, None)
        return store


buf158: ExternKernelSchedulerNode(FallbackKernel)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf157')]
buf158.met_dependencies = [StarDep(name='primals_36'), StarDep(name='relu_30')]
buf158.node.kernel = aten.convolution_backward


buf159: ExternKernelSchedulerNode(MultiOutput)
buf159.writes = [StarDep(name='buf159')]
buf159.unmet_dependencies = [StarDep(name='buf158')]
buf159.met_dependencies = []
buf159.node.kernel = None


buf160: ExternKernelSchedulerNode(MultiOutput)
buf160.writes = [StarDep(name='buf160')]
buf160.unmet_dependencies = [StarDep(name='buf158')]
buf160.met_dependencies = []
buf160.node.kernel = None


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = 
    [   MemoryDep(name='buf161', index=c0, size=(640, 512)),
        MemoryDep(name='buf161', index=c0, size=(640,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf139', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf159', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf161.met_dependencies = [MemoryDep(name='relu_30', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf161.group.device = cuda:0
buf161.group.iteration = (640, 512)
buf161.sizes = ([640], [8, 64])
class buf161_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_30', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf161', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = 
    [   MemoryDep(name='buf162', index=c0, size=(640, 512)),
        MemoryDep(name='buf162', index=c0, size=(640,))]
buf162.unmet_dependencies = 
    [   MemoryDep(name='buf139', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf159', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf162.met_dependencies = 
    [   MemoryDep(name='convolution_34', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='relu_30', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_494', index=c0, size=(640, 512))]
buf162.group.device = cuda:0
buf162.group.iteration = (640, 512)
buf162.sizes = ([640], [8, 64])
class buf162_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_30', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_34', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_494', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf162', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = [MemoryDep(name='buf163', index=c0, size=(327680,))]
buf163.unmet_dependencies = 
    [   MemoryDep(name='buf139', index=c0, size=(327680,)),
        MemoryDep(name='buf159', index=c0, size=(327680,)),
        MemoryDep(name='buf161', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf162', index=c1, size=(8, 640, 64))]
buf163.met_dependencies = 
    [   MemoryDep(name='convolution_34', index=c0, size=(327680,)),
        MemoryDep(name='primals_234', index=c1, size=(8, 640, 64)),
        MemoryDep(name='relu_30', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_103', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_494', index=c1, size=(8, 640, 64))]
buf163.group.device = cuda:0
buf163.group.iteration = (327680, 1)
buf163.sizes = ([8, 640, 64], [])
class buf163_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_30', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_34', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_494', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf162', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_103', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_103', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf161', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_103', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_234', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf163', get_index_11, mul_6, None)
        return store


buf164: SchedulerNode(ComputedBuffer)
buf164.writes = [MemoryDep(name='buf164', index=c0, size=(640,))]
buf164.unmet_dependencies = [MemoryDep(name='buf162', index=c0, size=(640,))]
buf164.met_dependencies = [MemoryDep(name='squeeze_103', index=c0, size=(640,))]
buf164.group.device = cuda:0
buf164.group.iteration = (640, 1)
buf164.sizes = ([640], [])
class buf164_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_103', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf164', get_index_2, mul, None)
        return store


buf165: ExternKernelSchedulerNode(FallbackKernel)
buf165.writes = [StarDep(name='buf165')]
buf165.unmet_dependencies = [StarDep(name='buf163')]
buf165.met_dependencies = [StarDep(name='primals_35'), StarDep(name='relu_29')]
buf165.node.kernel = aten.convolution_backward


buf166: ExternKernelSchedulerNode(MultiOutput)
buf166.writes = [StarDep(name='buf166')]
buf166.unmet_dependencies = [StarDep(name='buf165')]
buf166.met_dependencies = []
buf166.node.kernel = None


buf167: ExternKernelSchedulerNode(MultiOutput)
buf167.writes = [StarDep(name='buf167')]
buf167.unmet_dependencies = [StarDep(name='buf165')]
buf167.met_dependencies = []
buf167.node.kernel = None


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = 
    [   MemoryDep(name='buf168', index=c0, size=(1920, 512)),
        MemoryDep(name='buf168', index=c0, size=(1920,))]
buf168.unmet_dependencies = [MemoryDep(name='buf166', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf168.met_dependencies = [MemoryDep(name='relu_29', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf168.group.device = cuda:0
buf168.group.iteration = (1920, 512)
buf168.sizes = ([1920], [8, 64])
class buf168_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf168', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = 
    [   MemoryDep(name='buf169', index=c0, size=(1920, 512)),
        MemoryDep(name='buf169', index=c0, size=(1920,))]
buf169.unmet_dependencies = [MemoryDep(name='buf166', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf169.met_dependencies = 
    [   MemoryDep(name='convolution_33', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_29', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_506', index=c0, size=(1920, 512))]
buf169.group.device = cuda:0
buf169.group.iteration = (1920, 512)
buf169.sizes = ([1920], [8, 64])
class buf169_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_506', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf169', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = [MemoryDep(name='buf170', index=c0, size=(1920,))]
buf170.unmet_dependencies = [MemoryDep(name='buf169', index=c0, size=(1920,))]
buf170.met_dependencies = [MemoryDep(name='squeeze_100', index=c0, size=(1920,))]
buf170.group.device = cuda:0
buf170.group.iteration = (1920, 1)
buf170.sizes = ([1920], [])
class buf170_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_100', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf170', get_index_2, mul, None)
        return store


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = [MemoryDep(name='buf171', index=c0, size=(983040,))]
buf171.unmet_dependencies = 
    [   MemoryDep(name='buf166', index=c0, size=(983040,)),
        MemoryDep(name='buf168', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf169', index=c1, size=(8, 1920, 64))]
buf171.met_dependencies = 
    [   MemoryDep(name='convolution_33', index=c0, size=(983040,)),
        MemoryDep(name='primals_229', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_29', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_100', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_506', index=c1, size=(8, 1920, 64))]
buf171.group.device = cuda:0
buf171.group.iteration = (983040, 1)
buf171.sizes = ([8, 1920, 64], [])
class buf171_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_506', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf169', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_100', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_100', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf168', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_100', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_229', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf171', get_index_10, mul_6, None)
        return store


buf172: ExternKernelSchedulerNode(FallbackKernel)
buf172.writes = [StarDep(name='buf172')]
buf172.unmet_dependencies = [StarDep(name='buf171')]
buf172.met_dependencies = [StarDep(name='primals_34'), StarDep(name='relu_28')]
buf172.node.kernel = aten.convolution_backward


buf173: ExternKernelSchedulerNode(MultiOutput)
buf173.writes = [StarDep(name='buf173')]
buf173.unmet_dependencies = [StarDep(name='buf172')]
buf173.met_dependencies = []
buf173.node.kernel = None


buf174: ExternKernelSchedulerNode(MultiOutput)
buf174.writes = [StarDep(name='buf174')]
buf174.unmet_dependencies = [StarDep(name='buf172')]
buf174.met_dependencies = []
buf174.node.kernel = None


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = 
    [   MemoryDep(name='buf175', index=c0, size=(1920, 512)),
        MemoryDep(name='buf175', index=c0, size=(1920,))]
buf175.unmet_dependencies = [MemoryDep(name='buf173', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf175.met_dependencies = [MemoryDep(name='relu_28', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf175.group.device = cuda:0
buf175.group.iteration = (1920, 512)
buf175.sizes = ([1920], [8, 64])
class buf175_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf175', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf176: SchedulerNode(ComputedBuffer)
buf176.writes = 
    [   MemoryDep(name='buf176', index=c0, size=(1920, 512)),
        MemoryDep(name='buf176', index=c0, size=(1920,))]
buf176.unmet_dependencies = [MemoryDep(name='buf173', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf176.met_dependencies = 
    [   MemoryDep(name='convolution_32', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_28', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_518', index=c0, size=(1920, 512))]
buf176.group.device = cuda:0
buf176.group.iteration = (1920, 512)
buf176.sizes = ([1920], [8, 64])
class buf176_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_518', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf176', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = [MemoryDep(name='buf177', index=c0, size=(1920,))]
buf177.unmet_dependencies = [MemoryDep(name='buf176', index=c0, size=(1920,))]
buf177.met_dependencies = [MemoryDep(name='squeeze_97', index=c0, size=(1920,))]
buf177.group.device = cuda:0
buf177.group.iteration = (1920, 1)
buf177.sizes = ([1920], [])
class buf177_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_97', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf177', get_index_2, mul, None)
        return store


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = [MemoryDep(name='buf178', index=c0, size=(983040,))]
buf178.unmet_dependencies = 
    [   MemoryDep(name='buf173', index=c0, size=(983040,)),
        MemoryDep(name='buf175', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf176', index=c1, size=(8, 1920, 64))]
buf178.met_dependencies = 
    [   MemoryDep(name='convolution_32', index=c0, size=(983040,)),
        MemoryDep(name='primals_224', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_28', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_97', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_518', index=c1, size=(8, 1920, 64))]
buf178.group.device = cuda:0
buf178.group.iteration = (983040, 1)
buf178.sizes = ([8, 1920, 64], [])
class buf178_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_518', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf176', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_97', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_97', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf175', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_97', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_224', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf178', get_index_10, mul_6, None)
        return store


buf179: ExternKernelSchedulerNode(FallbackKernel)
buf179.writes = [StarDep(name='buf179')]
buf179.unmet_dependencies = [StarDep(name='buf178')]
buf179.met_dependencies = [StarDep(name='primals_33'), StarDep(name='relu_27')]
buf179.node.kernel = aten.convolution_backward


buf180: ExternKernelSchedulerNode(MultiOutput)
buf180.writes = [StarDep(name='buf180')]
buf180.unmet_dependencies = [StarDep(name='buf179')]
buf180.met_dependencies = []
buf180.node.kernel = None


buf181: ExternKernelSchedulerNode(MultiOutput)
buf181.writes = [StarDep(name='buf181')]
buf181.unmet_dependencies = [StarDep(name='buf179')]
buf181.met_dependencies = []
buf181.node.kernel = None


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = [MemoryDep(name='buf182', index=c0, size=(327680,))]
buf182.unmet_dependencies = 
    [   MemoryDep(name='buf139', index=c0, size=(327680,)),
        MemoryDep(name='buf159', index=c0, size=(327680,)),
        MemoryDep(name='buf180', index=c0, size=(327680,))]
buf182.met_dependencies = 
    [   MemoryDep(name='relu_27', index=c0, size=(327680,)),
        MemoryDep(name='relu_30', index=c0, size=(327680,))]
buf182.group.device = cuda:0
buf182.group.iteration = (327680, 1)
buf182.sizes = ([327680], [])
class buf182_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_27', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_30', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf159', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf180', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf182', get_index_5, where_1, None)
        return store


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = 
    [   MemoryDep(name='buf183', index=c0, size=(640, 512)),
        MemoryDep(name='buf183', index=c0, size=(640,))]
buf183.unmet_dependencies = [MemoryDep(name='buf182', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf183.met_dependencies = []
buf183.group.device = cuda:0
buf183.group.iteration = (640, 512)
buf183.sizes = ([640], [8, 64])
class buf183_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf183', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf184: SchedulerNode(ComputedBuffer)
buf184.writes = 
    [   MemoryDep(name='buf184', index=c0, size=(640, 512)),
        MemoryDep(name='buf184', index=c0, size=(640,))]
buf184.unmet_dependencies = [MemoryDep(name='buf182', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf184.met_dependencies = 
    [   MemoryDep(name='convolution_31', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_530', index=c0, size=(640, 512))]
buf184.group.device = cuda:0
buf184.group.iteration = (640, 512)
buf184.sizes = ([640], [8, 64])
class buf184_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_530', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf184', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = [MemoryDep(name='buf185', index=c0, size=(640,))]
buf185.unmet_dependencies = [MemoryDep(name='buf184', index=c0, size=(640,))]
buf185.met_dependencies = [MemoryDep(name='squeeze_94', index=c0, size=(640,))]
buf185.group.device = cuda:0
buf185.group.iteration = (640, 1)
buf185.sizes = ([640], [])
class buf185_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_94', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, mul, None)
        return store


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = [MemoryDep(name='buf186', index=c0, size=(327680,))]
buf186.unmet_dependencies = 
    [   MemoryDep(name='buf182', index=c0, size=(327680,)),
        MemoryDep(name='buf183', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf184', index=c1, size=(8, 640, 64))]
buf186.met_dependencies = 
    [   MemoryDep(name='convolution_31', index=c0, size=(327680,)),
        MemoryDep(name='primals_219', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_94', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_530', index=c1, size=(8, 640, 64))]
buf186.group.device = cuda:0
buf186.group.iteration = (327680, 1)
buf186.sizes = ([8, 640, 64], [])
class buf186_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_530', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf184', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_94', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_94', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf183', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_94', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_219', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf186', get_index_9, mul_6, None)
        return store


buf187: ExternKernelSchedulerNode(FallbackKernel)
buf187.writes = [StarDep(name='buf187')]
buf187.unmet_dependencies = [StarDep(name='buf186')]
buf187.met_dependencies = [StarDep(name='primals_32'), StarDep(name='relu_24')]
buf187.node.kernel = aten.convolution_backward


buf188: ExternKernelSchedulerNode(MultiOutput)
buf188.writes = [StarDep(name='buf188')]
buf188.unmet_dependencies = [StarDep(name='buf187')]
buf188.met_dependencies = []
buf188.node.kernel = None


buf189: ExternKernelSchedulerNode(MultiOutput)
buf189.writes = [StarDep(name='buf189')]
buf189.unmet_dependencies = [StarDep(name='buf187')]
buf189.met_dependencies = []
buf189.node.kernel = None


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = 
    [   MemoryDep(name='buf190', index=c0, size=(640, 512)),
        MemoryDep(name='buf190', index=c0, size=(640,))]
buf190.unmet_dependencies = [MemoryDep(name='buf182', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf190.met_dependencies = 
    [   MemoryDep(name='convolution_30', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='unsqueeze_542', index=c0, size=(640, 512))]
buf190.group.device = cuda:0
buf190.group.iteration = (640, 512)
buf190.sizes = ([640], [8, 64])
class buf190_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_30', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_542', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf190', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(640,))]
buf191.unmet_dependencies = [MemoryDep(name='buf190', index=c0, size=(640,))]
buf191.met_dependencies = [MemoryDep(name='squeeze_91', index=c0, size=(640,))]
buf191.group.device = cuda:0
buf191.group.iteration = (640, 1)
buf191.sizes = ([640], [])
class buf191_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_91', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf191', get_index_2, mul, None)
        return store


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = [MemoryDep(name='buf192', index=c0, size=(327680,))]
buf192.unmet_dependencies = 
    [   MemoryDep(name='buf182', index=c0, size=(327680,)),
        MemoryDep(name='buf183', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf190', index=c1, size=(8, 640, 64))]
buf192.met_dependencies = 
    [   MemoryDep(name='convolution_30', index=c0, size=(327680,)),
        MemoryDep(name='primals_214', index=c1, size=(8, 640, 64)),
        MemoryDep(name='squeeze_91', index=c1, size=(8, 640, 64)),
        MemoryDep(name='unsqueeze_542', index=c1, size=(8, 640, 64))]
buf192.group.device = cuda:0
buf192.group.iteration = (327680, 1)
buf192.sizes = ([8, 640, 64], [])
class buf192_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_30', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_542', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf190', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_91', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_91', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf183', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_91', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_214', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf192', get_index_9, mul_6, None)
        return store


buf193: ExternKernelSchedulerNode(FallbackKernel)
buf193.writes = [StarDep(name='buf193')]
buf193.unmet_dependencies = [StarDep(name='buf192')]
buf193.met_dependencies = [StarDep(name='primals_31'), StarDep(name='relu_26')]
buf193.node.kernel = aten.convolution_backward


buf194: ExternKernelSchedulerNode(MultiOutput)
buf194.writes = [StarDep(name='buf194')]
buf194.unmet_dependencies = [StarDep(name='buf193')]
buf194.met_dependencies = []
buf194.node.kernel = None


buf195: ExternKernelSchedulerNode(MultiOutput)
buf195.writes = [StarDep(name='buf195')]
buf195.unmet_dependencies = [StarDep(name='buf193')]
buf195.met_dependencies = []
buf195.node.kernel = None


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = 
    [   MemoryDep(name='buf196', index=c0, size=(1920, 512)),
        MemoryDep(name='buf196', index=c0, size=(1920,))]
buf196.unmet_dependencies = [MemoryDep(name='buf194', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf196.met_dependencies = [MemoryDep(name='relu_26', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf196.group.device = cuda:0
buf196.group.iteration = (1920, 512)
buf196.sizes = ([1920], [8, 64])
class buf196_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf196', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = 
    [   MemoryDep(name='buf197', index=c0, size=(1920, 512)),
        MemoryDep(name='buf197', index=c0, size=(1920,))]
buf197.unmet_dependencies = [MemoryDep(name='buf194', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf197.met_dependencies = 
    [   MemoryDep(name='convolution_29', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='relu_26', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='unsqueeze_554', index=c0, size=(1920, 512))]
buf197.group.device = cuda:0
buf197.group.iteration = (1920, 512)
buf197.sizes = ([1920], [8, 64])
class buf197_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_554', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf197', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = [MemoryDep(name='buf198', index=c0, size=(1920,))]
buf198.unmet_dependencies = [MemoryDep(name='buf197', index=c0, size=(1920,))]
buf198.met_dependencies = [MemoryDep(name='squeeze_88', index=c0, size=(1920,))]
buf198.group.device = cuda:0
buf198.group.iteration = (1920, 1)
buf198.sizes = ([1920], [])
class buf198_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_88', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf198', get_index_2, mul, None)
        return store


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(983040,))]
buf199.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=c0, size=(983040,)),
        MemoryDep(name='buf196', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf197', index=c1, size=(8, 1920, 64))]
buf199.met_dependencies = 
    [   MemoryDep(name='convolution_29', index=c0, size=(983040,)),
        MemoryDep(name='primals_209', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='relu_26', index=c0, size=(983040,)),
        MemoryDep(name='squeeze_88', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='unsqueeze_554', index=c1, size=(8, 1920, 64))]
buf199.group.device = cuda:0
buf199.group.iteration = (983040, 1)
buf199.sizes = ([8, 1920, 64], [])
class buf199_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_554', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf197', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_88', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_88', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf196', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_88', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_209', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf199', get_index_10, mul_6, None)
        return store


buf200: ExternKernelSchedulerNode(FallbackKernel)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf199')]
buf200.met_dependencies = [StarDep(name='primals_30'), StarDep(name='relu_25')]
buf200.node.kernel = aten.convolution_backward


buf201: ExternKernelSchedulerNode(MultiOutput)
buf201.writes = [StarDep(name='buf201')]
buf201.unmet_dependencies = [StarDep(name='buf200')]
buf201.met_dependencies = []
buf201.node.kernel = None


buf202: ExternKernelSchedulerNode(MultiOutput)
buf202.writes = [StarDep(name='buf202')]
buf202.unmet_dependencies = [StarDep(name='buf200')]
buf202.met_dependencies = []
buf202.node.kernel = None


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(1920, 2048)),
        MemoryDep(name='buf203', index=c0, size=(1920,))]
buf203.unmet_dependencies = [MemoryDep(name='buf201', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256))]
buf203.met_dependencies = [MemoryDep(name='relu_25', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256))]
buf203.group.device = cuda:0
buf203.group.iteration = (1920, 2048)
buf203.sizes = ([1920], [8, 256])
class buf203_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 256}
    index0 = 256*z0 + 491520*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf203', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = 
    [   MemoryDep(name='buf204', index=c0, size=(1920, 2048)),
        MemoryDep(name='buf204', index=c0, size=(1920,))]
buf204.unmet_dependencies = [MemoryDep(name='buf201', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256))]
buf204.met_dependencies = 
    [   MemoryDep(name='convolution_28', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256)),
        MemoryDep(name='relu_25', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256)),
        MemoryDep(name='unsqueeze_566', index=c0, size=(1920, 2048))]
buf204.group.device = cuda:0
buf204.group.iteration = (1920, 2048)
buf204.sizes = ([1920], [8, 256])
class buf204_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 256}
    index0 = 256*z0 + 491520*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_28', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_566', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf204', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(1920,))]
buf205.unmet_dependencies = [MemoryDep(name='buf204', index=c0, size=(1920,))]
buf205.met_dependencies = [MemoryDep(name='squeeze_85', index=c0, size=(1920,))]
buf205.group.device = cuda:0
buf205.group.iteration = (1920, 1)
buf205.sizes = ([1920], [])
class buf205_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_85', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf205', get_index_2, mul, None)
        return store


buf206: SchedulerNode(ComputedBuffer)
buf206.writes = [MemoryDep(name='buf206', index=c0, size=(3932160,))]
buf206.unmet_dependencies = 
    [   MemoryDep(name='buf201', index=c0, size=(3932160,)),
        MemoryDep(name='buf203', index=c1, size=(8, 1920, 256)),
        MemoryDep(name='buf204', index=c1, size=(8, 1920, 256))]
buf206.met_dependencies = 
    [   MemoryDep(name='convolution_28', index=c0, size=(3932160,)),
        MemoryDep(name='primals_204', index=c1, size=(8, 1920, 256)),
        MemoryDep(name='relu_25', index=c0, size=(3932160,)),
        MemoryDep(name='squeeze_85', index=c1, size=(8, 1920, 256)),
        MemoryDep(name='unsqueeze_566', index=c1, size=(8, 1920, 256))]
buf206.group.device = cuda:0
buf206.group.iteration = (3932160, 1)
buf206.sizes = ([8, 1920, 256], [])
class buf206_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 256}
    index0 = 491520*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_28', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_566', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf204', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_85', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_85', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf203', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_85', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_204', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf206', get_index_10, mul_6, None)
        return store


buf207: ExternKernelSchedulerNode(FallbackKernel)
buf207.writes = [StarDep(name='buf207')]
buf207.unmet_dependencies = [StarDep(name='buf206')]
buf207.met_dependencies = [StarDep(name='primals_29'), StarDep(name='relu_24')]
buf207.node.kernel = aten.convolution_backward


buf208: ExternKernelSchedulerNode(MultiOutput)
buf208.writes = [StarDep(name='buf208')]
buf208.unmet_dependencies = [StarDep(name='buf207')]
buf208.met_dependencies = []
buf208.node.kernel = None


buf209: ExternKernelSchedulerNode(MultiOutput)
buf209.writes = [StarDep(name='buf209')]
buf209.unmet_dependencies = [StarDep(name='buf207')]
buf209.met_dependencies = []
buf209.node.kernel = None


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = 
    [   MemoryDep(name='buf210', index=c0, size=(640, 2048)),
        MemoryDep(name='buf210', index=c0, size=(640,))]
buf210.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf208', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf210.met_dependencies = [MemoryDep(name='relu_24', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf210.group.device = cuda:0
buf210.group.iteration = (640, 2048)
buf210.sizes = ([640], [8, 256])
class buf210_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_24', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf210', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = 
    [   MemoryDep(name='buf211', index=c0, size=(640, 2048)),
        MemoryDep(name='buf211', index=c0, size=(640,))]
buf211.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf208', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf211.met_dependencies = 
    [   MemoryDep(name='convolution_27', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='relu_24', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_578', index=c0, size=(640, 2048))]
buf211.group.device = cuda:0
buf211.group.iteration = (640, 2048)
buf211.sizes = ([640], [8, 256])
class buf211_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_24', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_27', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_578', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf211', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(1310720,))]
buf212.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(1310720,)),
        MemoryDep(name='buf208', index=c0, size=(1310720,)),
        MemoryDep(name='buf210', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf211', index=c1, size=(8, 640, 256))]
buf212.met_dependencies = 
    [   MemoryDep(name='convolution_27', index=c0, size=(1310720,)),
        MemoryDep(name='primals_199', index=c1, size=(8, 640, 256)),
        MemoryDep(name='relu_24', index=c0, size=(1310720,)),
        MemoryDep(name='squeeze_82', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_578', index=c1, size=(8, 640, 256))]
buf212.group.device = cuda:0
buf212.group.iteration = (1310720, 1)
buf212.sizes = ([8, 640, 256], [])
class buf212_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_24', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_27', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_578', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf211', get_index_5)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_82', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_82', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf210', get_index_8)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_82', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_199', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf212', get_index_11, mul_6, None)
        return store


buf213: SchedulerNode(ComputedBuffer)
buf213.writes = [MemoryDep(name='buf213', index=c0, size=(640,))]
buf213.unmet_dependencies = [MemoryDep(name='buf211', index=c0, size=(640,))]
buf213.met_dependencies = [MemoryDep(name='squeeze_82', index=c0, size=(640,))]
buf213.group.device = cuda:0
buf213.group.iteration = (640, 1)
buf213.sizes = ([640], [])
class buf213_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_82', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf213', get_index_2, mul, None)
        return store


buf214: ExternKernelSchedulerNode(FallbackKernel)
buf214.writes = [StarDep(name='buf214')]
buf214.unmet_dependencies = [StarDep(name='buf212')]
buf214.met_dependencies = [StarDep(name='primals_28'), StarDep(name='relu_23')]
buf214.node.kernel = aten.convolution_backward


buf215: ExternKernelSchedulerNode(MultiOutput)
buf215.writes = [StarDep(name='buf215')]
buf215.unmet_dependencies = [StarDep(name='buf214')]
buf215.met_dependencies = []
buf215.node.kernel = None


buf216: ExternKernelSchedulerNode(MultiOutput)
buf216.writes = [StarDep(name='buf216')]
buf216.unmet_dependencies = [StarDep(name='buf214')]
buf216.met_dependencies = []
buf216.node.kernel = None


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = 
    [   MemoryDep(name='buf217', index=c0, size=(160, 2048)),
        MemoryDep(name='buf217', index=c0, size=(160,))]
buf217.unmet_dependencies = [MemoryDep(name='buf215', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf217.met_dependencies = [MemoryDep(name='relu_23', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf217.group.device = cuda:0
buf217.group.iteration = (160, 2048)
buf217.sizes = ([160], [8, 256])
class buf217_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf217', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = 
    [   MemoryDep(name='buf218', index=c0, size=(160, 2048)),
        MemoryDep(name='buf218', index=c0, size=(160,))]
buf218.unmet_dependencies = [MemoryDep(name='buf215', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf218.met_dependencies = 
    [   MemoryDep(name='convolution_26', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_23', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_590', index=c0, size=(160, 2048))]
buf218.group.device = cuda:0
buf218.group.iteration = (160, 2048)
buf218.sizes = ([160], [8, 256])
class buf218_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_26', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_590', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf218', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = [MemoryDep(name='buf219', index=c0, size=(160,))]
buf219.unmet_dependencies = [MemoryDep(name='buf218', index=c0, size=(160,))]
buf219.met_dependencies = [MemoryDep(name='squeeze_79', index=c0, size=(160,))]
buf219.group.device = cuda:0
buf219.group.iteration = (160, 1)
buf219.sizes = ([160], [])
class buf219_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf219', get_index_2, mul, None)
        return store


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = [MemoryDep(name='buf220', index=c0, size=(327680,))]
buf220.unmet_dependencies = 
    [   MemoryDep(name='buf215', index=c0, size=(327680,)),
        MemoryDep(name='buf217', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf218', index=c1, size=(8, 160, 256))]
buf220.met_dependencies = 
    [   MemoryDep(name='convolution_26', index=c0, size=(327680,)),
        MemoryDep(name='primals_194', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_23', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_79', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_590', index=c1, size=(8, 160, 256))]
buf220.group.device = cuda:0
buf220.group.iteration = (327680, 1)
buf220.sizes = ([8, 160, 256], [])
class buf220_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_26', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_590', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf218', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_79', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_79', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf217', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_79', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_194', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf220', get_index_10, mul_6, None)
        return store


buf221: ExternKernelSchedulerNode(FallbackKernel)
buf221.writes = [StarDep(name='buf221')]
buf221.unmet_dependencies = [StarDep(name='buf220')]
buf221.met_dependencies = [StarDep(name='primals_27'), StarDep(name='relu_22')]
buf221.node.kernel = aten.convolution_backward


buf222: ExternKernelSchedulerNode(MultiOutput)
buf222.writes = [StarDep(name='buf222')]
buf222.unmet_dependencies = [StarDep(name='buf221')]
buf222.met_dependencies = []
buf222.node.kernel = None


buf223: ExternKernelSchedulerNode(MultiOutput)
buf223.writes = [StarDep(name='buf223')]
buf223.unmet_dependencies = [StarDep(name='buf221')]
buf223.met_dependencies = []
buf223.node.kernel = None


buf224: SchedulerNode(ComputedBuffer)
buf224.writes = 
    [   MemoryDep(name='buf224', index=c0, size=(160, 2048)),
        MemoryDep(name='buf224', index=c0, size=(160,))]
buf224.unmet_dependencies = [MemoryDep(name='buf222', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf224.met_dependencies = [MemoryDep(name='relu_22', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf224.group.device = cuda:0
buf224.group.iteration = (160, 2048)
buf224.sizes = ([160], [8, 256])
class buf224_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf224', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = 
    [   MemoryDep(name='buf225', index=c0, size=(160, 2048)),
        MemoryDep(name='buf225', index=c0, size=(160,))]
buf225.unmet_dependencies = [MemoryDep(name='buf222', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf225.met_dependencies = 
    [   MemoryDep(name='convolution_25', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_22', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_602', index=c0, size=(160, 2048))]
buf225.group.device = cuda:0
buf225.group.iteration = (160, 2048)
buf225.sizes = ([160], [8, 256])
class buf225_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_25', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_602', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf225', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf226: SchedulerNode(ComputedBuffer)
buf226.writes = [MemoryDep(name='buf226', index=c0, size=(160,))]
buf226.unmet_dependencies = [MemoryDep(name='buf225', index=c0, size=(160,))]
buf226.met_dependencies = [MemoryDep(name='squeeze_76', index=c0, size=(160,))]
buf226.group.device = cuda:0
buf226.group.iteration = (160, 1)
buf226.sizes = ([160], [])
class buf226_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_76', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf226', get_index_2, mul, None)
        return store


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = [MemoryDep(name='buf227', index=c0, size=(327680,))]
buf227.unmet_dependencies = 
    [   MemoryDep(name='buf222', index=c0, size=(327680,)),
        MemoryDep(name='buf224', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf225', index=c1, size=(8, 160, 256))]
buf227.met_dependencies = 
    [   MemoryDep(name='convolution_25', index=c0, size=(327680,)),
        MemoryDep(name='primals_189', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_22', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_76', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_602', index=c1, size=(8, 160, 256))]
buf227.group.device = cuda:0
buf227.group.iteration = (327680, 1)
buf227.sizes = ([8, 160, 256], [])
class buf227_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_25', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_602', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf225', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_76', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_76', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf224', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_76', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_189', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf227', get_index_10, mul_6, None)
        return store


buf228: ExternKernelSchedulerNode(FallbackKernel)
buf228.writes = [StarDep(name='buf228')]
buf228.unmet_dependencies = [StarDep(name='buf227')]
buf228.met_dependencies = [StarDep(name='primals_26'), StarDep(name='relu_21')]
buf228.node.kernel = aten.convolution_backward


buf229: ExternKernelSchedulerNode(MultiOutput)
buf229.writes = [StarDep(name='buf229')]
buf229.unmet_dependencies = [StarDep(name='buf228')]
buf229.met_dependencies = []
buf229.node.kernel = None


buf230: ExternKernelSchedulerNode(MultiOutput)
buf230.writes = [StarDep(name='buf230')]
buf230.unmet_dependencies = [StarDep(name='buf228')]
buf230.met_dependencies = []
buf230.node.kernel = None


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = [MemoryDep(name='buf231', index=c0, size=(1310720,))]
buf231.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(1310720,)),
        MemoryDep(name='buf208', index=c0, size=(1310720,)),
        MemoryDep(name='buf229', index=c0, size=(1310720,))]
buf231.met_dependencies = 
    [   MemoryDep(name='relu_21', index=c0, size=(1310720,)),
        MemoryDep(name='relu_24', index=c0, size=(1310720,))]
buf231.group.device = cuda:0
buf231.group.iteration = (1310720, 1)
buf231.sizes = ([1310720], [])
class buf231_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_21', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_24', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf208', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf229', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, where_1, None)
        return store


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = 
    [   MemoryDep(name='buf232', index=c0, size=(640, 2048)),
        MemoryDep(name='buf232', index=c0, size=(640,))]
buf232.unmet_dependencies = [MemoryDep(name='buf231', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf232.met_dependencies = []
buf232.group.device = cuda:0
buf232.group.iteration = (640, 2048)
buf232.sizes = ([640], [8, 256])
class buf232_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf232', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = 
    [   MemoryDep(name='buf233', index=c0, size=(640, 2048)),
        MemoryDep(name='buf233', index=c0, size=(640,))]
buf233.unmet_dependencies = [MemoryDep(name='buf231', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf233.met_dependencies = 
    [   MemoryDep(name='convolution_24', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_614', index=c0, size=(640, 2048))]
buf233.group.device = cuda:0
buf233.group.iteration = (640, 2048)
buf233.sizes = ([640], [8, 256])
class buf233_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_614', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf233', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = [MemoryDep(name='buf234', index=c0, size=(640,))]
buf234.unmet_dependencies = [MemoryDep(name='buf233', index=c0, size=(640,))]
buf234.met_dependencies = [MemoryDep(name='squeeze_73', index=c0, size=(640,))]
buf234.group.device = cuda:0
buf234.group.iteration = (640, 1)
buf234.sizes = ([640], [])
class buf234_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_73', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf234', get_index_2, mul, None)
        return store


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = [MemoryDep(name='buf235', index=c0, size=(1310720,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf231', index=c0, size=(1310720,)),
        MemoryDep(name='buf232', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf233', index=c1, size=(8, 640, 256))]
buf235.met_dependencies = 
    [   MemoryDep(name='convolution_24', index=c0, size=(1310720,)),
        MemoryDep(name='primals_184', index=c1, size=(8, 640, 256)),
        MemoryDep(name='squeeze_73', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_614', index=c1, size=(8, 640, 256))]
buf235.group.device = cuda:0
buf235.group.iteration = (1310720, 1)
buf235.sizes = ([8, 640, 256], [])
class buf235_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_614', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf233', get_index_3)
        constant = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_73', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_73', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf232', get_index_6)
        constant_1 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_73', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_184', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf235', get_index_9, mul_6, None)
        return store


buf236: ExternKernelSchedulerNode(FallbackKernel)
buf236.writes = [StarDep(name='buf236')]
buf236.unmet_dependencies = [StarDep(name='buf235')]
buf236.met_dependencies = [StarDep(name='primals_25'), StarDep(name='relu_20')]
buf236.node.kernel = aten.convolution_backward


buf237: ExternKernelSchedulerNode(MultiOutput)
buf237.writes = [StarDep(name='buf237')]
buf237.unmet_dependencies = [StarDep(name='buf236')]
buf237.met_dependencies = []
buf237.node.kernel = None


buf238: ExternKernelSchedulerNode(MultiOutput)
buf238.writes = [StarDep(name='buf238')]
buf238.unmet_dependencies = [StarDep(name='buf236')]
buf238.met_dependencies = []
buf238.node.kernel = None


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = 
    [   MemoryDep(name='buf239', index=c0, size=(160, 2048)),
        MemoryDep(name='buf239', index=c0, size=(160,))]
buf239.unmet_dependencies = [MemoryDep(name='buf237', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf239.met_dependencies = [MemoryDep(name='relu_20', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf239.group.device = cuda:0
buf239.group.iteration = (160, 2048)
buf239.sizes = ([160], [8, 256])
class buf239_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf239', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = 
    [   MemoryDep(name='buf240', index=c0, size=(160, 2048)),
        MemoryDep(name='buf240', index=c0, size=(160,))]
buf240.unmet_dependencies = [MemoryDep(name='buf237', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf240.met_dependencies = 
    [   MemoryDep(name='convolution_23', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_20', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_626', index=c0, size=(160, 2048))]
buf240.group.device = cuda:0
buf240.group.iteration = (160, 2048)
buf240.sizes = ([160], [8, 256])
class buf240_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_626', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf240', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = [MemoryDep(name='buf241', index=c0, size=(160,))]
buf241.unmet_dependencies = [MemoryDep(name='buf240', index=c0, size=(160,))]
buf241.met_dependencies = [MemoryDep(name='squeeze_70', index=c0, size=(160,))]
buf241.group.device = cuda:0
buf241.group.iteration = (160, 1)
buf241.sizes = ([160], [])
class buf241_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_70', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf241', get_index_2, mul, None)
        return store


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = [MemoryDep(name='buf242', index=c0, size=(327680,))]
buf242.unmet_dependencies = 
    [   MemoryDep(name='buf237', index=c0, size=(327680,)),
        MemoryDep(name='buf239', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf240', index=c1, size=(8, 160, 256))]
buf242.met_dependencies = 
    [   MemoryDep(name='convolution_23', index=c0, size=(327680,)),
        MemoryDep(name='primals_179', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_20', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_70', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_626', index=c1, size=(8, 160, 256))]
buf242.group.device = cuda:0
buf242.group.iteration = (327680, 1)
buf242.sizes = ([8, 160, 256], [])
class buf242_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_626', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf240', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_70', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_70', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf239', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_70', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_179', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf242', get_index_10, mul_6, None)
        return store


buf243: ExternKernelSchedulerNode(FallbackKernel)
buf243.writes = [StarDep(name='buf243')]
buf243.unmet_dependencies = [StarDep(name='buf242')]
buf243.met_dependencies = [StarDep(name='primals_24'), StarDep(name='relu_19')]
buf243.node.kernel = aten.convolution_backward


buf244: ExternKernelSchedulerNode(MultiOutput)
buf244.writes = [StarDep(name='buf244')]
buf244.unmet_dependencies = [StarDep(name='buf243')]
buf244.met_dependencies = []
buf244.node.kernel = None


buf245: ExternKernelSchedulerNode(MultiOutput)
buf245.writes = [StarDep(name='buf245')]
buf245.unmet_dependencies = [StarDep(name='buf243')]
buf245.met_dependencies = []
buf245.node.kernel = None


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = 
    [   MemoryDep(name='buf246', index=c0, size=(160, 2048)),
        MemoryDep(name='buf246', index=c0, size=(160,))]
buf246.unmet_dependencies = [MemoryDep(name='buf244', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf246.met_dependencies = [MemoryDep(name='relu_19', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf246.group.device = cuda:0
buf246.group.iteration = (160, 2048)
buf246.sizes = ([160], [8, 256])
class buf246_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf246', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = 
    [   MemoryDep(name='buf247', index=c0, size=(160, 2048)),
        MemoryDep(name='buf247', index=c0, size=(160,))]
buf247.unmet_dependencies = [MemoryDep(name='buf244', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf247.met_dependencies = 
    [   MemoryDep(name='convolution_22', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_19', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_638', index=c0, size=(160, 2048))]
buf247.group.device = cuda:0
buf247.group.iteration = (160, 2048)
buf247.sizes = ([160], [8, 256])
class buf247_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_638', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf247', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf248: SchedulerNode(ComputedBuffer)
buf248.writes = [MemoryDep(name='buf248', index=c0, size=(160,))]
buf248.unmet_dependencies = [MemoryDep(name='buf247', index=c0, size=(160,))]
buf248.met_dependencies = [MemoryDep(name='squeeze_67', index=c0, size=(160,))]
buf248.group.device = cuda:0
buf248.group.iteration = (160, 1)
buf248.sizes = ([160], [])
class buf248_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_67', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf248', get_index_2, mul, None)
        return store


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = [MemoryDep(name='buf249', index=c0, size=(327680,))]
buf249.unmet_dependencies = 
    [   MemoryDep(name='buf244', index=c0, size=(327680,)),
        MemoryDep(name='buf246', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf247', index=c1, size=(8, 160, 256))]
buf249.met_dependencies = 
    [   MemoryDep(name='convolution_22', index=c0, size=(327680,)),
        MemoryDep(name='primals_174', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_19', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_67', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_638', index=c1, size=(8, 160, 256))]
buf249.group.device = cuda:0
buf249.group.iteration = (327680, 1)
buf249.sizes = ([8, 160, 256], [])
class buf249_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_638', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf247', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_67', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_67', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf246', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_67', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_174', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf249', get_index_10, mul_6, None)
        return store


buf250: ExternKernelSchedulerNode(FallbackKernel)
buf250.writes = [StarDep(name='buf250')]
buf250.unmet_dependencies = [StarDep(name='buf249')]
buf250.met_dependencies = [StarDep(name='primals_23'), StarDep(name='relu_18')]
buf250.node.kernel = aten.convolution_backward


buf251: ExternKernelSchedulerNode(MultiOutput)
buf251.writes = [StarDep(name='buf251')]
buf251.unmet_dependencies = [StarDep(name='buf250')]
buf251.met_dependencies = []
buf251.node.kernel = None


buf252: ExternKernelSchedulerNode(MultiOutput)
buf252.writes = [StarDep(name='buf252')]
buf252.unmet_dependencies = [StarDep(name='buf250')]
buf252.met_dependencies = []
buf252.node.kernel = None


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = 
    [   MemoryDep(name='buf253', index=c0, size=(640, 2048)),
        MemoryDep(name='buf253', index=c0, size=(640,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf231', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf251', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf253.met_dependencies = [MemoryDep(name='relu_18', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf253.group.device = cuda:0
buf253.group.iteration = (640, 2048)
buf253.sizes = ([640], [8, 256])
class buf253_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_18', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf251', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf253', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf254: SchedulerNode(ComputedBuffer)
buf254.writes = 
    [   MemoryDep(name='buf254', index=c0, size=(640, 2048)),
        MemoryDep(name='buf254', index=c0, size=(640,))]
buf254.unmet_dependencies = 
    [   MemoryDep(name='buf231', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf251', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf254.met_dependencies = 
    [   MemoryDep(name='convolution_21', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='relu_18', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_650', index=c0, size=(640, 2048))]
buf254.group.device = cuda:0
buf254.group.iteration = (640, 2048)
buf254.sizes = ([640], [8, 256])
class buf254_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_18', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf251', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_21', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_650', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf254', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf255: SchedulerNode(ComputedBuffer)
buf255.writes = [MemoryDep(name='buf255', index=c0, size=(1310720,))]
buf255.unmet_dependencies = 
    [   MemoryDep(name='buf231', index=c0, size=(1310720,)),
        MemoryDep(name='buf251', index=c0, size=(1310720,)),
        MemoryDep(name='buf253', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf254', index=c1, size=(8, 640, 256))]
buf255.met_dependencies = 
    [   MemoryDep(name='convolution_21', index=c0, size=(1310720,)),
        MemoryDep(name='primals_169', index=c1, size=(8, 640, 256)),
        MemoryDep(name='relu_18', index=c0, size=(1310720,)),
        MemoryDep(name='squeeze_64', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_650', index=c1, size=(8, 640, 256))]
buf255.group.device = cuda:0
buf255.group.iteration = (1310720, 1)
buf255.sizes = ([8, 640, 256], [])
class buf255_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_18', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf251', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_21', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_650', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf254', get_index_5)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_64', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_64', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf253', get_index_8)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_64', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_169', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf255', get_index_11, mul_6, None)
        return store


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = [MemoryDep(name='buf256', index=c0, size=(640,))]
buf256.unmet_dependencies = [MemoryDep(name='buf254', index=c0, size=(640,))]
buf256.met_dependencies = [MemoryDep(name='squeeze_64', index=c0, size=(640,))]
buf256.group.device = cuda:0
buf256.group.iteration = (640, 1)
buf256.sizes = ([640], [])
class buf256_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_64', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf256', get_index_2, mul, None)
        return store


buf257: ExternKernelSchedulerNode(FallbackKernel)
buf257.writes = [StarDep(name='buf257')]
buf257.unmet_dependencies = [StarDep(name='buf255')]
buf257.met_dependencies = [StarDep(name='primals_22'), StarDep(name='relu_17')]
buf257.node.kernel = aten.convolution_backward


buf258: ExternKernelSchedulerNode(MultiOutput)
buf258.writes = [StarDep(name='buf258')]
buf258.unmet_dependencies = [StarDep(name='buf257')]
buf258.met_dependencies = []
buf258.node.kernel = None


buf259: ExternKernelSchedulerNode(MultiOutput)
buf259.writes = [StarDep(name='buf259')]
buf259.unmet_dependencies = [StarDep(name='buf257')]
buf259.met_dependencies = []
buf259.node.kernel = None


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = 
    [   MemoryDep(name='buf260', index=c0, size=(160, 2048)),
        MemoryDep(name='buf260', index=c0, size=(160,))]
buf260.unmet_dependencies = [MemoryDep(name='buf258', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf260.met_dependencies = [MemoryDep(name='relu_17', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf260.group.device = cuda:0
buf260.group.iteration = (160, 2048)
buf260.sizes = ([160], [8, 256])
class buf260_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf258', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf260', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = 
    [   MemoryDep(name='buf261', index=c0, size=(160, 2048)),
        MemoryDep(name='buf261', index=c0, size=(160,))]
buf261.unmet_dependencies = [MemoryDep(name='buf258', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf261.met_dependencies = 
    [   MemoryDep(name='convolution_20', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_17', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_662', index=c0, size=(160, 2048))]
buf261.group.device = cuda:0
buf261.group.iteration = (160, 2048)
buf261.sizes = ([160], [8, 256])
class buf261_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf258', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_20', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_662', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf261', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = [MemoryDep(name='buf262', index=c0, size=(160,))]
buf262.unmet_dependencies = [MemoryDep(name='buf261', index=c0, size=(160,))]
buf262.met_dependencies = [MemoryDep(name='squeeze_61', index=c0, size=(160,))]
buf262.group.device = cuda:0
buf262.group.iteration = (160, 1)
buf262.sizes = ([160], [])
class buf262_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_61', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf262', get_index_2, mul, None)
        return store


buf263: SchedulerNode(ComputedBuffer)
buf263.writes = [MemoryDep(name='buf263', index=c0, size=(327680,))]
buf263.unmet_dependencies = 
    [   MemoryDep(name='buf258', index=c0, size=(327680,)),
        MemoryDep(name='buf260', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf261', index=c1, size=(8, 160, 256))]
buf263.met_dependencies = 
    [   MemoryDep(name='convolution_20', index=c0, size=(327680,)),
        MemoryDep(name='primals_164', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_17', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_61', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_662', index=c1, size=(8, 160, 256))]
buf263.group.device = cuda:0
buf263.group.iteration = (327680, 1)
buf263.sizes = ([8, 160, 256], [])
class buf263_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf258', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_20', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_662', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf261', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_61', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_61', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf260', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_61', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_164', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf263', get_index_10, mul_6, None)
        return store


buf264: ExternKernelSchedulerNode(FallbackKernel)
buf264.writes = [StarDep(name='buf264')]
buf264.unmet_dependencies = [StarDep(name='buf263')]
buf264.met_dependencies = [StarDep(name='primals_21'), StarDep(name='relu_16')]
buf264.node.kernel = aten.convolution_backward


buf265: ExternKernelSchedulerNode(MultiOutput)
buf265.writes = [StarDep(name='buf265')]
buf265.unmet_dependencies = [StarDep(name='buf264')]
buf265.met_dependencies = []
buf265.node.kernel = None


buf266: ExternKernelSchedulerNode(MultiOutput)
buf266.writes = [StarDep(name='buf266')]
buf266.unmet_dependencies = [StarDep(name='buf264')]
buf266.met_dependencies = []
buf266.node.kernel = None


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = 
    [   MemoryDep(name='buf267', index=c0, size=(160, 2048)),
        MemoryDep(name='buf267', index=c0, size=(160,))]
buf267.unmet_dependencies = [MemoryDep(name='buf265', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf267.met_dependencies = [MemoryDep(name='relu_16', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf267.group.device = cuda:0
buf267.group.iteration = (160, 2048)
buf267.sizes = ([160], [8, 256])
class buf267_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf267', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = 
    [   MemoryDep(name='buf268', index=c0, size=(160, 2048)),
        MemoryDep(name='buf268', index=c0, size=(160,))]
buf268.unmet_dependencies = [MemoryDep(name='buf265', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf268.met_dependencies = 
    [   MemoryDep(name='convolution_19', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_16', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_674', index=c0, size=(160, 2048))]
buf268.group.device = cuda:0
buf268.group.iteration = (160, 2048)
buf268.sizes = ([160], [8, 256])
class buf268_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_19', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_674', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf268', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = [MemoryDep(name='buf269', index=c0, size=(160,))]
buf269.unmet_dependencies = [MemoryDep(name='buf268', index=c0, size=(160,))]
buf269.met_dependencies = [MemoryDep(name='squeeze_58', index=c0, size=(160,))]
buf269.group.device = cuda:0
buf269.group.iteration = (160, 1)
buf269.sizes = ([160], [])
class buf269_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_58', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, mul, None)
        return store


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = [MemoryDep(name='buf270', index=c0, size=(327680,))]
buf270.unmet_dependencies = 
    [   MemoryDep(name='buf265', index=c0, size=(327680,)),
        MemoryDep(name='buf267', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf268', index=c1, size=(8, 160, 256))]
buf270.met_dependencies = 
    [   MemoryDep(name='convolution_19', index=c0, size=(327680,)),
        MemoryDep(name='primals_159', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_16', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_58', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_674', index=c1, size=(8, 160, 256))]
buf270.group.device = cuda:0
buf270.group.iteration = (327680, 1)
buf270.sizes = ([8, 160, 256], [])
class buf270_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_19', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_674', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf268', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_58', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_58', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf267', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_58', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_159', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf270', get_index_10, mul_6, None)
        return store


buf271: ExternKernelSchedulerNode(FallbackKernel)
buf271.writes = [StarDep(name='buf271')]
buf271.unmet_dependencies = [StarDep(name='buf270')]
buf271.met_dependencies = [StarDep(name='primals_20'), StarDep(name='relu_15')]
buf271.node.kernel = aten.convolution_backward


buf272: ExternKernelSchedulerNode(MultiOutput)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf271')]
buf272.met_dependencies = []
buf272.node.kernel = None


buf273: ExternKernelSchedulerNode(MultiOutput)
buf273.writes = [StarDep(name='buf273')]
buf273.unmet_dependencies = [StarDep(name='buf271')]
buf273.met_dependencies = []
buf273.node.kernel = None


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = [MemoryDep(name='buf274', index=c0, size=(1310720,))]
buf274.unmet_dependencies = 
    [   MemoryDep(name='buf231', index=c0, size=(1310720,)),
        MemoryDep(name='buf251', index=c0, size=(1310720,)),
        MemoryDep(name='buf272', index=c0, size=(1310720,))]
buf274.met_dependencies = 
    [   MemoryDep(name='relu_15', index=c0, size=(1310720,)),
        MemoryDep(name='relu_18', index=c0, size=(1310720,))]
buf274.group.device = cuda:0
buf274.group.iteration = (1310720, 1)
buf274.sizes = ([1310720], [])
class buf274_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_15', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_18', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf231', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf251', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf272', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf274', get_index_5, where_1, None)
        return store


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(640, 2048)),
        MemoryDep(name='buf275', index=c0, size=(640,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf275.met_dependencies = []
buf275.group.device = cuda:0
buf275.group.iteration = (640, 2048)
buf275.sizes = ([640], [8, 256])
class buf275_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf275', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = 
    [   MemoryDep(name='buf276', index=c0, size=(640, 2048)),
        MemoryDep(name='buf276', index=c0, size=(640,))]
buf276.unmet_dependencies = [MemoryDep(name='buf274', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf276.met_dependencies = 
    [   MemoryDep(name='convolution_18', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_686', index=c0, size=(640, 2048))]
buf276.group.device = cuda:0
buf276.group.iteration = (640, 2048)
buf276.sizes = ([640], [8, 256])
class buf276_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_18', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_686', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf276', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = [MemoryDep(name='buf277', index=c0, size=(640,))]
buf277.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(640,))]
buf277.met_dependencies = [MemoryDep(name='squeeze_55', index=c0, size=(640,))]
buf277.group.device = cuda:0
buf277.group.iteration = (640, 1)
buf277.sizes = ([640], [])
class buf277_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_55', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf277', get_index_2, mul, None)
        return store


buf278: SchedulerNode(ComputedBuffer)
buf278.writes = [MemoryDep(name='buf278', index=c0, size=(1310720,))]
buf278.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(1310720,)),
        MemoryDep(name='buf275', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf276', index=c1, size=(8, 640, 256))]
buf278.met_dependencies = 
    [   MemoryDep(name='convolution_18', index=c0, size=(1310720,)),
        MemoryDep(name='primals_154', index=c1, size=(8, 640, 256)),
        MemoryDep(name='squeeze_55', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_686', index=c1, size=(8, 640, 256))]
buf278.group.device = cuda:0
buf278.group.iteration = (1310720, 1)
buf278.sizes = ([8, 640, 256], [])
class buf278_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_18', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_686', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf276', get_index_3)
        constant = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_55', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_55', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf275', get_index_6)
        constant_1 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_55', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_154', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf278', get_index_9, mul_6, None)
        return store


buf279: ExternKernelSchedulerNode(FallbackKernel)
buf279.writes = [StarDep(name='buf279')]
buf279.unmet_dependencies = [StarDep(name='buf278')]
buf279.met_dependencies = [StarDep(name='primals_19'), StarDep(name='relu_14')]
buf279.node.kernel = aten.convolution_backward


buf280: ExternKernelSchedulerNode(MultiOutput)
buf280.writes = [StarDep(name='buf280')]
buf280.unmet_dependencies = [StarDep(name='buf279')]
buf280.met_dependencies = []
buf280.node.kernel = None


buf281: ExternKernelSchedulerNode(MultiOutput)
buf281.writes = [StarDep(name='buf281')]
buf281.unmet_dependencies = [StarDep(name='buf279')]
buf281.met_dependencies = []
buf281.node.kernel = None


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = 
    [   MemoryDep(name='buf282', index=c0, size=(160, 2048)),
        MemoryDep(name='buf282', index=c0, size=(160,))]
buf282.unmet_dependencies = [MemoryDep(name='buf280', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf282.met_dependencies = [MemoryDep(name='relu_14', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf282.group.device = cuda:0
buf282.group.iteration = (160, 2048)
buf282.sizes = ([160], [8, 256])
class buf282_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf280', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf282', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = 
    [   MemoryDep(name='buf283', index=c0, size=(160, 2048)),
        MemoryDep(name='buf283', index=c0, size=(160,))]
buf283.unmet_dependencies = [MemoryDep(name='buf280', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf283.met_dependencies = 
    [   MemoryDep(name='convolution_17', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_14', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_698', index=c0, size=(160, 2048))]
buf283.group.device = cuda:0
buf283.group.iteration = (160, 2048)
buf283.sizes = ([160], [8, 256])
class buf283_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf280', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_17', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_698', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf283', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf284: SchedulerNode(ComputedBuffer)
buf284.writes = [MemoryDep(name='buf284', index=c0, size=(160,))]
buf284.unmet_dependencies = [MemoryDep(name='buf283', index=c0, size=(160,))]
buf284.met_dependencies = [MemoryDep(name='squeeze_52', index=c0, size=(160,))]
buf284.group.device = cuda:0
buf284.group.iteration = (160, 1)
buf284.sizes = ([160], [])
class buf284_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_52', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf284', get_index_2, mul, None)
        return store


buf285: SchedulerNode(ComputedBuffer)
buf285.writes = [MemoryDep(name='buf285', index=c0, size=(327680,))]
buf285.unmet_dependencies = 
    [   MemoryDep(name='buf280', index=c0, size=(327680,)),
        MemoryDep(name='buf282', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf283', index=c1, size=(8, 160, 256))]
buf285.met_dependencies = 
    [   MemoryDep(name='convolution_17', index=c0, size=(327680,)),
        MemoryDep(name='primals_149', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_14', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_52', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_698', index=c1, size=(8, 160, 256))]
buf285.group.device = cuda:0
buf285.group.iteration = (327680, 1)
buf285.sizes = ([8, 160, 256], [])
class buf285_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf280', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_17', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_698', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf283', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_52', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_52', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf282', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_52', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_149', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf285', get_index_10, mul_6, None)
        return store


buf286: ExternKernelSchedulerNode(FallbackKernel)
buf286.writes = [StarDep(name='buf286')]
buf286.unmet_dependencies = [StarDep(name='buf285')]
buf286.met_dependencies = [StarDep(name='primals_18'), StarDep(name='relu_13')]
buf286.node.kernel = aten.convolution_backward


buf287: ExternKernelSchedulerNode(MultiOutput)
buf287.writes = [StarDep(name='buf287')]
buf287.unmet_dependencies = [StarDep(name='buf286')]
buf287.met_dependencies = []
buf287.node.kernel = None


buf288: ExternKernelSchedulerNode(MultiOutput)
buf288.writes = [StarDep(name='buf288')]
buf288.unmet_dependencies = [StarDep(name='buf286')]
buf288.met_dependencies = []
buf288.node.kernel = None


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = 
    [   MemoryDep(name='buf289', index=c0, size=(160, 2048)),
        MemoryDep(name='buf289', index=c0, size=(160,))]
buf289.unmet_dependencies = [MemoryDep(name='buf287', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf289.met_dependencies = [MemoryDep(name='relu_13', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf289.group.device = cuda:0
buf289.group.iteration = (160, 2048)
buf289.sizes = ([160], [8, 256])
class buf289_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf287', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf289', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf290: SchedulerNode(ComputedBuffer)
buf290.writes = 
    [   MemoryDep(name='buf290', index=c0, size=(160, 2048)),
        MemoryDep(name='buf290', index=c0, size=(160,))]
buf290.unmet_dependencies = [MemoryDep(name='buf287', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf290.met_dependencies = 
    [   MemoryDep(name='convolution_16', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_13', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_710', index=c0, size=(160, 2048))]
buf290.group.device = cuda:0
buf290.group.iteration = (160, 2048)
buf290.sizes = ([160], [8, 256])
class buf290_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf287', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_16', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_710', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf290', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = [MemoryDep(name='buf291', index=c0, size=(160,))]
buf291.unmet_dependencies = [MemoryDep(name='buf290', index=c0, size=(160,))]
buf291.met_dependencies = [MemoryDep(name='squeeze_49', index=c0, size=(160,))]
buf291.group.device = cuda:0
buf291.group.iteration = (160, 1)
buf291.sizes = ([160], [])
class buf291_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_49', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf291', get_index_2, mul, None)
        return store


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = [MemoryDep(name='buf292', index=c0, size=(327680,))]
buf292.unmet_dependencies = 
    [   MemoryDep(name='buf287', index=c0, size=(327680,)),
        MemoryDep(name='buf289', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf290', index=c1, size=(8, 160, 256))]
buf292.met_dependencies = 
    [   MemoryDep(name='convolution_16', index=c0, size=(327680,)),
        MemoryDep(name='primals_144', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_13', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_49', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_710', index=c1, size=(8, 160, 256))]
buf292.group.device = cuda:0
buf292.group.iteration = (327680, 1)
buf292.sizes = ([8, 160, 256], [])
class buf292_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf287', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_16', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_710', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf290', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_49', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_49', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf289', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_49', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_144', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf292', get_index_10, mul_6, None)
        return store


buf293: ExternKernelSchedulerNode(FallbackKernel)
buf293.writes = [StarDep(name='buf293')]
buf293.unmet_dependencies = [StarDep(name='buf292')]
buf293.met_dependencies = [StarDep(name='primals_17'), StarDep(name='relu_12')]
buf293.node.kernel = aten.convolution_backward


buf294: ExternKernelSchedulerNode(MultiOutput)
buf294.writes = [StarDep(name='buf294')]
buf294.unmet_dependencies = [StarDep(name='buf293')]
buf294.met_dependencies = []
buf294.node.kernel = None


buf295: ExternKernelSchedulerNode(MultiOutput)
buf295.writes = [StarDep(name='buf295')]
buf295.unmet_dependencies = [StarDep(name='buf293')]
buf295.met_dependencies = []
buf295.node.kernel = None


buf296: SchedulerNode(ComputedBuffer)
buf296.writes = 
    [   MemoryDep(name='buf296', index=c0, size=(640, 2048)),
        MemoryDep(name='buf296', index=c0, size=(640,))]
buf296.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf294', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf296.met_dependencies = [MemoryDep(name='relu_12', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf296.group.device = cuda:0
buf296.group.iteration = (640, 2048)
buf296.sizes = ([640], [8, 256])
class buf296_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_12', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf296', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf297: SchedulerNode(ComputedBuffer)
buf297.writes = 
    [   MemoryDep(name='buf297', index=c0, size=(640, 2048)),
        MemoryDep(name='buf297', index=c0, size=(640,))]
buf297.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf294', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf297.met_dependencies = 
    [   MemoryDep(name='convolution_15', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='relu_12', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_722', index=c0, size=(640, 2048))]
buf297.group.device = cuda:0
buf297.group.iteration = (640, 2048)
buf297.sizes = ([640], [8, 256])
class buf297_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_12', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_15', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_722', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf297', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = [MemoryDep(name='buf298', index=c0, size=(1310720,))]
buf298.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(1310720,)),
        MemoryDep(name='buf294', index=c0, size=(1310720,)),
        MemoryDep(name='buf296', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf297', index=c1, size=(8, 640, 256))]
buf298.met_dependencies = 
    [   MemoryDep(name='convolution_15', index=c0, size=(1310720,)),
        MemoryDep(name='primals_139', index=c1, size=(8, 640, 256)),
        MemoryDep(name='relu_12', index=c0, size=(1310720,)),
        MemoryDep(name='squeeze_46', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_722', index=c1, size=(8, 640, 256))]
buf298.group.device = cuda:0
buf298.group.iteration = (1310720, 1)
buf298.sizes = ([8, 640, 256], [])
class buf298_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_12', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_15', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_722', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf297', get_index_5)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_46', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_46', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf296', get_index_8)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_46', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_139', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf298', get_index_11, mul_6, None)
        return store


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = [MemoryDep(name='buf299', index=c0, size=(640,))]
buf299.unmet_dependencies = [MemoryDep(name='buf297', index=c0, size=(640,))]
buf299.met_dependencies = [MemoryDep(name='squeeze_46', index=c0, size=(640,))]
buf299.group.device = cuda:0
buf299.group.iteration = (640, 1)
buf299.sizes = ([640], [])
class buf299_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_46', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf299', get_index_2, mul, None)
        return store


buf300: ExternKernelSchedulerNode(FallbackKernel)
buf300.writes = [StarDep(name='buf300')]
buf300.unmet_dependencies = [StarDep(name='buf298')]
buf300.met_dependencies = [StarDep(name='primals_16'), StarDep(name='relu_11')]
buf300.node.kernel = aten.convolution_backward


buf301: ExternKernelSchedulerNode(MultiOutput)
buf301.writes = [StarDep(name='buf301')]
buf301.unmet_dependencies = [StarDep(name='buf300')]
buf301.met_dependencies = []
buf301.node.kernel = None


buf302: ExternKernelSchedulerNode(MultiOutput)
buf302.writes = [StarDep(name='buf302')]
buf302.unmet_dependencies = [StarDep(name='buf300')]
buf302.met_dependencies = []
buf302.node.kernel = None


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = 
    [   MemoryDep(name='buf303', index=c0, size=(160, 2048)),
        MemoryDep(name='buf303', index=c0, size=(160,))]
buf303.unmet_dependencies = [MemoryDep(name='buf301', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf303.met_dependencies = [MemoryDep(name='relu_11', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf303.group.device = cuda:0
buf303.group.iteration = (160, 2048)
buf303.sizes = ([160], [8, 256])
class buf303_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf301', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf303', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = 
    [   MemoryDep(name='buf304', index=c0, size=(160, 2048)),
        MemoryDep(name='buf304', index=c0, size=(160,))]
buf304.unmet_dependencies = [MemoryDep(name='buf301', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf304.met_dependencies = 
    [   MemoryDep(name='convolution_14', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_11', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_734', index=c0, size=(160, 2048))]
buf304.group.device = cuda:0
buf304.group.iteration = (160, 2048)
buf304.sizes = ([160], [8, 256])
class buf304_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf301', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_14', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_734', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf304', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = [MemoryDep(name='buf305', index=c0, size=(160,))]
buf305.unmet_dependencies = [MemoryDep(name='buf304', index=c0, size=(160,))]
buf305.met_dependencies = [MemoryDep(name='squeeze_43', index=c0, size=(160,))]
buf305.group.device = cuda:0
buf305.group.iteration = (160, 1)
buf305.sizes = ([160], [])
class buf305_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_43', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf305', get_index_2, mul, None)
        return store


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = [MemoryDep(name='buf306', index=c0, size=(327680,))]
buf306.unmet_dependencies = 
    [   MemoryDep(name='buf301', index=c0, size=(327680,)),
        MemoryDep(name='buf303', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf304', index=c1, size=(8, 160, 256))]
buf306.met_dependencies = 
    [   MemoryDep(name='convolution_14', index=c0, size=(327680,)),
        MemoryDep(name='primals_134', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_11', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_43', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_734', index=c1, size=(8, 160, 256))]
buf306.group.device = cuda:0
buf306.group.iteration = (327680, 1)
buf306.sizes = ([8, 160, 256], [])
class buf306_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf301', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_14', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_734', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf304', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_43', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_43', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf303', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_43', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_134', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf306', get_index_10, mul_6, None)
        return store


buf307: ExternKernelSchedulerNode(FallbackKernel)
buf307.writes = [StarDep(name='buf307')]
buf307.unmet_dependencies = [StarDep(name='buf306')]
buf307.met_dependencies = [StarDep(name='primals_15'), StarDep(name='relu_10')]
buf307.node.kernel = aten.convolution_backward


buf308: ExternKernelSchedulerNode(MultiOutput)
buf308.writes = [StarDep(name='buf308')]
buf308.unmet_dependencies = [StarDep(name='buf307')]
buf308.met_dependencies = []
buf308.node.kernel = None


buf309: ExternKernelSchedulerNode(MultiOutput)
buf309.writes = [StarDep(name='buf309')]
buf309.unmet_dependencies = [StarDep(name='buf307')]
buf309.met_dependencies = []
buf309.node.kernel = None


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = 
    [   MemoryDep(name='buf310', index=c0, size=(160, 2048)),
        MemoryDep(name='buf310', index=c0, size=(160,))]
buf310.unmet_dependencies = [MemoryDep(name='buf308', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf310.met_dependencies = [MemoryDep(name='relu_10', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf310.group.device = cuda:0
buf310.group.iteration = (160, 2048)
buf310.sizes = ([160], [8, 256])
class buf310_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf310', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = 
    [   MemoryDep(name='buf311', index=c0, size=(160, 2048)),
        MemoryDep(name='buf311', index=c0, size=(160,))]
buf311.unmet_dependencies = [MemoryDep(name='buf308', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf311.met_dependencies = 
    [   MemoryDep(name='convolution_13', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_10', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_746', index=c0, size=(160, 2048))]
buf311.group.device = cuda:0
buf311.group.iteration = (160, 2048)
buf311.sizes = ([160], [8, 256])
class buf311_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_13', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_746', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf311', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf312: SchedulerNode(ComputedBuffer)
buf312.writes = [MemoryDep(name='buf312', index=c0, size=(160,))]
buf312.unmet_dependencies = [MemoryDep(name='buf311', index=c0, size=(160,))]
buf312.met_dependencies = [MemoryDep(name='squeeze_40', index=c0, size=(160,))]
buf312.group.device = cuda:0
buf312.group.iteration = (160, 1)
buf312.sizes = ([160], [])
class buf312_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_40', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf312', get_index_2, mul, None)
        return store


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep(name='buf313', index=c0, size=(327680,))]
buf313.unmet_dependencies = 
    [   MemoryDep(name='buf308', index=c0, size=(327680,)),
        MemoryDep(name='buf310', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf311', index=c1, size=(8, 160, 256))]
buf313.met_dependencies = 
    [   MemoryDep(name='convolution_13', index=c0, size=(327680,)),
        MemoryDep(name='primals_129', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_10', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_40', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_746', index=c1, size=(8, 160, 256))]
buf313.group.device = cuda:0
buf313.group.iteration = (327680, 1)
buf313.sizes = ([8, 160, 256], [])
class buf313_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_13', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_746', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf311', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_40', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_40', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf310', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_40', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_129', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf313', get_index_10, mul_6, None)
        return store


buf314: ExternKernelSchedulerNode(FallbackKernel)
buf314.writes = [StarDep(name='buf314')]
buf314.unmet_dependencies = [StarDep(name='buf313')]
buf314.met_dependencies = [StarDep(name='primals_14'), StarDep(name='relu_9')]
buf314.node.kernel = aten.convolution_backward


buf315: ExternKernelSchedulerNode(MultiOutput)
buf315.writes = [StarDep(name='buf315')]
buf315.unmet_dependencies = [StarDep(name='buf314')]
buf315.met_dependencies = []
buf315.node.kernel = None


buf316: ExternKernelSchedulerNode(MultiOutput)
buf316.writes = [StarDep(name='buf316')]
buf316.unmet_dependencies = [StarDep(name='buf314')]
buf316.met_dependencies = []
buf316.node.kernel = None


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = [MemoryDep(name='buf317', index=c0, size=(1310720,))]
buf317.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(1310720,)),
        MemoryDep(name='buf294', index=c0, size=(1310720,)),
        MemoryDep(name='buf315', index=c0, size=(1310720,))]
buf317.met_dependencies = 
    [   MemoryDep(name='relu_12', index=c0, size=(1310720,)),
        MemoryDep(name='relu_9', index=c0, size=(1310720,))]
buf317.group.device = cuda:0
buf317.group.iteration = (1310720, 1)
buf317.sizes = ([1310720], [])
class buf317_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_9', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_12', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf274', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf294', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf315', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, where_1, None)
        return store


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = 
    [   MemoryDep(name='buf318', index=c0, size=(640, 2048)),
        MemoryDep(name='buf318', index=c0, size=(640,))]
buf318.unmet_dependencies = [MemoryDep(name='buf317', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf318.met_dependencies = []
buf318.group.device = cuda:0
buf318.group.iteration = (640, 2048)
buf318.sizes = ([640], [8, 256])
class buf318_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf318', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = 
    [   MemoryDep(name='buf319', index=c0, size=(640, 2048)),
        MemoryDep(name='buf319', index=c0, size=(640,))]
buf319.unmet_dependencies = [MemoryDep(name='buf317', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf319.met_dependencies = 
    [   MemoryDep(name='convolution_12', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_758', index=c0, size=(640, 2048))]
buf319.group.device = cuda:0
buf319.group.iteration = (640, 2048)
buf319.sizes = ([640], [8, 256])
class buf319_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_758', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf319', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf320: SchedulerNode(ComputedBuffer)
buf320.writes = [MemoryDep(name='buf320', index=c0, size=(640,))]
buf320.unmet_dependencies = [MemoryDep(name='buf319', index=c0, size=(640,))]
buf320.met_dependencies = [MemoryDep(name='squeeze_37', index=c0, size=(640,))]
buf320.group.device = cuda:0
buf320.group.iteration = (640, 1)
buf320.sizes = ([640], [])
class buf320_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_37', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf320', get_index_2, mul, None)
        return store


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = [MemoryDep(name='buf321', index=c0, size=(1310720,))]
buf321.unmet_dependencies = 
    [   MemoryDep(name='buf317', index=c0, size=(1310720,)),
        MemoryDep(name='buf318', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf319', index=c1, size=(8, 640, 256))]
buf321.met_dependencies = 
    [   MemoryDep(name='convolution_12', index=c0, size=(1310720,)),
        MemoryDep(name='primals_124', index=c1, size=(8, 640, 256)),
        MemoryDep(name='squeeze_37', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_758', index=c1, size=(8, 640, 256))]
buf321.group.device = cuda:0
buf321.group.iteration = (1310720, 1)
buf321.sizes = ([8, 640, 256], [])
class buf321_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_758', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf319', get_index_3)
        constant = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_37', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_37', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf318', get_index_6)
        constant_1 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_37', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_124', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf321', get_index_9, mul_6, None)
        return store


buf322: ExternKernelSchedulerNode(FallbackKernel)
buf322.writes = [StarDep(name='buf322')]
buf322.unmet_dependencies = [StarDep(name='buf321')]
buf322.met_dependencies = [StarDep(name='primals_13'), StarDep(name='relu_6')]
buf322.node.kernel = aten.convolution_backward


buf323: ExternKernelSchedulerNode(MultiOutput)
buf323.writes = [StarDep(name='buf323')]
buf323.unmet_dependencies = [StarDep(name='buf322')]
buf323.met_dependencies = []
buf323.node.kernel = None


buf324: ExternKernelSchedulerNode(MultiOutput)
buf324.writes = [StarDep(name='buf324')]
buf324.unmet_dependencies = [StarDep(name='buf322')]
buf324.met_dependencies = []
buf324.node.kernel = None


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = 
    [   MemoryDep(name='buf325', index=c0, size=(640, 2048)),
        MemoryDep(name='buf325', index=c0, size=(640,))]
buf325.unmet_dependencies = [MemoryDep(name='buf317', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf325.met_dependencies = 
    [   MemoryDep(name='convolution_11', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='unsqueeze_770', index=c0, size=(640, 2048))]
buf325.group.device = cuda:0
buf325.group.iteration = (640, 2048)
buf325.sizes = ([640], [8, 256])
class buf325_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_11', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_770', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf325', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf326: SchedulerNode(ComputedBuffer)
buf326.writes = [MemoryDep(name='buf326', index=c0, size=(640,))]
buf326.unmet_dependencies = [MemoryDep(name='buf325', index=c0, size=(640,))]
buf326.met_dependencies = [MemoryDep(name='squeeze_34', index=c0, size=(640,))]
buf326.group.device = cuda:0
buf326.group.iteration = (640, 1)
buf326.sizes = ([640], [])
class buf326_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_34', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf326', get_index_2, mul, None)
        return store


buf327: SchedulerNode(ComputedBuffer)
buf327.writes = [MemoryDep(name='buf327', index=c0, size=(1310720,))]
buf327.unmet_dependencies = 
    [   MemoryDep(name='buf317', index=c0, size=(1310720,)),
        MemoryDep(name='buf318', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf325', index=c1, size=(8, 640, 256))]
buf327.met_dependencies = 
    [   MemoryDep(name='convolution_11', index=c0, size=(1310720,)),
        MemoryDep(name='primals_119', index=c1, size=(8, 640, 256)),
        MemoryDep(name='squeeze_34', index=c1, size=(8, 640, 256)),
        MemoryDep(name='unsqueeze_770', index=c1, size=(8, 640, 256))]
buf327.group.device = cuda:0
buf327.group.iteration = (1310720, 1)
buf327.sizes = ([8, 640, 256], [])
class buf327_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_11', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_770', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf325', get_index_3)
        constant = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_34', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_34', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf318', get_index_6)
        constant_1 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_34', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_119', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf327', get_index_9, mul_6, None)
        return store


buf328: ExternKernelSchedulerNode(FallbackKernel)
buf328.writes = [StarDep(name='buf328')]
buf328.unmet_dependencies = [StarDep(name='buf327')]
buf328.met_dependencies = [StarDep(name='primals_12'), StarDep(name='relu_8')]
buf328.node.kernel = aten.convolution_backward


buf329: ExternKernelSchedulerNode(MultiOutput)
buf329.writes = [StarDep(name='buf329')]
buf329.unmet_dependencies = [StarDep(name='buf328')]
buf329.met_dependencies = []
buf329.node.kernel = None


buf330: ExternKernelSchedulerNode(MultiOutput)
buf330.writes = [StarDep(name='buf330')]
buf330.unmet_dependencies = [StarDep(name='buf328')]
buf330.met_dependencies = []
buf330.node.kernel = None


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = 
    [   MemoryDep(name='buf331', index=c0, size=(160, 2048)),
        MemoryDep(name='buf331', index=c0, size=(160,))]
buf331.unmet_dependencies = [MemoryDep(name='buf329', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf331.met_dependencies = [MemoryDep(name='relu_8', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf331.group.device = cuda:0
buf331.group.iteration = (160, 2048)
buf331.sizes = ([160], [8, 256])
class buf331_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf329', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf331', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf332: SchedulerNode(ComputedBuffer)
buf332.writes = 
    [   MemoryDep(name='buf332', index=c0, size=(160, 2048)),
        MemoryDep(name='buf332', index=c0, size=(160,))]
buf332.unmet_dependencies = [MemoryDep(name='buf329', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf332.met_dependencies = 
    [   MemoryDep(name='convolution_10', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='relu_8', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='unsqueeze_782', index=c0, size=(160, 2048))]
buf332.group.device = cuda:0
buf332.group.iteration = (160, 2048)
buf332.sizes = ([160], [8, 256])
class buf332_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf329', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_10', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_782', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf332', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf333: SchedulerNode(ComputedBuffer)
buf333.writes = [MemoryDep(name='buf333', index=c0, size=(160,))]
buf333.unmet_dependencies = [MemoryDep(name='buf332', index=c0, size=(160,))]
buf333.met_dependencies = [MemoryDep(name='squeeze_31', index=c0, size=(160,))]
buf333.group.device = cuda:0
buf333.group.iteration = (160, 1)
buf333.sizes = ([160], [])
class buf333_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_31', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, mul, None)
        return store


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = [MemoryDep(name='buf334', index=c0, size=(327680,))]
buf334.unmet_dependencies = 
    [   MemoryDep(name='buf329', index=c0, size=(327680,)),
        MemoryDep(name='buf331', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf332', index=c1, size=(8, 160, 256))]
buf334.met_dependencies = 
    [   MemoryDep(name='convolution_10', index=c0, size=(327680,)),
        MemoryDep(name='primals_114', index=c1, size=(8, 160, 256)),
        MemoryDep(name='relu_8', index=c0, size=(327680,)),
        MemoryDep(name='squeeze_31', index=c1, size=(8, 160, 256)),
        MemoryDep(name='unsqueeze_782', index=c1, size=(8, 160, 256))]
buf334.group.device = cuda:0
buf334.group.iteration = (327680, 1)
buf334.sizes = ([8, 160, 256], [])
class buf334_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf329', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_10', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_782', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf332', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_31', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_31', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf331', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_31', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_114', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf334', get_index_10, mul_6, None)
        return store


buf335: ExternKernelSchedulerNode(FallbackKernel)
buf335.writes = [StarDep(name='buf335')]
buf335.unmet_dependencies = [StarDep(name='buf334')]
buf335.met_dependencies = [StarDep(name='primals_11'), StarDep(name='relu_7')]
buf335.node.kernel = aten.convolution_backward


buf336: ExternKernelSchedulerNode(MultiOutput)
buf336.writes = [StarDep(name='buf336')]
buf336.unmet_dependencies = [StarDep(name='buf335')]
buf336.met_dependencies = []
buf336.node.kernel = None


buf337: ExternKernelSchedulerNode(MultiOutput)
buf337.writes = [StarDep(name='buf337')]
buf337.unmet_dependencies = [StarDep(name='buf335')]
buf337.met_dependencies = []
buf337.node.kernel = None


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = 
    [   MemoryDep(name='buf338', index=c0, size=(160, 8192)),
        MemoryDep(name='buf338', index=c0, size=(160,))]
buf338.unmet_dependencies = [MemoryDep(name='buf336', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024))]
buf338.met_dependencies = [MemoryDep(name='relu_7', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024))]
buf338.group.device = cuda:0
buf338.group.iteration = (160, 8192)
buf338.sizes = ([160], [8, 1024])
class buf338_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 1024}
    index0 = 1024*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf338', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = 
    [   MemoryDep(name='buf339', index=c0, size=(160, 8192)),
        MemoryDep(name='buf339', index=c0, size=(160,))]
buf339.unmet_dependencies = [MemoryDep(name='buf336', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024))]
buf339.met_dependencies = 
    [   MemoryDep(name='convolution_9', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024)),
        MemoryDep(name='relu_7', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024)),
        MemoryDep(name='unsqueeze_794', index=c0, size=(160, 8192))]
buf339.group.device = cuda:0
buf339.group.iteration = (160, 8192)
buf339.sizes = ([160], [8, 1024])
class buf339_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 1024}
    index0 = 1024*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_794', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf339', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf340: SchedulerNode(ComputedBuffer)
buf340.writes = [MemoryDep(name='buf340', index=c0, size=(160,))]
buf340.unmet_dependencies = [MemoryDep(name='buf339', index=c0, size=(160,))]
buf340.met_dependencies = [MemoryDep(name='squeeze_28', index=c0, size=(160,))]
buf340.group.device = cuda:0
buf340.group.iteration = (160, 1)
buf340.sizes = ([160], [])
class buf340_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_28', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf340', get_index_2, mul, None)
        return store


buf341: SchedulerNode(ComputedBuffer)
buf341.writes = [MemoryDep(name='buf341', index=c0, size=(1310720,))]
buf341.unmet_dependencies = 
    [   MemoryDep(name='buf336', index=c0, size=(1310720,)),
        MemoryDep(name='buf338', index=c1, size=(8, 160, 1024)),
        MemoryDep(name='buf339', index=c1, size=(8, 160, 1024))]
buf341.met_dependencies = 
    [   MemoryDep(name='convolution_9', index=c0, size=(1310720,)),
        MemoryDep(name='primals_109', index=c1, size=(8, 160, 1024)),
        MemoryDep(name='relu_7', index=c0, size=(1310720,)),
        MemoryDep(name='squeeze_28', index=c1, size=(8, 160, 1024)),
        MemoryDep(name='unsqueeze_794', index=c1, size=(8, 160, 1024))]
buf341.group.device = cuda:0
buf341.group.iteration = (1310720, 1)
buf341.sizes = ([8, 160, 1024], [])
class buf341_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 1024}
    index0 = 163840*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_794', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf339', get_index_4)
        constant_2 = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_28', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_28', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf338', get_index_7)
        constant_3 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_28', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_109', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf341', get_index_10, mul_6, None)
        return store


buf342: ExternKernelSchedulerNode(FallbackKernel)
buf342.writes = [StarDep(name='buf342')]
buf342.unmet_dependencies = [StarDep(name='buf341')]
buf342.met_dependencies = [StarDep(name='primals_10'), StarDep(name='relu_6')]
buf342.node.kernel = aten.convolution_backward


buf343: ExternKernelSchedulerNode(MultiOutput)
buf343.writes = [StarDep(name='buf343')]
buf343.unmet_dependencies = [StarDep(name='buf342')]
buf343.met_dependencies = []
buf343.node.kernel = None


buf344: ExternKernelSchedulerNode(MultiOutput)
buf344.writes = [StarDep(name='buf344')]
buf344.unmet_dependencies = [StarDep(name='buf342')]
buf344.met_dependencies = []
buf344.node.kernel = None


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = 
    [   MemoryDep(name='buf345', index=c0, size=(192, 8192)),
        MemoryDep(name='buf345', index=c0, size=(192,))]
buf345.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf343', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf345.met_dependencies = [MemoryDep(name='relu_6', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf345.group.device = cuda:0
buf345.group.iteration = (192, 8192)
buf345.sizes = ([192], [8, 1024])
class buf345_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_6', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf345', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf346: SchedulerNode(ComputedBuffer)
buf346.writes = 
    [   MemoryDep(name='buf346', index=c0, size=(192, 8192)),
        MemoryDep(name='buf346', index=c0, size=(192,))]
buf346.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf343', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf346.met_dependencies = 
    [   MemoryDep(name='convolution_8', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='relu_6', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='unsqueeze_806', index=c0, size=(192, 8192))]
buf346.group.device = cuda:0
buf346.group.iteration = (192, 8192)
buf346.sizes = ([192], [8, 1024])
class buf346_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_6', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_8', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_806', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf346', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = [MemoryDep(name='buf347', index=c0, size=(1572864,))]
buf347.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0, size=(1572864,)),
        MemoryDep(name='buf343', index=c0, size=(1572864,)),
        MemoryDep(name='buf345', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf346', index=c1, size=(8, 192, 1024))]
buf347.met_dependencies = 
    [   MemoryDep(name='convolution_8', index=c0, size=(1572864,)),
        MemoryDep(name='primals_104', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='relu_6', index=c0, size=(1572864,)),
        MemoryDep(name='squeeze_25', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='unsqueeze_806', index=c1, size=(8, 192, 1024))]
buf347.group.device = cuda:0
buf347.group.iteration = (1572864, 1)
buf347.sizes = ([8, 192, 1024], [])
class buf347_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_6', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_8', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_806', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf346', get_index_5)
        constant_2 = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_25', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_25', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf345', get_index_8)
        constant_3 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_25', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_104', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf347', get_index_11, mul_6, None)
        return store


buf348: SchedulerNode(ComputedBuffer)
buf348.writes = [MemoryDep(name='buf348', index=c0, size=(192,))]
buf348.unmet_dependencies = [MemoryDep(name='buf346', index=c0, size=(192,))]
buf348.met_dependencies = [MemoryDep(name='squeeze_25', index=c0, size=(192,))]
buf348.group.device = cuda:0
buf348.group.iteration = (192, 1)
buf348.sizes = ([192], [])
class buf348_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_25', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf348', get_index_2, mul, None)
        return store


buf349: ExternKernelSchedulerNode(FallbackKernel)
buf349.writes = [StarDep(name='buf349')]
buf349.unmet_dependencies = [StarDep(name='buf347')]
buf349.met_dependencies = [StarDep(name='primals_9'), StarDep(name='relu_5')]
buf349.node.kernel = aten.convolution_backward


buf350: ExternKernelSchedulerNode(MultiOutput)
buf350.writes = [StarDep(name='buf350')]
buf350.unmet_dependencies = [StarDep(name='buf349')]
buf350.met_dependencies = []
buf350.node.kernel = None


buf351: ExternKernelSchedulerNode(MultiOutput)
buf351.writes = [StarDep(name='buf351')]
buf351.unmet_dependencies = [StarDep(name='buf349')]
buf351.met_dependencies = []
buf351.node.kernel = None


buf352: SchedulerNode(ComputedBuffer)
buf352.writes = 
    [   MemoryDep(name='buf352', index=c0, size=(192, 8192)),
        MemoryDep(name='buf352', index=c0, size=(192,))]
buf352.unmet_dependencies = [MemoryDep(name='buf350', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf352.met_dependencies = [MemoryDep(name='relu_5', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf352.group.device = cuda:0
buf352.group.iteration = (192, 8192)
buf352.sizes = ([192], [8, 1024])
class buf352_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf350', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf352', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = 
    [   MemoryDep(name='buf353', index=c0, size=(192, 8192)),
        MemoryDep(name='buf353', index=c0, size=(192,))]
buf353.unmet_dependencies = [MemoryDep(name='buf350', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf353.met_dependencies = 
    [   MemoryDep(name='convolution_7', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='relu_5', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='unsqueeze_818', index=c0, size=(192, 8192))]
buf353.group.device = cuda:0
buf353.group.iteration = (192, 8192)
buf353.sizes = ([192], [8, 1024])
class buf353_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf350', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_7', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_818', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf353', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf354: SchedulerNode(ComputedBuffer)
buf354.writes = [MemoryDep(name='buf354', index=c0, size=(192,))]
buf354.unmet_dependencies = [MemoryDep(name='buf353', index=c0, size=(192,))]
buf354.met_dependencies = [MemoryDep(name='squeeze_22', index=c0, size=(192,))]
buf354.group.device = cuda:0
buf354.group.iteration = (192, 1)
buf354.sizes = ([192], [])
class buf354_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf354', get_index_2, mul, None)
        return store


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = [MemoryDep(name='buf355', index=c0, size=(1572864,))]
buf355.unmet_dependencies = 
    [   MemoryDep(name='buf350', index=c0, size=(1572864,)),
        MemoryDep(name='buf352', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf353', index=c1, size=(8, 192, 1024))]
buf355.met_dependencies = 
    [   MemoryDep(name='convolution_7', index=c0, size=(1572864,)),
        MemoryDep(name='primals_99', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='relu_5', index=c0, size=(1572864,)),
        MemoryDep(name='squeeze_22', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='unsqueeze_818', index=c1, size=(8, 192, 1024))]
buf355.group.device = cuda:0
buf355.group.iteration = (1572864, 1)
buf355.sizes = ([8, 192, 1024], [])
class buf355_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf350', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_7', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_818', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf353', get_index_4)
        constant_2 = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_22', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_22', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf352', get_index_7)
        constant_3 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_22', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_99', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf355', get_index_10, mul_6, None)
        return store


buf356: ExternKernelSchedulerNode(FallbackKernel)
buf356.writes = [StarDep(name='buf356')]
buf356.unmet_dependencies = [StarDep(name='buf355')]
buf356.met_dependencies = [StarDep(name='primals_8'), StarDep(name='relu_4')]
buf356.node.kernel = aten.convolution_backward


buf357: ExternKernelSchedulerNode(MultiOutput)
buf357.writes = [StarDep(name='buf357')]
buf357.unmet_dependencies = [StarDep(name='buf356')]
buf357.met_dependencies = []
buf357.node.kernel = None


buf358: ExternKernelSchedulerNode(MultiOutput)
buf358.writes = [StarDep(name='buf358')]
buf358.unmet_dependencies = [StarDep(name='buf356')]
buf358.met_dependencies = []
buf358.node.kernel = None


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(1572864,))]
buf359.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0, size=(1572864,)),
        MemoryDep(name='buf343', index=c0, size=(1572864,)),
        MemoryDep(name='buf357', index=c0, size=(1572864,))]
buf359.met_dependencies = 
    [   MemoryDep(name='relu_4', index=c0, size=(1572864,)),
        MemoryDep(name='relu_6', index=c0, size=(1572864,))]
buf359.group.device = cuda:0
buf359.group.iteration = (1572864, 1)
buf359.sizes = ([1572864], [])
class buf359_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_4', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_6', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf343', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf357', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf359', get_index_5, where_1, None)
        return store


buf360: SchedulerNode(ComputedBuffer)
buf360.writes = 
    [   MemoryDep(name='buf360', index=c0, size=(192, 8192)),
        MemoryDep(name='buf360', index=c0, size=(192,))]
buf360.unmet_dependencies = [MemoryDep(name='buf359', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf360.met_dependencies = []
buf360.group.device = cuda:0
buf360.group.iteration = (192, 8192)
buf360.sizes = ([192], [8, 1024])
class buf360_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf360', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf361: SchedulerNode(ComputedBuffer)
buf361.writes = 
    [   MemoryDep(name='buf361', index=c0, size=(192, 8192)),
        MemoryDep(name='buf361', index=c0, size=(192,))]
buf361.unmet_dependencies = [MemoryDep(name='buf359', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf361.met_dependencies = 
    [   MemoryDep(name='convolution_6', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='unsqueeze_830', index=c0, size=(192, 8192))]
buf361.group.device = cuda:0
buf361.group.iteration = (192, 8192)
buf361.sizes = ([192], [8, 1024])
class buf361_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_6', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_830', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf361', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = [MemoryDep(name='buf362', index=c0, size=(192,))]
buf362.unmet_dependencies = [MemoryDep(name='buf361', index=c0, size=(192,))]
buf362.met_dependencies = [MemoryDep(name='squeeze_19', index=c0, size=(192,))]
buf362.group.device = cuda:0
buf362.group.iteration = (192, 1)
buf362.sizes = ([192], [])
class buf362_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_19', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf362', get_index_2, mul, None)
        return store


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = [MemoryDep(name='buf363', index=c0, size=(1572864,))]
buf363.unmet_dependencies = 
    [   MemoryDep(name='buf359', index=c0, size=(1572864,)),
        MemoryDep(name='buf360', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf361', index=c1, size=(8, 192, 1024))]
buf363.met_dependencies = 
    [   MemoryDep(name='convolution_6', index=c0, size=(1572864,)),
        MemoryDep(name='primals_94', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='squeeze_19', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='unsqueeze_830', index=c1, size=(8, 192, 1024))]
buf363.group.device = cuda:0
buf363.group.iteration = (1572864, 1)
buf363.sizes = ([8, 192, 1024], [])
class buf363_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_6', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_830', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf361', get_index_3)
        constant = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_19', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_19', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf360', get_index_6)
        constant_1 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_19', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_94', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf363', get_index_9, mul_6, None)
        return store


buf364: ExternKernelSchedulerNode(FallbackKernel)
buf364.writes = [StarDep(name='buf364')]
buf364.unmet_dependencies = [StarDep(name='buf363')]
buf364.met_dependencies = [StarDep(name='primals_7'), StarDep(name='relu_2')]
buf364.node.kernel = aten.convolution_backward


buf365: ExternKernelSchedulerNode(MultiOutput)
buf365.writes = [StarDep(name='buf365')]
buf365.unmet_dependencies = [StarDep(name='buf364')]
buf365.met_dependencies = []
buf365.node.kernel = None


buf366: ExternKernelSchedulerNode(MultiOutput)
buf366.writes = [StarDep(name='buf366')]
buf366.unmet_dependencies = [StarDep(name='buf364')]
buf366.met_dependencies = []
buf366.node.kernel = None


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = 
    [   MemoryDep(name='buf367', index=c0, size=(192, 8192)),
        MemoryDep(name='buf367', index=c0, size=(192,))]
buf367.unmet_dependencies = [MemoryDep(name='buf359', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf367.met_dependencies = 
    [   MemoryDep(name='convolution_5', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='unsqueeze_842', index=c0, size=(192, 8192))]
buf367.group.device = cuda:0
buf367.group.iteration = (192, 8192)
buf367.sizes = ([192], [8, 1024])
class buf367_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_5', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_842', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf367', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf368: SchedulerNode(ComputedBuffer)
buf368.writes = [MemoryDep(name='buf368', index=c0, size=(192,))]
buf368.unmet_dependencies = [MemoryDep(name='buf367', index=c0, size=(192,))]
buf368.met_dependencies = [MemoryDep(name='squeeze_16', index=c0, size=(192,))]
buf368.group.device = cuda:0
buf368.group.iteration = (192, 1)
buf368.sizes = ([192], [])
class buf368_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf368', get_index_2, mul, None)
        return store


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = [MemoryDep(name='buf369', index=c0, size=(1572864,))]
buf369.unmet_dependencies = 
    [   MemoryDep(name='buf359', index=c0, size=(1572864,)),
        MemoryDep(name='buf360', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf367', index=c1, size=(8, 192, 1024))]
buf369.met_dependencies = 
    [   MemoryDep(name='convolution_5', index=c0, size=(1572864,)),
        MemoryDep(name='primals_89', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='squeeze_16', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='unsqueeze_842', index=c1, size=(8, 192, 1024))]
buf369.group.device = cuda:0
buf369.group.iteration = (1572864, 1)
buf369.sizes = ([8, 192, 1024], [])
class buf369_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_5', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_842', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf367', get_index_3)
        constant = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_16', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_16', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf360', get_index_6)
        constant_1 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_16', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_89', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf369', get_index_9, mul_6, None)
        return store


buf370: ExternKernelSchedulerNode(FallbackKernel)
buf370.writes = [StarDep(name='buf370')]
buf370.unmet_dependencies = [StarDep(name='buf369')]
buf370.met_dependencies = [StarDep(name='primals_6'), StarDep(name='relu_3')]
buf370.node.kernel = aten.convolution_backward


buf371: ExternKernelSchedulerNode(MultiOutput)
buf371.writes = [StarDep(name='buf371')]
buf371.unmet_dependencies = [StarDep(name='buf370')]
buf371.met_dependencies = []
buf371.node.kernel = None


buf372: ExternKernelSchedulerNode(MultiOutput)
buf372.writes = [StarDep(name='buf372')]
buf372.unmet_dependencies = [StarDep(name='buf370')]
buf372.met_dependencies = []
buf372.node.kernel = None


buf373: SchedulerNode(ComputedBuffer)
buf373.writes = 
    [   MemoryDep(name='buf373', index=c0, size=(192, 8192)),
        MemoryDep(name='buf373', index=c0, size=(192,))]
buf373.unmet_dependencies = [MemoryDep(name='buf371', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf373.met_dependencies = [MemoryDep(name='relu_3', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf373.group.device = cuda:0
buf373.group.iteration = (192, 8192)
buf373.sizes = ([192], [8, 1024])
class buf373_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf371', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf373', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = 
    [   MemoryDep(name='buf374', index=c0, size=(192, 8192)),
        MemoryDep(name='buf374', index=c0, size=(192,))]
buf374.unmet_dependencies = [MemoryDep(name='buf371', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf374.met_dependencies = 
    [   MemoryDep(name='convolution_4', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='relu_3', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='unsqueeze_854', index=c0, size=(192, 8192))]
buf374.group.device = cuda:0
buf374.group.iteration = (192, 8192)
buf374.sizes = ([192], [8, 1024])
class buf374_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf371', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_854', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf374', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf375: SchedulerNode(ComputedBuffer)
buf375.writes = [MemoryDep(name='buf375', index=c0, size=(192,))]
buf375.unmet_dependencies = [MemoryDep(name='buf374', index=c0, size=(192,))]
buf375.met_dependencies = [MemoryDep(name='squeeze_13', index=c0, size=(192,))]
buf375.group.device = cuda:0
buf375.group.iteration = (192, 1)
buf375.sizes = ([192], [])
class buf375_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_13', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf375', get_index_2, mul, None)
        return store


buf376: SchedulerNode(ComputedBuffer)
buf376.writes = [MemoryDep(name='buf376', index=c0, size=(1572864,))]
buf376.unmet_dependencies = 
    [   MemoryDep(name='buf371', index=c0, size=(1572864,)),
        MemoryDep(name='buf373', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf374', index=c1, size=(8, 192, 1024))]
buf376.met_dependencies = 
    [   MemoryDep(name='convolution_4', index=c0, size=(1572864,)),
        MemoryDep(name='primals_84', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='relu_3', index=c0, size=(1572864,)),
        MemoryDep(name='squeeze_13', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='unsqueeze_854', index=c1, size=(8, 192, 1024))]
buf376.group.device = cuda:0
buf376.group.iteration = (1572864, 1)
buf376.sizes = ([8, 192, 1024], [])
class buf376_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf371', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_854', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf374', get_index_4)
        constant_2 = ops.constant(0.0001220703125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_13', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_13', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf373', get_index_7)
        constant_3 = ops.constant(0.0001220703125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_13', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_84', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf376', get_index_10, mul_6, None)
        return store


buf377: ExternKernelSchedulerNode(FallbackKernel)
buf377.writes = [StarDep(name='buf377')]
buf377.unmet_dependencies = [StarDep(name='buf376')]
buf377.met_dependencies = [StarDep(name='primals_5'), StarDep(name='relu_2')]
buf377.node.kernel = aten.convolution_backward


buf378: ExternKernelSchedulerNode(MultiOutput)
buf378.writes = [StarDep(name='buf378')]
buf378.unmet_dependencies = [StarDep(name='buf377')]
buf378.met_dependencies = []
buf378.node.kernel = None


buf379: ExternKernelSchedulerNode(MultiOutput)
buf379.writes = [StarDep(name='buf379')]
buf379.unmet_dependencies = [StarDep(name='buf377')]
buf379.met_dependencies = []
buf379.node.kernel = None


buf380: SchedulerNode(ComputedBuffer)
buf380.writes = 
    [   MemoryDep(name='buf380', index=c0, size=(512, 8192)),
        MemoryDep(name='buf380', index=c0, size=(512,))]
buf380.unmet_dependencies = 
    [   MemoryDep(name='buf365', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf378', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf380.met_dependencies = [   MemoryDep(name='relu_2', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf380.group.device = cuda:0
buf380.group.iteration = (512, 8192)
buf380.sizes = ([4, 128], [8192])
class buf380_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf378', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf380', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf381: SchedulerNode(ComputedBuffer)
buf381.writes = 
    [   MemoryDep(name='buf381', index=c0, size=(128, 4)),
        MemoryDep(name='buf381', index=c0, size=(128,))]
buf381.unmet_dependencies = [MemoryDep(name='buf380', index=c0 + 128*c1, size=(128, 4))]
buf381.met_dependencies = []
buf381.group.device = cuda:0
buf381.group.iteration = (128, 4)
buf381.sizes = ([128], [4])
class buf381_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf381', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf382: SchedulerNode(ComputedBuffer)
buf382.writes = 
    [   MemoryDep(name='buf382', index=c0, size=(512, 8192)),
        MemoryDep(name='buf382', index=c0, size=(512,))]
buf382.unmet_dependencies = 
    [   MemoryDep(name='buf365', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf378', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf382.met_dependencies = 
    [   MemoryDep(name='convolution_3', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='relu_2', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='unsqueeze_866', index=c1, size=(4, 128, 8192))]
buf382.group.device = cuda:0
buf382.group.iteration = (512, 8192)
buf382.sizes = ([4, 128], [8192])
class buf382_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf378', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_3', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_866', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf382', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf383: SchedulerNode(ComputedBuffer)
buf383.writes = 
    [   MemoryDep(name='buf383', index=c0, size=(128, 4)),
        MemoryDep(name='buf383', index=c0, size=(128,))]
buf383.unmet_dependencies = [MemoryDep(name='buf382', index=c0 + 128*c1, size=(128, 4))]
buf383.met_dependencies = []
buf383.group.device = cuda:0
buf383.group.iteration = (128, 4)
buf383.sizes = ([128], [4])
class buf383_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf383', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf384: SchedulerNode(ComputedBuffer)
buf384.writes = [MemoryDep(name='buf384', index=c0, size=(4194304,))]
buf384.unmet_dependencies = 
    [   MemoryDep(name='buf365', index=c0, size=(4194304,)),
        MemoryDep(name='buf378', index=c0, size=(4194304,)),
        MemoryDep(name='buf381', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf383', index=c1, size=(8, 128, 4096))]
buf384.met_dependencies = 
    [   MemoryDep(name='convolution_3', index=c0, size=(4194304,)),
        MemoryDep(name='primals_79', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='relu_2', index=c0, size=(4194304,)),
        MemoryDep(name='squeeze_10', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='unsqueeze_866', index=c1, size=(8, 128, 4096))]
buf384.group.device = cuda:0
buf384.group.iteration = (4194304, 1)
buf384.sizes = ([8, 128, 4096], [])
class buf384_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf378', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_3', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_866', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf383', get_index_5)
        constant_2 = ops.constant(3.0517578125e-05, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_10', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_10', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf381', get_index_8)
        constant_3 = ops.constant(3.0517578125e-05, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_10', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_79', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf384', get_index_11, mul_6, None)
        return store


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = [MemoryDep(name='buf385', index=c0, size=(128,))]
buf385.unmet_dependencies = [MemoryDep(name='buf383', index=c0, size=(128,))]
buf385.met_dependencies = [MemoryDep(name='squeeze_10', index=c0, size=(128,))]
buf385.group.device = cuda:0
buf385.group.iteration = (128, 1)
buf385.sizes = ([128], [])
class buf385_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_10', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf385', get_index_2, mul, None)
        return store


buf386: ExternKernelSchedulerNode(FallbackKernel)
buf386.writes = [StarDep(name='buf386')]
buf386.unmet_dependencies = [StarDep(name='buf384')]
buf386.met_dependencies = [StarDep(name='primals_4'), StarDep(name='relu')]
buf386.node.kernel = aten.convolution_backward


buf387: ExternKernelSchedulerNode(MultiOutput)
buf387.writes = [StarDep(name='buf387')]
buf387.unmet_dependencies = [StarDep(name='buf386')]
buf387.met_dependencies = []
buf387.node.kernel = None


buf388: ExternKernelSchedulerNode(MultiOutput)
buf388.writes = [StarDep(name='buf388')]
buf388.unmet_dependencies = [StarDep(name='buf386')]
buf388.met_dependencies = []
buf388.node.kernel = None


buf389: SchedulerNode(ComputedBuffer)
buf389.writes = 
    [   MemoryDep(name='buf389', index=c0, size=(512, 8192)),
        MemoryDep(name='buf389', index=c0, size=(512,))]
buf389.unmet_dependencies = 
    [   MemoryDep(name='buf365', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf378', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf389.met_dependencies = 
    [   MemoryDep(name='convolution_2', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='relu_2', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='unsqueeze_878', index=c1, size=(4, 128, 8192))]
buf389.group.device = cuda:0
buf389.group.iteration = (512, 8192)
buf389.sizes = ([4, 128], [8192])
class buf389_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf378', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_2', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_878', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf389', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf390: SchedulerNode(ComputedBuffer)
buf390.writes = 
    [   MemoryDep(name='buf390', index=c0, size=(128, 4)),
        MemoryDep(name='buf390', index=c0, size=(128,))]
buf390.unmet_dependencies = [MemoryDep(name='buf389', index=c0 + 128*c1, size=(128, 4))]
buf390.met_dependencies = []
buf390.group.device = cuda:0
buf390.group.iteration = (128, 4)
buf390.sizes = ([128], [4])
class buf390_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf390', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = [MemoryDep(name='buf391', index=c0, size=(4194304,))]
buf391.unmet_dependencies = 
    [   MemoryDep(name='buf365', index=c0, size=(4194304,)),
        MemoryDep(name='buf378', index=c0, size=(4194304,)),
        MemoryDep(name='buf381', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf390', index=c1, size=(8, 128, 4096))]
buf391.met_dependencies = 
    [   MemoryDep(name='convolution_2', index=c0, size=(4194304,)),
        MemoryDep(name='primals_74', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='relu_2', index=c0, size=(4194304,)),
        MemoryDep(name='squeeze_7', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='unsqueeze_878', index=c1, size=(8, 128, 4096))]
buf391.group.device = cuda:0
buf391.group.iteration = (4194304, 1)
buf391.sizes = ([8, 128, 4096], [])
class buf391_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf378', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_2', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_878', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf390', get_index_5)
        constant_2 = ops.constant(3.0517578125e-05, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_7', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_7', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf381', get_index_8)
        constant_3 = ops.constant(3.0517578125e-05, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_7', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_74', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf391', get_index_11, mul_6, None)
        return store


buf392: SchedulerNode(ComputedBuffer)
buf392.writes = [MemoryDep(name='buf392', index=c0, size=(128,))]
buf392.unmet_dependencies = [MemoryDep(name='buf390', index=c0, size=(128,))]
buf392.met_dependencies = [MemoryDep(name='squeeze_7', index=c0, size=(128,))]
buf392.group.device = cuda:0
buf392.group.iteration = (128, 1)
buf392.sizes = ([128], [])
class buf392_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_7', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf392', get_index_2, mul, None)
        return store


buf393: ExternKernelSchedulerNode(FallbackKernel)
buf393.writes = [StarDep(name='buf393')]
buf393.unmet_dependencies = [StarDep(name='buf391')]
buf393.met_dependencies = [StarDep(name='primals_3'), StarDep(name='relu_1')]
buf393.node.kernel = aten.convolution_backward


buf394: ExternKernelSchedulerNode(MultiOutput)
buf394.writes = [StarDep(name='buf394')]
buf394.unmet_dependencies = [StarDep(name='buf393')]
buf394.met_dependencies = []
buf394.node.kernel = None


buf395: ExternKernelSchedulerNode(MultiOutput)
buf395.writes = [StarDep(name='buf395')]
buf395.unmet_dependencies = [StarDep(name='buf393')]
buf395.met_dependencies = []
buf395.node.kernel = None


buf396: SchedulerNode(ComputedBuffer)
buf396.writes = 
    [   MemoryDep(name='buf396', index=c0, size=(512, 8192)),
        MemoryDep(name='buf396', index=c0, size=(512,))]
buf396.unmet_dependencies = [   MemoryDep(name='buf394', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf396.met_dependencies = [   MemoryDep(name='relu_1', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf396.group.device = cuda:0
buf396.group.iteration = (512, 8192)
buf396.sizes = ([4, 128], [8192])
class buf396_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf394', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf396', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf397: SchedulerNode(ComputedBuffer)
buf397.writes = 
    [   MemoryDep(name='buf397', index=c0, size=(128, 4)),
        MemoryDep(name='buf397', index=c0, size=(128,))]
buf397.unmet_dependencies = [MemoryDep(name='buf396', index=c0 + 128*c1, size=(128, 4))]
buf397.met_dependencies = []
buf397.group.device = cuda:0
buf397.group.iteration = (128, 4)
buf397.sizes = ([128], [4])
class buf397_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf397', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf398: SchedulerNode(ComputedBuffer)
buf398.writes = 
    [   MemoryDep(name='buf398', index=c0, size=(512, 8192)),
        MemoryDep(name='buf398', index=c0, size=(512,))]
buf398.unmet_dependencies = [   MemoryDep(name='buf394', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf398.met_dependencies = 
    [   MemoryDep(name='convolution_1', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='relu_1', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='unsqueeze_890', index=c1, size=(4, 128, 8192))]
buf398.group.device = cuda:0
buf398.group.iteration = (512, 8192)
buf398.sizes = ([4, 128], [8192])
class buf398_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf394', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_890', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf398', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf399: SchedulerNode(ComputedBuffer)
buf399.writes = 
    [   MemoryDep(name='buf399', index=c0, size=(128, 4)),
        MemoryDep(name='buf399', index=c0, size=(128,))]
buf399.unmet_dependencies = [MemoryDep(name='buf398', index=c0 + 128*c1, size=(128, 4))]
buf399.met_dependencies = []
buf399.group.device = cuda:0
buf399.group.iteration = (128, 4)
buf399.sizes = ([128], [4])
class buf399_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf399', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf400: SchedulerNode(ComputedBuffer)
buf400.writes = [MemoryDep(name='buf400', index=c0, size=(128,))]
buf400.unmet_dependencies = [MemoryDep(name='buf399', index=c0, size=(128,))]
buf400.met_dependencies = [MemoryDep(name='squeeze_4', index=c0, size=(128,))]
buf400.group.device = cuda:0
buf400.group.iteration = (128, 1)
buf400.sizes = ([128], [])
class buf400_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_4', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf400', get_index_2, mul, None)
        return store


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = [MemoryDep(name='buf401', index=c0, size=(4194304,))]
buf401.unmet_dependencies = 
    [   MemoryDep(name='buf394', index=c0, size=(4194304,)),
        MemoryDep(name='buf397', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf399', index=c1, size=(8, 128, 4096))]
buf401.met_dependencies = 
    [   MemoryDep(name='convolution_1', index=c0, size=(4194304,)),
        MemoryDep(name='primals_69', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='relu_1', index=c0, size=(4194304,)),
        MemoryDep(name='squeeze_4', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='unsqueeze_890', index=c1, size=(8, 128, 4096))]
buf401.group.device = cuda:0
buf401.group.iteration = (4194304, 1)
buf401.sizes = ([8, 128, 4096], [])
class buf401_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf394', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_890', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf399', get_index_4)
        constant_2 = ops.constant(3.0517578125e-05, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_4', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_4', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf397', get_index_7)
        constant_3 = ops.constant(3.0517578125e-05, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_4', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_69', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf401', get_index_10, mul_6, None)
        return store


buf402: ExternKernelSchedulerNode(FallbackKernel)
buf402.writes = [StarDep(name='buf402')]
buf402.unmet_dependencies = [StarDep(name='buf401')]
buf402.met_dependencies = [StarDep(name='primals_2'), StarDep(name='relu')]
buf402.node.kernel = aten.convolution_backward


buf403: ExternKernelSchedulerNode(MultiOutput)
buf403.writes = [StarDep(name='buf403')]
buf403.unmet_dependencies = [StarDep(name='buf402')]
buf403.met_dependencies = []
buf403.node.kernel = None


buf404: ExternKernelSchedulerNode(MultiOutput)
buf404.writes = [StarDep(name='buf404')]
buf404.unmet_dependencies = [StarDep(name='buf402')]
buf404.met_dependencies = []
buf404.node.kernel = None


buf405: SchedulerNode(ComputedBuffer)
buf405.writes = 
    [   MemoryDep(name='buf405', index=c0, size=(512, 8192)),
        MemoryDep(name='buf405', index=c0, size=(512,))]
buf405.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192)),
        MemoryDep(name='buf403', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192))]
buf405.met_dependencies = [   MemoryDep(name='relu', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192))]
buf405.group.device = cuda:0
buf405.group.iteration = (512, 8192)
buf405.sizes = ([32, 16], [8192])
class buf405_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 8192}
    index0 = 16384*z0 + 524288*((8192*z1 + z2)//16384) + ModularIndexing(z2, 1, 128) + 128*ModularIndexing(8192*z1 + z2, 128, 128)
    index1 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf403', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf405', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf406: SchedulerNode(ComputedBuffer)
buf406.writes = 
    [   MemoryDep(name='buf406', index=c0, size=(32, 16)),
        MemoryDep(name='buf406', index=c0, size=(32,))]
buf406.unmet_dependencies = [MemoryDep(name='buf405', index=c0, size=(512,))]
buf406.met_dependencies = []
buf406.group.device = cuda:0
buf406.group.iteration = (32, 16)
buf406.sizes = ([32], [16])
class buf406_loop_body:
    var_ranges = {z0: 32, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf406', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = 
    [   MemoryDep(name='buf407', index=c0, size=(512, 8192)),
        MemoryDep(name='buf407', index=c0, size=(512,))]
buf407.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192)),
        MemoryDep(name='buf403', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192))]
buf407.met_dependencies = 
    [   MemoryDep(name='convolution', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192)),
        MemoryDep(name='relu', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192)),
        MemoryDep(name='unsqueeze_902', index=c0, size=(32, 131072))]
buf407.group.device = cuda:0
buf407.group.iteration = (512, 8192)
buf407.sizes = ([32, 16], [8192])
class buf407_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 8192}
    index0 = 16384*z0 + 524288*((8192*z1 + z2)//16384) + ModularIndexing(z2, 1, 128) + 128*ModularIndexing(8192*z1 + z2, 128, 128)
    index1 = z0
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf403', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_902', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf407', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf408: SchedulerNode(ComputedBuffer)
buf408.writes = 
    [   MemoryDep(name='buf408', index=c0, size=(32, 16)),
        MemoryDep(name='buf408', index=c0, size=(32,))]
buf408.unmet_dependencies = [MemoryDep(name='buf407', index=c0, size=(512,))]
buf408.met_dependencies = []
buf408.group.device = cuda:0
buf408.group.iteration = (32, 16)
buf408.sizes = ([32], [16])
class buf408_loop_body:
    var_ranges = {z0: 32, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf408', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf409: SchedulerNode(ComputedBuffer)
buf409.writes = [MemoryDep(name='buf409', index=c0, size=(4194304,))]
buf409.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=c0, size=(4194304,)),
        MemoryDep(name='buf403', index=c0, size=(4194304,)),
        MemoryDep(name='buf406', index=c1, size=(8, 32, 16384)),
        MemoryDep(name='buf408', index=c1, size=(8, 32, 16384))]
buf409.met_dependencies = 
    [   MemoryDep(name='convolution', index=c0, size=(4194304,)),
        MemoryDep(name='primals_64', index=c1, size=(8, 32, 16384)),
        MemoryDep(name='relu', index=c0, size=(4194304,)),
        MemoryDep(name='squeeze_1', index=c1, size=(8, 32, 16384)),
        MemoryDep(name='unsqueeze_902', index=c1, size=(8, 32, 16384))]
buf409.group.device = cuda:0
buf409.group.iteration = (4194304, 1)
buf409.sizes = ([8, 32, 16384], [])
class buf409_loop_body:
    var_ranges = {z0: 8, z1: 32, z2: 16384}
    index0 = 524288*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf403', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_902', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf408', get_index_5)
        constant_2 = ops.constant(7.62939453125e-06, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_1', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_1', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf406', get_index_8)
        constant_3 = ops.constant(7.62939453125e-06, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_1', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_64', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf409', get_index_11, mul_6, None)
        return store


buf410: SchedulerNode(ComputedBuffer)
buf410.writes = [MemoryDep(name='buf410', index=c0, size=(32,))]
buf410.unmet_dependencies = [MemoryDep(name='buf408', index=c0, size=(32,))]
buf410.met_dependencies = [MemoryDep(name='squeeze_1', index=c0, size=(32,))]
buf410.group.device = cuda:0
buf410.group.iteration = (32, 1)
buf410.sizes = ([32], [])
class buf410_loop_body:
    var_ranges = {z0: 32}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf410', get_index_2, mul, None)
        return store


buf411: ExternKernelSchedulerNode(FallbackKernel)
buf411.writes = [StarDep(name='buf411')]
buf411.unmet_dependencies = [StarDep(name='buf409')]
buf411.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_60')]
buf411.node.kernel = aten.convolution_backward


buf412: ExternKernelSchedulerNode(MultiOutput)
buf412.writes = [StarDep(name='buf412')]
buf412.unmet_dependencies = [StarDep(name='buf411')]
buf412.met_dependencies = []
buf412.node.kernel = None


