buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_60')]
buf0.node.kernel = aten.convolution


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = 
    [   MemoryDep(name='buf1', index=c0, size=(512, 8192)),
        MemoryDep(name='buf1', index=c0, size=(512,))]
buf1.unmet_dependencies = [   MemoryDep(name='buf0', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192))]
buf1.met_dependencies = []
buf1.group.device = cuda:0
buf1.group.iteration = (512, 8192)
buf1.sizes = ([32, 16], [8192])
class buf1_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 8192}
    index0 = 16384*z0 + 524288*((8192*z1 + z2)//16384) + ModularIndexing(z2, 1, 128) + 128*ModularIndexing(8192*z1 + z2, 128, 128)
    index1 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf1', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(32, 16)),
        MemoryDep(name='buf2', index=c0, size=(32,))]
buf2.unmet_dependencies = [MemoryDep(name='buf1', index=c0, size=(512,))]
buf2.met_dependencies = []
buf2.group.device = cuda:0
buf2.group.iteration = (32, 16)
buf2.sizes = ([32], [16])
class buf2_loop_body:
    var_ranges = {z0: 32, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep(name='buf3', index=c0, size=(32,))]
buf3.unmet_dependencies = [MemoryDep(name='buf2', index=c0, size=(32,))]
buf3.met_dependencies = []
buf3.group.device = cuda:0
buf3.group.iteration = (32, 1)
buf3.sizes = ([32], [])
class buf3_loop_body:
    var_ranges = {z0: 32}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        constant = ops.constant(131072, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf3', get_index_1, div, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = 
    [   MemoryDep(name='buf4', index=c0, size=(512, 8192)),
        MemoryDep(name='buf4', index=c0, size=(512,))]
buf4.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=16384*c0 + 524288*((8192*c1 + c2)//16384) + ModularIndexing(c2, 1, 128) + 128*ModularIndexing(8192*c1 + c2, 128, 128), size=(32, 16, 8192)),
        MemoryDep(name='buf3', index=c0, size=(32, 131072))]
buf4.met_dependencies = []
buf4.group.device = cuda:0
buf4.group.iteration = (512, 8192)
buf4.sizes = ([32, 16], [8192])
class buf4_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 8192}
    index0 = 16384*z0 + 524288*((8192*z1 + z2)//16384) + ModularIndexing(z2, 1, 128) + 128*ModularIndexing(8192*z1 + z2, 128, 128)
    index1 = z0
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf4', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = 
    [   MemoryDep(name='buf5', index=c0, size=(32, 16)),
        MemoryDep(name='buf5', index=c0, size=(32,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(512,))]
buf5.met_dependencies = []
buf5.group.device = cuda:0
buf5.group.iteration = (32, 16)
buf5.sizes = ([32], [16])
class buf5_loop_body:
    var_ranges = {z0: 32, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf5', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(32,))]
buf6.unmet_dependencies = [MemoryDep(name='buf5', index=c0, size=(32,))]
buf6.met_dependencies = []
buf6.group.device = cuda:0
buf6.group.iteration = (32, 1)
buf6.sizes = ([32], [])
class buf6_loop_body:
    var_ranges = {z0: 32}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        constant = ops.constant(131072, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf6', get_index_1, rsqrt, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep(name='buf7', index=c0, size=(32,))]
buf7.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(32,))]
buf7.met_dependencies = [MemoryDep(name='primals_62', index=c0, size=(32,))]
buf7.group.device = cuda:0
buf7.group.iteration = (32, 1)
buf7.sizes = ([32], [])
class buf7_loop_body:
    var_ranges = {z0: 32}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_62', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf7', get_index_2, add, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep(name='buf8', index=c0, size=(32,))]
buf8.unmet_dependencies = [MemoryDep(name='buf5', index=c0, size=(32,))]
buf8.met_dependencies = [MemoryDep(name='primals_63', index=c0, size=(32,))]
buf8.group.device = cuda:0
buf8.group.iteration = (32, 1)
buf8.sizes = ([32], [])
class buf8_loop_body:
    var_ranges = {z0: 32}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        constant = ops.constant(131072, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0000076294527394, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_63', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, add, None)
        return store


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep(name='buf9', index=c0, size=(4194304,))]
buf9.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(4194304,)),
        MemoryDep(name='buf3', index=c1, size=(8, 32, 16384)),
        MemoryDep(name='buf5', index=c1, size=(8, 32, 16384))]
buf9.met_dependencies = 
    [   MemoryDep(name='primals_64', index=c1, size=(8, 32, 16384)),
        MemoryDep(name='primals_65', index=c1, size=(8, 32, 16384))]
buf9.group.device = cuda:0
buf9.group.iteration = (4194304, 1)
buf9.sizes = ([8, 32, 16384], [])
class buf9_loop_body:
    var_ranges = {z0: 8, z1: 32, z2: 16384}
    index0 = 524288*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf5', get_index_2)
        constant = ops.constant(131072, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_64', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_65', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, relu, None)
        return store


buf10: ExternKernelSchedulerNode(Convolution)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf9')]
buf10.met_dependencies = [StarDep(name='primals_2')]
buf10.node.kernel = aten.convolution


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(512, 8192)),
        MemoryDep(name='buf11', index=c0, size=(512,))]
buf11.unmet_dependencies = [   MemoryDep(name='buf10', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf11.met_dependencies = []
buf11.group.device = cuda:0
buf11.group.iteration = (512, 8192)
buf11.sizes = ([4, 128], [8192])
class buf11_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(128, 4)),
        MemoryDep(name='buf12', index=c0, size=(128,))]
buf12.unmet_dependencies = [MemoryDep(name='buf11', index=c0 + 128*c1, size=(128, 4))]
buf12.met_dependencies = []
buf12.group.device = cuda:0
buf12.group.iteration = (128, 4)
buf12.sizes = ([128], [4])
class buf12_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(128,))]
buf13.unmet_dependencies = [MemoryDep(name='buf12', index=c0, size=(128,))]
buf13.met_dependencies = []
buf13.group.device = cuda:0
buf13.group.iteration = (128, 1)
buf13.sizes = ([128], [])
class buf13_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf13', get_index_1, div, None)
        return store


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = 
    [   MemoryDep(name='buf14', index=c0, size=(512, 8192)),
        MemoryDep(name='buf14', index=c0, size=(512,))]
buf14.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf13', index=c1, size=(4, 128, 8192))]
buf14.met_dependencies = []
buf14.group.device = cuda:0
buf14.group.iteration = (512, 8192)
buf14.sizes = ([4, 128], [8192])
class buf14_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf13', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf14', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = 
    [   MemoryDep(name='buf15', index=c0, size=(128, 4)),
        MemoryDep(name='buf15', index=c0, size=(128,))]
buf15.unmet_dependencies = [MemoryDep(name='buf14', index=c0 + 128*c1, size=(128, 4))]
buf15.met_dependencies = []
buf15.group.device = cuda:0
buf15.group.iteration = (128, 4)
buf15.sizes = ([128], [4])
class buf15_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf15', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep(name='buf16', index=c0, size=(128,))]
buf16.unmet_dependencies = [MemoryDep(name='buf15', index=c0, size=(128,))]
buf16.met_dependencies = []
buf16.group.device = cuda:0
buf16.group.iteration = (128, 1)
buf16.sizes = ([128], [])
class buf16_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf16', get_index_1, rsqrt, None)
        return store


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep(name='buf17', index=c0, size=(128,))]
buf17.unmet_dependencies = [MemoryDep(name='buf13', index=c0, size=(128,))]
buf17.met_dependencies = [MemoryDep(name='primals_67', index=c0, size=(128,))]
buf17.group.device = cuda:0
buf17.group.iteration = (128, 1)
buf17.sizes = ([128], [])
class buf17_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_67', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf17', get_index_2, add, None)
        return store


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = [MemoryDep(name='buf18', index=c0, size=(128,))]
buf18.unmet_dependencies = [MemoryDep(name='buf15', index=c0, size=(128,))]
buf18.met_dependencies = [MemoryDep(name='primals_68', index=c0, size=(128,))]
buf18.group.device = cuda:0
buf18.group.iteration = (128, 1)
buf18.sizes = ([128], [])
class buf18_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.000030518509476, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_68', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf18', get_index_2, add, None)
        return store


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep(name='buf19', index=c0, size=(4194304,))]
buf19.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c0, size=(4194304,)),
        MemoryDep(name='buf13', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf15', index=c1, size=(8, 128, 4096))]
buf19.met_dependencies = 
    [   MemoryDep(name='primals_69', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='primals_70', index=c1, size=(8, 128, 4096))]
buf19.group.device = cuda:0
buf19.group.iteration = (4194304, 1)
buf19.sizes = ([8, 128, 4096], [])
class buf19_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf13', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf15', get_index_2)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_69', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_70', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, relu, None)
        return store


buf20: ExternKernelSchedulerNode(Convolution)
buf20.writes = [StarDep(name='buf20')]
buf20.unmet_dependencies = [StarDep(name='buf19')]
buf20.met_dependencies = [StarDep(name='primals_3')]
buf20.node.kernel = aten.convolution


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = 
    [   MemoryDep(name='buf21', index=c0, size=(512, 8192)),
        MemoryDep(name='buf21', index=c0, size=(512,))]
buf21.unmet_dependencies = [   MemoryDep(name='buf20', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf21.met_dependencies = []
buf21.group.device = cuda:0
buf21.group.iteration = (512, 8192)
buf21.sizes = ([4, 128], [8192])
class buf21_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf21', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = 
    [   MemoryDep(name='buf22', index=c0, size=(128, 4)),
        MemoryDep(name='buf22', index=c0, size=(128,))]
buf22.unmet_dependencies = [MemoryDep(name='buf21', index=c0 + 128*c1, size=(128, 4))]
buf22.met_dependencies = []
buf22.group.device = cuda:0
buf22.group.iteration = (128, 4)
buf22.sizes = ([128], [4])
class buf22_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf22', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep(name='buf23', index=c0, size=(128,))]
buf23.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(128,))]
buf23.met_dependencies = []
buf23.group.device = cuda:0
buf23.group.iteration = (128, 1)
buf23.sizes = ([128], [])
class buf23_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf23', get_index_1, div, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = 
    [   MemoryDep(name='buf24', index=c0, size=(512, 8192)),
        MemoryDep(name='buf24', index=c0, size=(512,))]
buf24.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf23', index=c1, size=(4, 128, 8192))]
buf24.met_dependencies = []
buf24.group.device = cuda:0
buf24.group.iteration = (512, 8192)
buf24.sizes = ([4, 128], [8192])
class buf24_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf24', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = 
    [   MemoryDep(name='buf25', index=c0, size=(128, 4)),
        MemoryDep(name='buf25', index=c0, size=(128,))]
buf25.unmet_dependencies = [MemoryDep(name='buf24', index=c0 + 128*c1, size=(128, 4))]
buf25.met_dependencies = []
buf25.group.device = cuda:0
buf25.group.iteration = (128, 4)
buf25.sizes = ([128], [4])
class buf25_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf25', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = [MemoryDep(name='buf26', index=c0, size=(128,))]
buf26.unmet_dependencies = [MemoryDep(name='buf25', index=c0, size=(128,))]
buf26.met_dependencies = []
buf26.group.device = cuda:0
buf26.group.iteration = (128, 1)
buf26.sizes = ([128], [])
class buf26_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf26', get_index_1, rsqrt, None)
        return store


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = [MemoryDep(name='buf27', index=c0, size=(128,))]
buf27.unmet_dependencies = [MemoryDep(name='buf23', index=c0, size=(128,))]
buf27.met_dependencies = [MemoryDep(name='primals_72', index=c0, size=(128,))]
buf27.group.device = cuda:0
buf27.group.iteration = (128, 1)
buf27.sizes = ([128], [])
class buf27_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_72', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf27', get_index_2, add, None)
        return store


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = [MemoryDep(name='buf28', index=c0, size=(128,))]
buf28.unmet_dependencies = [MemoryDep(name='buf25', index=c0, size=(128,))]
buf28.met_dependencies = [MemoryDep(name='primals_73', index=c0, size=(128,))]
buf28.group.device = cuda:0
buf28.group.iteration = (128, 1)
buf28.sizes = ([128], [])
class buf28_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.000030518509476, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_73', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf28', get_index_2, add, None)
        return store


buf29: ExternKernelSchedulerNode(Convolution)
buf29.writes = [StarDep(name='buf29')]
buf29.unmet_dependencies = [StarDep(name='buf9')]
buf29.met_dependencies = [StarDep(name='primals_4')]
buf29.node.kernel = aten.convolution


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = 
    [   MemoryDep(name='buf30', index=c0, size=(512, 8192)),
        MemoryDep(name='buf30', index=c0, size=(512,))]
buf30.unmet_dependencies = [   MemoryDep(name='buf29', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192))]
buf30.met_dependencies = []
buf30.group.device = cuda:0
buf30.group.iteration = (512, 8192)
buf30.sizes = ([4, 128], [8192])
class buf30_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf30', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = 
    [   MemoryDep(name='buf31', index=c0, size=(128, 4)),
        MemoryDep(name='buf31', index=c0, size=(128,))]
buf31.unmet_dependencies = [MemoryDep(name='buf30', index=c0 + 128*c1, size=(128, 4))]
buf31.met_dependencies = []
buf31.group.device = cuda:0
buf31.group.iteration = (128, 4)
buf31.sizes = ([128], [4])
class buf31_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf31', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = [MemoryDep(name='buf32', index=c0, size=(128,))]
buf32.unmet_dependencies = [MemoryDep(name='buf31', index=c0, size=(128,))]
buf32.met_dependencies = []
buf32.group.device = cuda:0
buf32.group.iteration = (128, 1)
buf32.sizes = ([128], [])
class buf32_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf32', get_index_1, div, None)
        return store


buf33: SchedulerNode(ComputedBuffer)
buf33.writes = 
    [   MemoryDep(name='buf33', index=c0, size=(512, 8192)),
        MemoryDep(name='buf33', index=c0, size=(512,))]
buf33.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=1048576*c0 + 4096*c1 + 524288*(c2//4096) + ModularIndexing(c2, 1, 4096), size=(4, 128, 8192)),
        MemoryDep(name='buf32', index=c1, size=(4, 128, 8192))]
buf33.met_dependencies = []
buf33.group.device = cuda:0
buf33.group.iteration = (512, 8192)
buf33.sizes = ([4, 128], [8192])
class buf33_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 8192}
    index0 = 1048576*z0 + 4096*z1 + 524288*(z2//4096) + ModularIndexing(z2, 1, 4096)
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf33', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(128, 4)),
        MemoryDep(name='buf34', index=c0, size=(128,))]
buf34.unmet_dependencies = [MemoryDep(name='buf33', index=c0 + 128*c1, size=(128, 4))]
buf34.met_dependencies = []
buf34.group.device = cuda:0
buf34.group.iteration = (128, 4)
buf34.sizes = ([128], [4])
class buf34_loop_body:
    var_ranges = {z0: 128, z1: 4}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep(name='buf35', index=c0, size=(128,))]
buf35.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(128,))]
buf35.met_dependencies = []
buf35.group.device = cuda:0
buf35.group.iteration = (128, 1)
buf35.sizes = ([128], [])
class buf35_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf35', get_index_1, rsqrt, None)
        return store


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = [MemoryDep(name='buf36', index=c0, size=(128,))]
buf36.unmet_dependencies = [MemoryDep(name='buf32', index=c0, size=(128,))]
buf36.met_dependencies = [MemoryDep(name='primals_77', index=c0, size=(128,))]
buf36.group.device = cuda:0
buf36.group.iteration = (128, 1)
buf36.sizes = ([128], [])
class buf36_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_77', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf36', get_index_2, add, None)
        return store


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(128,))]
buf37.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(128,))]
buf37.met_dependencies = [MemoryDep(name='primals_78', index=c0, size=(128,))]
buf37.group.device = cuda:0
buf37.group.iteration = (128, 1)
buf37.sizes = ([128], [])
class buf37_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.000030518509476, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_78', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf37', get_index_2, add, None)
        return store


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = [MemoryDep(name='buf38', index=c0, size=(4194304,))]
buf38.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(4194304,)),
        MemoryDep(name='buf23', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf25', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf29', index=c0, size=(4194304,)),
        MemoryDep(name='buf32', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='buf34', index=c1, size=(8, 128, 4096))]
buf38.met_dependencies = 
    [   MemoryDep(name='primals_74', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='primals_75', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='primals_79', index=c1, size=(8, 128, 4096)),
        MemoryDep(name='primals_80', index=c1, size=(8, 128, 4096))]
buf38.group.device = cuda:0
buf38.group.iteration = (4194304, 1)
buf38.sizes = ([8, 128, 4096], [])
class buf38_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf25', get_index_2)
        constant = ops.constant(32768, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_74', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_75', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf29', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf32', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf34', get_index_7)
        constant_2 = ops.constant(32768, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_79', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_80', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf38', get_index_10, add_4, None)
        return store


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(4194304,))]
buf39.unmet_dependencies = [MemoryDep(name='buf38', index=c0, size=(4194304,))]
buf39.met_dependencies = []
buf39.group.device = cuda:0
buf39.group.iteration = (4194304, 1)
buf39.sizes = ([4194304], [])
class buf39_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf39', get_index_1, relu, None)
        return store


buf40: ExternKernelSchedulerNode(Convolution)
buf40.writes = [StarDep(name='buf40')]
buf40.unmet_dependencies = [StarDep(name='buf39')]
buf40.met_dependencies = [StarDep(name='primals_5')]
buf40.node.kernel = aten.convolution


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = 
    [   MemoryDep(name='buf41', index=c0, size=(192, 8192)),
        MemoryDep(name='buf41', index=c0, size=(192,))]
buf41.unmet_dependencies = [MemoryDep(name='buf40', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf41.met_dependencies = []
buf41.group.device = cuda:0
buf41.group.iteration = (192, 8192)
buf41.sizes = ([192], [8, 1024])
class buf41_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf41', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = [MemoryDep(name='buf42', index=c0, size=(192,))]
buf42.unmet_dependencies = [MemoryDep(name='buf41', index=c0, size=(192,))]
buf42.met_dependencies = []
buf42.group.device = cuda:0
buf42.group.iteration = (192, 1)
buf42.sizes = ([192], [])
class buf42_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf42', get_index_1, div, None)
        return store


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = 
    [   MemoryDep(name='buf43', index=c0, size=(192, 8192)),
        MemoryDep(name='buf43', index=c0, size=(192,))]
buf43.unmet_dependencies = 
    [   MemoryDep(name='buf40', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf42', index=c0, size=(192, 8192))]
buf43.met_dependencies = []
buf43.group.device = cuda:0
buf43.group.iteration = (192, 8192)
buf43.sizes = ([192], [8, 1024])
class buf43_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf43', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = [MemoryDep(name='buf44', index=c0, size=(192,))]
buf44.unmet_dependencies = [MemoryDep(name='buf43', index=c0, size=(192,))]
buf44.met_dependencies = []
buf44.group.device = cuda:0
buf44.group.iteration = (192, 1)
buf44.sizes = ([192], [])
class buf44_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf44', get_index_1, rsqrt, None)
        return store


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = [MemoryDep(name='buf45', index=c0, size=(192,))]
buf45.unmet_dependencies = [MemoryDep(name='buf42', index=c0, size=(192,))]
buf45.met_dependencies = [MemoryDep(name='primals_82', index=c0, size=(192,))]
buf45.group.device = cuda:0
buf45.group.iteration = (192, 1)
buf45.sizes = ([192], [])
class buf45_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_82', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, add, None)
        return store


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = [MemoryDep(name='buf46', index=c0, size=(192,))]
buf46.unmet_dependencies = [MemoryDep(name='buf43', index=c0, size=(192,))]
buf46.met_dependencies = [MemoryDep(name='primals_83', index=c0, size=(192,))]
buf46.group.device = cuda:0
buf46.group.iteration = (192, 1)
buf46.sizes = ([192], [])
class buf46_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_83', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf46', get_index_2, add, None)
        return store


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(1572864,))]
buf47.unmet_dependencies = 
    [   MemoryDep(name='buf40', index=c0, size=(1572864,)),
        MemoryDep(name='buf42', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf43', index=c1, size=(8, 192, 1024))]
buf47.met_dependencies = 
    [   MemoryDep(name='primals_84', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_85', index=c1, size=(8, 192, 1024))]
buf47.group.device = cuda:0
buf47.group.iteration = (1572864, 1)
buf47.sizes = ([8, 192, 1024], [])
class buf47_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf43', get_index_2)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_84', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_85', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, relu, None)
        return store


buf48: ExternKernelSchedulerNode(Convolution)
buf48.writes = [StarDep(name='buf48')]
buf48.unmet_dependencies = [StarDep(name='buf47')]
buf48.met_dependencies = [StarDep(name='primals_6')]
buf48.node.kernel = aten.convolution


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = 
    [   MemoryDep(name='buf49', index=c0, size=(192, 8192)),
        MemoryDep(name='buf49', index=c0, size=(192,))]
buf49.unmet_dependencies = [MemoryDep(name='buf48', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf49.met_dependencies = []
buf49.group.device = cuda:0
buf49.group.iteration = (192, 8192)
buf49.sizes = ([192], [8, 1024])
class buf49_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf49', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf50: SchedulerNode(ComputedBuffer)
buf50.writes = [MemoryDep(name='buf50', index=c0, size=(192,))]
buf50.unmet_dependencies = [MemoryDep(name='buf49', index=c0, size=(192,))]
buf50.met_dependencies = []
buf50.group.device = cuda:0
buf50.group.iteration = (192, 1)
buf50.sizes = ([192], [])
class buf50_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf50', get_index_1, div, None)
        return store


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = 
    [   MemoryDep(name='buf51', index=c0, size=(192, 8192)),
        MemoryDep(name='buf51', index=c0, size=(192,))]
buf51.unmet_dependencies = 
    [   MemoryDep(name='buf48', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf50', index=c0, size=(192, 8192))]
buf51.met_dependencies = []
buf51.group.device = cuda:0
buf51.group.iteration = (192, 8192)
buf51.sizes = ([192], [8, 1024])
class buf51_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf51', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = [MemoryDep(name='buf52', index=c0, size=(192,))]
buf52.unmet_dependencies = [MemoryDep(name='buf51', index=c0, size=(192,))]
buf52.met_dependencies = []
buf52.group.device = cuda:0
buf52.group.iteration = (192, 1)
buf52.sizes = ([192], [])
class buf52_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf52', get_index_1, rsqrt, None)
        return store


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep(name='buf53', index=c0, size=(192,))]
buf53.unmet_dependencies = [MemoryDep(name='buf50', index=c0, size=(192,))]
buf53.met_dependencies = [MemoryDep(name='primals_87', index=c0, size=(192,))]
buf53.group.device = cuda:0
buf53.group.iteration = (192, 1)
buf53.sizes = ([192], [])
class buf53_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_87', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf53', get_index_2, add, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep(name='buf54', index=c0, size=(192,))]
buf54.unmet_dependencies = [MemoryDep(name='buf51', index=c0, size=(192,))]
buf54.met_dependencies = [MemoryDep(name='primals_88', index=c0, size=(192,))]
buf54.group.device = cuda:0
buf54.group.iteration = (192, 1)
buf54.sizes = ([192], [])
class buf54_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_88', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf54', get_index_2, add, None)
        return store


buf55: ExternKernelSchedulerNode(Convolution)
buf55.writes = [StarDep(name='buf55')]
buf55.unmet_dependencies = [StarDep(name='buf39')]
buf55.met_dependencies = [StarDep(name='primals_7')]
buf55.node.kernel = aten.convolution


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = 
    [   MemoryDep(name='buf56', index=c0, size=(192, 8192)),
        MemoryDep(name='buf56', index=c0, size=(192,))]
buf56.unmet_dependencies = [MemoryDep(name='buf55', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf56.met_dependencies = []
buf56.group.device = cuda:0
buf56.group.iteration = (192, 8192)
buf56.sizes = ([192], [8, 1024])
class buf56_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf56', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = [MemoryDep(name='buf57', index=c0, size=(192,))]
buf57.unmet_dependencies = [MemoryDep(name='buf56', index=c0, size=(192,))]
buf57.met_dependencies = []
buf57.group.device = cuda:0
buf57.group.iteration = (192, 1)
buf57.sizes = ([192], [])
class buf57_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf57', get_index_1, div, None)
        return store


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = 
    [   MemoryDep(name='buf58', index=c0, size=(192, 8192)),
        MemoryDep(name='buf58', index=c0, size=(192,))]
buf58.unmet_dependencies = 
    [   MemoryDep(name='buf55', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf57', index=c0, size=(192, 8192))]
buf58.met_dependencies = []
buf58.group.device = cuda:0
buf58.group.iteration = (192, 8192)
buf58.sizes = ([192], [8, 1024])
class buf58_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf58', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep(name='buf59', index=c0, size=(192,))]
buf59.unmet_dependencies = [MemoryDep(name='buf58', index=c0, size=(192,))]
buf59.met_dependencies = []
buf59.group.device = cuda:0
buf59.group.iteration = (192, 1)
buf59.sizes = ([192], [])
class buf59_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf59', get_index_1, rsqrt, None)
        return store


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = [MemoryDep(name='buf60', index=c0, size=(192,))]
buf60.unmet_dependencies = [MemoryDep(name='buf57', index=c0, size=(192,))]
buf60.met_dependencies = [MemoryDep(name='primals_92', index=c0, size=(192,))]
buf60.group.device = cuda:0
buf60.group.iteration = (192, 1)
buf60.sizes = ([192], [])
class buf60_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_92', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, add, None)
        return store


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep(name='buf61', index=c0, size=(192,))]
buf61.unmet_dependencies = [MemoryDep(name='buf58', index=c0, size=(192,))]
buf61.met_dependencies = [MemoryDep(name='primals_93', index=c0, size=(192,))]
buf61.group.device = cuda:0
buf61.group.iteration = (192, 1)
buf61.sizes = ([192], [])
class buf61_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_93', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf61', get_index_2, add, None)
        return store


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = [MemoryDep(name='buf62', index=c0, size=(1572864,))]
buf62.unmet_dependencies = 
    [   MemoryDep(name='buf48', index=c0, size=(1572864,)),
        MemoryDep(name='buf50', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf51', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf55', index=c0, size=(1572864,)),
        MemoryDep(name='buf57', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf58', index=c1, size=(8, 192, 1024))]
buf62.met_dependencies = 
    [   MemoryDep(name='primals_89', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_90', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_94', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_95', index=c1, size=(8, 192, 1024))]
buf62.group.device = cuda:0
buf62.group.iteration = (1572864, 1)
buf62.sizes = ([8, 192, 1024], [])
class buf62_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_90', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf55', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf57', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf58', get_index_7)
        constant_2 = ops.constant(8192, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_94', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_95', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf62', get_index_10, add_4, None)
        return store


buf63: SchedulerNode(ComputedBuffer)
buf63.writes = [MemoryDep(name='buf63', index=c0, size=(1572864,))]
buf63.unmet_dependencies = [MemoryDep(name='buf62', index=c0, size=(1572864,))]
buf63.met_dependencies = []
buf63.group.device = cuda:0
buf63.group.iteration = (1572864, 1)
buf63.sizes = ([1572864], [])
class buf63_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf63', get_index_1, relu, None)
        return store


buf64: ExternKernelSchedulerNode(Convolution)
buf64.writes = [StarDep(name='buf64')]
buf64.unmet_dependencies = [StarDep(name='buf63')]
buf64.met_dependencies = [StarDep(name='primals_8')]
buf64.node.kernel = aten.convolution


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = 
    [   MemoryDep(name='buf65', index=c0, size=(192, 8192)),
        MemoryDep(name='buf65', index=c0, size=(192,))]
buf65.unmet_dependencies = [MemoryDep(name='buf64', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf65.met_dependencies = []
buf65.group.device = cuda:0
buf65.group.iteration = (192, 8192)
buf65.sizes = ([192], [8, 1024])
class buf65_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf65', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = [MemoryDep(name='buf66', index=c0, size=(192,))]
buf66.unmet_dependencies = [MemoryDep(name='buf65', index=c0, size=(192,))]
buf66.met_dependencies = []
buf66.group.device = cuda:0
buf66.group.iteration = (192, 1)
buf66.sizes = ([192], [])
class buf66_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf66', get_index_1, div, None)
        return store


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = 
    [   MemoryDep(name='buf67', index=c0, size=(192, 8192)),
        MemoryDep(name='buf67', index=c0, size=(192,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf64', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf66', index=c0, size=(192, 8192))]
buf67.met_dependencies = []
buf67.group.device = cuda:0
buf67.group.iteration = (192, 8192)
buf67.sizes = ([192], [8, 1024])
class buf67_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf66', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf67', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = [MemoryDep(name='buf68', index=c0, size=(192,))]
buf68.unmet_dependencies = [MemoryDep(name='buf67', index=c0, size=(192,))]
buf68.met_dependencies = []
buf68.group.device = cuda:0
buf68.group.iteration = (192, 1)
buf68.sizes = ([192], [])
class buf68_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, rsqrt, None)
        return store


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = [MemoryDep(name='buf69', index=c0, size=(192,))]
buf69.unmet_dependencies = [MemoryDep(name='buf66', index=c0, size=(192,))]
buf69.met_dependencies = [MemoryDep(name='primals_97', index=c0, size=(192,))]
buf69.group.device = cuda:0
buf69.group.iteration = (192, 1)
buf69.sizes = ([192], [])
class buf69_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_97', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, add, None)
        return store


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = [MemoryDep(name='buf70', index=c0, size=(192,))]
buf70.unmet_dependencies = [MemoryDep(name='buf67', index=c0, size=(192,))]
buf70.met_dependencies = [MemoryDep(name='primals_98', index=c0, size=(192,))]
buf70.group.device = cuda:0
buf70.group.iteration = (192, 1)
buf70.sizes = ([192], [])
class buf70_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_98', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf70', get_index_2, add, None)
        return store


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = [MemoryDep(name='buf71', index=c0, size=(1572864,))]
buf71.unmet_dependencies = 
    [   MemoryDep(name='buf64', index=c0, size=(1572864,)),
        MemoryDep(name='buf66', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf67', index=c1, size=(8, 192, 1024))]
buf71.met_dependencies = 
    [   MemoryDep(name='primals_100', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_99', index=c1, size=(8, 192, 1024))]
buf71.group.device = cuda:0
buf71.group.iteration = (1572864, 1)
buf71.sizes = ([8, 192, 1024], [])
class buf71_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf66', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf67', get_index_2)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_99', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_100', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, relu, None)
        return store


buf72: ExternKernelSchedulerNode(Convolution)
buf72.writes = [StarDep(name='buf72')]
buf72.unmet_dependencies = [StarDep(name='buf71')]
buf72.met_dependencies = [StarDep(name='primals_9')]
buf72.node.kernel = aten.convolution


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = 
    [   MemoryDep(name='buf73', index=c0, size=(192, 8192)),
        MemoryDep(name='buf73', index=c0, size=(192,))]
buf73.unmet_dependencies = [MemoryDep(name='buf72', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024))]
buf73.met_dependencies = []
buf73.group.device = cuda:0
buf73.group.iteration = (192, 8192)
buf73.sizes = ([192], [8, 1024])
class buf73_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf73', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf74: SchedulerNode(ComputedBuffer)
buf74.writes = [MemoryDep(name='buf74', index=c0, size=(192,))]
buf74.unmet_dependencies = [MemoryDep(name='buf73', index=c0, size=(192,))]
buf74.met_dependencies = []
buf74.group.device = cuda:0
buf74.group.iteration = (192, 1)
buf74.sizes = ([192], [])
class buf74_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf74', get_index_1, div, None)
        return store


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = 
    [   MemoryDep(name='buf75', index=c0, size=(192, 8192)),
        MemoryDep(name='buf75', index=c0, size=(192,))]
buf75.unmet_dependencies = 
    [   MemoryDep(name='buf72', index=1024*c0 + 196608*c1 + c2, size=(192, 8, 1024)),
        MemoryDep(name='buf74', index=c0, size=(192, 8192))]
buf75.met_dependencies = []
buf75.group.device = cuda:0
buf75.group.iteration = (192, 8192)
buf75.sizes = ([192], [8, 1024])
class buf75_loop_body:
    var_ranges = {z0: 192, z1: 8, z2: 1024}
    index0 = 1024*z0 + 196608*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf75', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = [MemoryDep(name='buf76', index=c0, size=(192,))]
buf76.unmet_dependencies = [MemoryDep(name='buf75', index=c0, size=(192,))]
buf76.met_dependencies = []
buf76.group.device = cuda:0
buf76.group.iteration = (192, 1)
buf76.sizes = ([192], [])
class buf76_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf76', get_index_1, rsqrt, None)
        return store


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(192,))]
buf77.unmet_dependencies = [MemoryDep(name='buf74', index=c0, size=(192,))]
buf77.met_dependencies = [MemoryDep(name='primals_102', index=c0, size=(192,))]
buf77.group.device = cuda:0
buf77.group.iteration = (192, 1)
buf77.sizes = ([192], [])
class buf77_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_102', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf77', get_index_2, add, None)
        return store


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = [MemoryDep(name='buf78', index=c0, size=(192,))]
buf78.unmet_dependencies = [MemoryDep(name='buf75', index=c0, size=(192,))]
buf78.met_dependencies = [MemoryDep(name='primals_103', index=c0, size=(192,))]
buf78.group.device = cuda:0
buf78.group.iteration = (192, 1)
buf78.sizes = ([192], [])
class buf78_loop_body:
    var_ranges = {z0: 192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_103', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, add, None)
        return store


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = [MemoryDep(name='buf79', index=c0, size=(1572864,))]
buf79.unmet_dependencies = 
    [   MemoryDep(name='buf63', index=c0, size=(1572864,)),
        MemoryDep(name='buf72', index=c0, size=(1572864,)),
        MemoryDep(name='buf74', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='buf75', index=c1, size=(8, 192, 1024))]
buf79.met_dependencies = 
    [   MemoryDep(name='primals_104', index=c1, size=(8, 192, 1024)),
        MemoryDep(name='primals_105', index=c1, size=(8, 192, 1024))]
buf79.group.device = cuda:0
buf79.group.iteration = (1572864, 1)
buf79.sizes = ([8, 192, 1024], [])
class buf79_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 1024}
    index0 = 196608*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_104', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_105', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf63', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf79', get_index_6, relu, None)
        return store


buf80: ExternKernelSchedulerNode(Convolution)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf79')]
buf80.met_dependencies = [StarDep(name='primals_10')]
buf80.node.kernel = aten.convolution


buf81: SchedulerNode(ComputedBuffer)
buf81.writes = 
    [   MemoryDep(name='buf81', index=c0, size=(160, 8192)),
        MemoryDep(name='buf81', index=c0, size=(160,))]
buf81.unmet_dependencies = [MemoryDep(name='buf80', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024))]
buf81.met_dependencies = []
buf81.group.device = cuda:0
buf81.group.iteration = (160, 8192)
buf81.sizes = ([160], [8, 1024])
class buf81_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 1024}
    index0 = 1024*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf81', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = [MemoryDep(name='buf82', index=c0, size=(160,))]
buf82.unmet_dependencies = [MemoryDep(name='buf81', index=c0, size=(160,))]
buf82.met_dependencies = []
buf82.group.device = cuda:0
buf82.group.iteration = (160, 1)
buf82.sizes = ([160], [])
class buf82_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf82', get_index_1, div, None)
        return store


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = 
    [   MemoryDep(name='buf83', index=c0, size=(160, 8192)),
        MemoryDep(name='buf83', index=c0, size=(160,))]
buf83.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=1024*c0 + 163840*c1 + c2, size=(160, 8, 1024)),
        MemoryDep(name='buf82', index=c0, size=(160, 8192))]
buf83.met_dependencies = []
buf83.group.device = cuda:0
buf83.group.iteration = (160, 8192)
buf83.sizes = ([160], [8, 1024])
class buf83_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 1024}
    index0 = 1024*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf82', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf83', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = [MemoryDep(name='buf84', index=c0, size=(160,))]
buf84.unmet_dependencies = [MemoryDep(name='buf83', index=c0, size=(160,))]
buf84.met_dependencies = []
buf84.group.device = cuda:0
buf84.group.iteration = (160, 1)
buf84.sizes = ([160], [])
class buf84_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf84', get_index_1, rsqrt, None)
        return store


buf85: SchedulerNode(ComputedBuffer)
buf85.writes = [MemoryDep(name='buf85', index=c0, size=(160,))]
buf85.unmet_dependencies = [MemoryDep(name='buf82', index=c0, size=(160,))]
buf85.met_dependencies = [MemoryDep(name='primals_107', index=c0, size=(160,))]
buf85.group.device = cuda:0
buf85.group.iteration = (160, 1)
buf85.sizes = ([160], [])
class buf85_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_107', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf85', get_index_2, add, None)
        return store


buf86: SchedulerNode(ComputedBuffer)
buf86.writes = [MemoryDep(name='buf86', index=c0, size=(160,))]
buf86.unmet_dependencies = [MemoryDep(name='buf83', index=c0, size=(160,))]
buf86.met_dependencies = [MemoryDep(name='primals_108', index=c0, size=(160,))]
buf86.group.device = cuda:0
buf86.group.iteration = (160, 1)
buf86.sizes = ([160], [])
class buf86_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0001220852154804, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_108', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf86', get_index_2, add, None)
        return store


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = [MemoryDep(name='buf87', index=c0, size=(1310720,))]
buf87.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=c0, size=(1310720,)),
        MemoryDep(name='buf82', index=c1, size=(8, 160, 1024)),
        MemoryDep(name='buf83', index=c1, size=(8, 160, 1024))]
buf87.met_dependencies = 
    [   MemoryDep(name='primals_109', index=c1, size=(8, 160, 1024)),
        MemoryDep(name='primals_110', index=c1, size=(8, 160, 1024))]
buf87.group.device = cuda:0
buf87.group.iteration = (1310720, 1)
buf87.sizes = ([8, 160, 1024], [])
class buf87_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 1024}
    index0 = 163840*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf82', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf83', get_index_2)
        constant = ops.constant(8192, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_109', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_110', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, relu, None)
        return store


buf88: ExternKernelSchedulerNode(Convolution)
buf88.writes = [StarDep(name='buf88')]
buf88.unmet_dependencies = [StarDep(name='buf87')]
buf88.met_dependencies = [StarDep(name='primals_11')]
buf88.node.kernel = aten.convolution


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(160, 2048)),
        MemoryDep(name='buf89', index=c0, size=(160,))]
buf89.unmet_dependencies = [MemoryDep(name='buf88', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf89.met_dependencies = []
buf89.group.device = cuda:0
buf89.group.iteration = (160, 2048)
buf89.sizes = ([160], [8, 256])
class buf89_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(160,))]
buf90.unmet_dependencies = [MemoryDep(name='buf89', index=c0, size=(160,))]
buf90.met_dependencies = []
buf90.group.device = cuda:0
buf90.group.iteration = (160, 1)
buf90.sizes = ([160], [])
class buf90_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf90', get_index_1, div, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = 
    [   MemoryDep(name='buf91', index=c0, size=(160, 2048)),
        MemoryDep(name='buf91', index=c0, size=(160,))]
buf91.unmet_dependencies = 
    [   MemoryDep(name='buf88', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf90', index=c0, size=(160, 2048))]
buf91.met_dependencies = []
buf91.group.device = cuda:0
buf91.group.iteration = (160, 2048)
buf91.sizes = ([160], [8, 256])
class buf91_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf90', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf91', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf92: SchedulerNode(ComputedBuffer)
buf92.writes = [MemoryDep(name='buf92', index=c0, size=(160,))]
buf92.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(160,))]
buf92.met_dependencies = []
buf92.group.device = cuda:0
buf92.group.iteration = (160, 1)
buf92.sizes = ([160], [])
class buf92_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, rsqrt, None)
        return store


buf93: SchedulerNode(ComputedBuffer)
buf93.writes = [MemoryDep(name='buf93', index=c0, size=(160,))]
buf93.unmet_dependencies = [MemoryDep(name='buf90', index=c0, size=(160,))]
buf93.met_dependencies = [MemoryDep(name='primals_112', index=c0, size=(160,))]
buf93.group.device = cuda:0
buf93.group.iteration = (160, 1)
buf93.sizes = ([160], [])
class buf93_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_112', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf93', get_index_2, add, None)
        return store


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = [MemoryDep(name='buf94', index=c0, size=(160,))]
buf94.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(160,))]
buf94.met_dependencies = [MemoryDep(name='primals_113', index=c0, size=(160,))]
buf94.group.device = cuda:0
buf94.group.iteration = (160, 1)
buf94.sizes = ([160], [])
class buf94_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_113', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf94', get_index_2, add, None)
        return store


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(327680,))]
buf95.unmet_dependencies = 
    [   MemoryDep(name='buf88', index=c0, size=(327680,)),
        MemoryDep(name='buf90', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf91', index=c1, size=(8, 160, 256))]
buf95.met_dependencies = 
    [   MemoryDep(name='primals_114', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_115', index=c1, size=(8, 160, 256))]
buf95.group.device = cuda:0
buf95.group.iteration = (327680, 1)
buf95.sizes = ([8, 160, 256], [])
class buf95_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf90', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf91', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_114', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_115', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, relu, None)
        return store


buf96: ExternKernelSchedulerNode(Convolution)
buf96.writes = [StarDep(name='buf96')]
buf96.unmet_dependencies = [StarDep(name='buf95')]
buf96.met_dependencies = [StarDep(name='primals_12')]
buf96.node.kernel = aten.convolution


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = 
    [   MemoryDep(name='buf97', index=c0, size=(640, 2048)),
        MemoryDep(name='buf97', index=c0, size=(640,))]
buf97.unmet_dependencies = [MemoryDep(name='buf96', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf97.met_dependencies = []
buf97.group.device = cuda:0
buf97.group.iteration = (640, 2048)
buf97.sizes = ([640], [8, 256])
class buf97_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf97', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf98: SchedulerNode(ComputedBuffer)
buf98.writes = [MemoryDep(name='buf98', index=c0, size=(640,))]
buf98.unmet_dependencies = [MemoryDep(name='buf97', index=c0, size=(640,))]
buf98.met_dependencies = []
buf98.group.device = cuda:0
buf98.group.iteration = (640, 1)
buf98.sizes = ([640], [])
class buf98_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, div, None)
        return store


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = 
    [   MemoryDep(name='buf99', index=c0, size=(640, 2048)),
        MemoryDep(name='buf99', index=c0, size=(640,))]
buf99.unmet_dependencies = 
    [   MemoryDep(name='buf96', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf98', index=c0, size=(640, 2048))]
buf99.met_dependencies = []
buf99.group.device = cuda:0
buf99.group.iteration = (640, 2048)
buf99.sizes = ([640], [8, 256])
class buf99_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf99', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = [MemoryDep(name='buf100', index=c0, size=(640,))]
buf100.unmet_dependencies = [MemoryDep(name='buf99', index=c0, size=(640,))]
buf100.met_dependencies = []
buf100.group.device = cuda:0
buf100.group.iteration = (640, 1)
buf100.sizes = ([640], [])
class buf100_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf100', get_index_1, rsqrt, None)
        return store


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = [MemoryDep(name='buf101', index=c0, size=(640,))]
buf101.unmet_dependencies = [MemoryDep(name='buf98', index=c0, size=(640,))]
buf101.met_dependencies = [MemoryDep(name='primals_117', index=c0, size=(640,))]
buf101.group.device = cuda:0
buf101.group.iteration = (640, 1)
buf101.sizes = ([640], [])
class buf101_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_117', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf101', get_index_2, add, None)
        return store


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = [MemoryDep(name='buf102', index=c0, size=(640,))]
buf102.unmet_dependencies = [MemoryDep(name='buf99', index=c0, size=(640,))]
buf102.met_dependencies = [MemoryDep(name='primals_118', index=c0, size=(640,))]
buf102.group.device = cuda:0
buf102.group.iteration = (640, 1)
buf102.sizes = ([640], [])
class buf102_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_118', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, add, None)
        return store


buf103: ExternKernelSchedulerNode(Convolution)
buf103.writes = [StarDep(name='buf103')]
buf103.unmet_dependencies = [StarDep(name='buf79')]
buf103.met_dependencies = [StarDep(name='primals_13')]
buf103.node.kernel = aten.convolution


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = 
    [   MemoryDep(name='buf104', index=c0, size=(640, 2048)),
        MemoryDep(name='buf104', index=c0, size=(640,))]
buf104.unmet_dependencies = [MemoryDep(name='buf103', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf104.met_dependencies = []
buf104.group.device = cuda:0
buf104.group.iteration = (640, 2048)
buf104.sizes = ([640], [8, 256])
class buf104_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf104', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = [MemoryDep(name='buf105', index=c0, size=(640,))]
buf105.unmet_dependencies = [MemoryDep(name='buf104', index=c0, size=(640,))]
buf105.met_dependencies = []
buf105.group.device = cuda:0
buf105.group.iteration = (640, 1)
buf105.sizes = ([640], [])
class buf105_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf105', get_index_1, div, None)
        return store


buf106: SchedulerNode(ComputedBuffer)
buf106.writes = 
    [   MemoryDep(name='buf106', index=c0, size=(640, 2048)),
        MemoryDep(name='buf106', index=c0, size=(640,))]
buf106.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf105', index=c0, size=(640, 2048))]
buf106.met_dependencies = []
buf106.group.device = cuda:0
buf106.group.iteration = (640, 2048)
buf106.sizes = ([640], [8, 256])
class buf106_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf106', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = [MemoryDep(name='buf107', index=c0, size=(640,))]
buf107.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(640,))]
buf107.met_dependencies = []
buf107.group.device = cuda:0
buf107.group.iteration = (640, 1)
buf107.sizes = ([640], [])
class buf107_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf107', get_index_1, rsqrt, None)
        return store


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = [MemoryDep(name='buf108', index=c0, size=(640,))]
buf108.unmet_dependencies = [MemoryDep(name='buf105', index=c0, size=(640,))]
buf108.met_dependencies = [MemoryDep(name='primals_122', index=c0, size=(640,))]
buf108.group.device = cuda:0
buf108.group.iteration = (640, 1)
buf108.sizes = ([640], [])
class buf108_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_122', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf108', get_index_2, add, None)
        return store


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = [MemoryDep(name='buf109', index=c0, size=(640,))]
buf109.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(640,))]
buf109.met_dependencies = [MemoryDep(name='primals_123', index=c0, size=(640,))]
buf109.group.device = cuda:0
buf109.group.iteration = (640, 1)
buf109.sizes = ([640], [])
class buf109_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_123', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf109', get_index_2, add, None)
        return store


buf110: SchedulerNode(ComputedBuffer)
buf110.writes = [MemoryDep(name='buf110', index=c0, size=(1310720,))]
buf110.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0, size=(1310720,)),
        MemoryDep(name='buf105', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf106', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf96', index=c0, size=(1310720,)),
        MemoryDep(name='buf98', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf99', index=c1, size=(8, 640, 256))]
buf110.met_dependencies = 
    [   MemoryDep(name='primals_119', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_120', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_124', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_125', index=c1, size=(8, 640, 256))]
buf110.group.device = cuda:0
buf110.group.iteration = (1310720, 1)
buf110.sizes = ([8, 640, 256], [])
class buf110_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_120', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf103', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf105', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf106', get_index_7)
        constant_2 = ops.constant(2048, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_124', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_125', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf110', get_index_10, add_4, None)
        return store


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep(name='buf111', index=c0, size=(1310720,))]
buf111.unmet_dependencies = [MemoryDep(name='buf110', index=c0, size=(1310720,))]
buf111.met_dependencies = []
buf111.group.device = cuda:0
buf111.group.iteration = (1310720, 1)
buf111.sizes = ([1310720], [])
class buf111_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf111', get_index_1, relu, None)
        return store


buf112: ExternKernelSchedulerNode(Convolution)
buf112.writes = [StarDep(name='buf112')]
buf112.unmet_dependencies = [StarDep(name='buf111')]
buf112.met_dependencies = [StarDep(name='primals_14')]
buf112.node.kernel = aten.convolution


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = 
    [   MemoryDep(name='buf113', index=c0, size=(160, 2048)),
        MemoryDep(name='buf113', index=c0, size=(160,))]
buf113.unmet_dependencies = [MemoryDep(name='buf112', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf113.met_dependencies = []
buf113.group.device = cuda:0
buf113.group.iteration = (160, 2048)
buf113.sizes = ([160], [8, 256])
class buf113_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf113', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = [MemoryDep(name='buf114', index=c0, size=(160,))]
buf114.unmet_dependencies = [MemoryDep(name='buf113', index=c0, size=(160,))]
buf114.met_dependencies = []
buf114.group.device = cuda:0
buf114.group.iteration = (160, 1)
buf114.sizes = ([160], [])
class buf114_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf114', get_index_1, div, None)
        return store


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = 
    [   MemoryDep(name='buf115', index=c0, size=(160, 2048)),
        MemoryDep(name='buf115', index=c0, size=(160,))]
buf115.unmet_dependencies = 
    [   MemoryDep(name='buf112', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf114', index=c0, size=(160, 2048))]
buf115.met_dependencies = []
buf115.group.device = cuda:0
buf115.group.iteration = (160, 2048)
buf115.sizes = ([160], [8, 256])
class buf115_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf115', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = [MemoryDep(name='buf116', index=c0, size=(160,))]
buf116.unmet_dependencies = [MemoryDep(name='buf115', index=c0, size=(160,))]
buf116.met_dependencies = []
buf116.group.device = cuda:0
buf116.group.iteration = (160, 1)
buf116.sizes = ([160], [])
class buf116_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf116', get_index_1, rsqrt, None)
        return store


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(160,))]
buf117.unmet_dependencies = [MemoryDep(name='buf114', index=c0, size=(160,))]
buf117.met_dependencies = [MemoryDep(name='primals_127', index=c0, size=(160,))]
buf117.group.device = cuda:0
buf117.group.iteration = (160, 1)
buf117.sizes = ([160], [])
class buf117_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_127', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf117', get_index_2, add, None)
        return store


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = [MemoryDep(name='buf118', index=c0, size=(160,))]
buf118.unmet_dependencies = [MemoryDep(name='buf115', index=c0, size=(160,))]
buf118.met_dependencies = [MemoryDep(name='primals_128', index=c0, size=(160,))]
buf118.group.device = cuda:0
buf118.group.iteration = (160, 1)
buf118.sizes = ([160], [])
class buf118_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_128', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf118', get_index_2, add, None)
        return store


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = [MemoryDep(name='buf119', index=c0, size=(327680,))]
buf119.unmet_dependencies = 
    [   MemoryDep(name='buf112', index=c0, size=(327680,)),
        MemoryDep(name='buf114', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf115', index=c1, size=(8, 160, 256))]
buf119.met_dependencies = 
    [   MemoryDep(name='primals_129', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_130', index=c1, size=(8, 160, 256))]
buf119.group.device = cuda:0
buf119.group.iteration = (327680, 1)
buf119.sizes = ([8, 160, 256], [])
class buf119_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_129', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_130', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf119', get_index_5, relu, None)
        return store


buf120: ExternKernelSchedulerNode(Convolution)
buf120.writes = [StarDep(name='buf120')]
buf120.unmet_dependencies = [StarDep(name='buf119')]
buf120.met_dependencies = [StarDep(name='primals_15')]
buf120.node.kernel = aten.convolution


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = 
    [   MemoryDep(name='buf121', index=c0, size=(160, 2048)),
        MemoryDep(name='buf121', index=c0, size=(160,))]
buf121.unmet_dependencies = [MemoryDep(name='buf120', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf121.met_dependencies = []
buf121.group.device = cuda:0
buf121.group.iteration = (160, 2048)
buf121.sizes = ([160], [8, 256])
class buf121_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf121', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf122: SchedulerNode(ComputedBuffer)
buf122.writes = [MemoryDep(name='buf122', index=c0, size=(160,))]
buf122.unmet_dependencies = [MemoryDep(name='buf121', index=c0, size=(160,))]
buf122.met_dependencies = []
buf122.group.device = cuda:0
buf122.group.iteration = (160, 1)
buf122.sizes = ([160], [])
class buf122_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf122', get_index_1, div, None)
        return store


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = 
    [   MemoryDep(name='buf123', index=c0, size=(160, 2048)),
        MemoryDep(name='buf123', index=c0, size=(160,))]
buf123.unmet_dependencies = 
    [   MemoryDep(name='buf120', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf122', index=c0, size=(160, 2048))]
buf123.met_dependencies = []
buf123.group.device = cuda:0
buf123.group.iteration = (160, 2048)
buf123.sizes = ([160], [8, 256])
class buf123_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf123', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = [MemoryDep(name='buf124', index=c0, size=(160,))]
buf124.unmet_dependencies = [MemoryDep(name='buf123', index=c0, size=(160,))]
buf124.met_dependencies = []
buf124.group.device = cuda:0
buf124.group.iteration = (160, 1)
buf124.sizes = ([160], [])
class buf124_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf124', get_index_1, rsqrt, None)
        return store


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = [MemoryDep(name='buf125', index=c0, size=(160,))]
buf125.unmet_dependencies = [MemoryDep(name='buf122', index=c0, size=(160,))]
buf125.met_dependencies = [MemoryDep(name='primals_132', index=c0, size=(160,))]
buf125.group.device = cuda:0
buf125.group.iteration = (160, 1)
buf125.sizes = ([160], [])
class buf125_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_132', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, add, None)
        return store


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep(name='buf126', index=c0, size=(160,))]
buf126.unmet_dependencies = [MemoryDep(name='buf123', index=c0, size=(160,))]
buf126.met_dependencies = [MemoryDep(name='primals_133', index=c0, size=(160,))]
buf126.group.device = cuda:0
buf126.group.iteration = (160, 1)
buf126.sizes = ([160], [])
class buf126_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_133', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf126', get_index_2, add, None)
        return store


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(327680,))]
buf127.unmet_dependencies = 
    [   MemoryDep(name='buf120', index=c0, size=(327680,)),
        MemoryDep(name='buf122', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf123', index=c1, size=(8, 160, 256))]
buf127.met_dependencies = 
    [   MemoryDep(name='primals_134', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_135', index=c1, size=(8, 160, 256))]
buf127.group.device = cuda:0
buf127.group.iteration = (327680, 1)
buf127.sizes = ([8, 160, 256], [])
class buf127_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf123', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_134', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_135', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf127', get_index_5, relu, None)
        return store


buf128: ExternKernelSchedulerNode(Convolution)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf127')]
buf128.met_dependencies = [StarDep(name='primals_16')]
buf128.node.kernel = aten.convolution


buf129: SchedulerNode(ComputedBuffer)
buf129.writes = 
    [   MemoryDep(name='buf129', index=c0, size=(640, 2048)),
        MemoryDep(name='buf129', index=c0, size=(640,))]
buf129.unmet_dependencies = [MemoryDep(name='buf128', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf129.met_dependencies = []
buf129.group.device = cuda:0
buf129.group.iteration = (640, 2048)
buf129.sizes = ([640], [8, 256])
class buf129_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf129', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf130: SchedulerNode(ComputedBuffer)
buf130.writes = [MemoryDep(name='buf130', index=c0, size=(640,))]
buf130.unmet_dependencies = [MemoryDep(name='buf129', index=c0, size=(640,))]
buf130.met_dependencies = []
buf130.group.device = cuda:0
buf130.group.iteration = (640, 1)
buf130.sizes = ([640], [])
class buf130_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf130', get_index_1, div, None)
        return store


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = 
    [   MemoryDep(name='buf131', index=c0, size=(640, 2048)),
        MemoryDep(name='buf131', index=c0, size=(640,))]
buf131.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf130', index=c0, size=(640, 2048))]
buf131.met_dependencies = []
buf131.group.device = cuda:0
buf131.group.iteration = (640, 2048)
buf131.sizes = ([640], [8, 256])
class buf131_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf131', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = [MemoryDep(name='buf132', index=c0, size=(640,))]
buf132.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(640,))]
buf132.met_dependencies = []
buf132.group.device = cuda:0
buf132.group.iteration = (640, 1)
buf132.sizes = ([640], [])
class buf132_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf132', get_index_1, rsqrt, None)
        return store


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(640,))]
buf133.unmet_dependencies = [MemoryDep(name='buf130', index=c0, size=(640,))]
buf133.met_dependencies = [MemoryDep(name='primals_137', index=c0, size=(640,))]
buf133.group.device = cuda:0
buf133.group.iteration = (640, 1)
buf133.sizes = ([640], [])
class buf133_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_137', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf133', get_index_2, add, None)
        return store


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = [MemoryDep(name='buf134', index=c0, size=(640,))]
buf134.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(640,))]
buf134.met_dependencies = [MemoryDep(name='primals_138', index=c0, size=(640,))]
buf134.group.device = cuda:0
buf134.group.iteration = (640, 1)
buf134.sizes = ([640], [])
class buf134_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_138', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf134', get_index_2, add, None)
        return store


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(1310720,))]
buf135.unmet_dependencies = 
    [   MemoryDep(name='buf111', index=c0, size=(1310720,)),
        MemoryDep(name='buf128', index=c0, size=(1310720,)),
        MemoryDep(name='buf130', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf131', index=c1, size=(8, 640, 256))]
buf135.met_dependencies = 
    [   MemoryDep(name='primals_139', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_140', index=c1, size=(8, 640, 256))]
buf135.group.device = cuda:0
buf135.group.iteration = (1310720, 1)
buf135.sizes = ([8, 640, 256], [])
class buf135_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_139', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_140', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf111', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf135', get_index_6, relu, None)
        return store


buf136: ExternKernelSchedulerNode(Convolution)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf135')]
buf136.met_dependencies = [StarDep(name='primals_17')]
buf136.node.kernel = aten.convolution


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = 
    [   MemoryDep(name='buf137', index=c0, size=(160, 2048)),
        MemoryDep(name='buf137', index=c0, size=(160,))]
buf137.unmet_dependencies = [MemoryDep(name='buf136', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf137.met_dependencies = []
buf137.group.device = cuda:0
buf137.group.iteration = (160, 2048)
buf137.sizes = ([160], [8, 256])
class buf137_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf137', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = [MemoryDep(name='buf138', index=c0, size=(160,))]
buf138.unmet_dependencies = [MemoryDep(name='buf137', index=c0, size=(160,))]
buf138.met_dependencies = []
buf138.group.device = cuda:0
buf138.group.iteration = (160, 1)
buf138.sizes = ([160], [])
class buf138_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf138', get_index_1, div, None)
        return store


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = 
    [   MemoryDep(name='buf139', index=c0, size=(160, 2048)),
        MemoryDep(name='buf139', index=c0, size=(160,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf136', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf138', index=c0, size=(160, 2048))]
buf139.met_dependencies = []
buf139.group.device = cuda:0
buf139.group.iteration = (160, 2048)
buf139.sizes = ([160], [8, 256])
class buf139_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf138', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf139', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = [MemoryDep(name='buf140', index=c0, size=(160,))]
buf140.unmet_dependencies = [MemoryDep(name='buf139', index=c0, size=(160,))]
buf140.met_dependencies = []
buf140.group.device = cuda:0
buf140.group.iteration = (160, 1)
buf140.sizes = ([160], [])
class buf140_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf140', get_index_1, rsqrt, None)
        return store


buf141: SchedulerNode(ComputedBuffer)
buf141.writes = [MemoryDep(name='buf141', index=c0, size=(160,))]
buf141.unmet_dependencies = [MemoryDep(name='buf138', index=c0, size=(160,))]
buf141.met_dependencies = [MemoryDep(name='primals_142', index=c0, size=(160,))]
buf141.group.device = cuda:0
buf141.group.iteration = (160, 1)
buf141.sizes = ([160], [])
class buf141_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_142', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, add, None)
        return store


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = [MemoryDep(name='buf142', index=c0, size=(160,))]
buf142.unmet_dependencies = [MemoryDep(name='buf139', index=c0, size=(160,))]
buf142.met_dependencies = [MemoryDep(name='primals_143', index=c0, size=(160,))]
buf142.group.device = cuda:0
buf142.group.iteration = (160, 1)
buf142.sizes = ([160], [])
class buf142_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_143', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf142', get_index_2, add, None)
        return store


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = [MemoryDep(name='buf143', index=c0, size=(327680,))]
buf143.unmet_dependencies = 
    [   MemoryDep(name='buf136', index=c0, size=(327680,)),
        MemoryDep(name='buf138', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf139', index=c1, size=(8, 160, 256))]
buf143.met_dependencies = 
    [   MemoryDep(name='primals_144', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_145', index=c1, size=(8, 160, 256))]
buf143.group.device = cuda:0
buf143.group.iteration = (327680, 1)
buf143.sizes = ([8, 160, 256], [])
class buf143_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf138', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf139', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_144', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_145', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf143', get_index_5, relu, None)
        return store


buf144: ExternKernelSchedulerNode(Convolution)
buf144.writes = [StarDep(name='buf144')]
buf144.unmet_dependencies = [StarDep(name='buf143')]
buf144.met_dependencies = [StarDep(name='primals_18')]
buf144.node.kernel = aten.convolution


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = 
    [   MemoryDep(name='buf145', index=c0, size=(160, 2048)),
        MemoryDep(name='buf145', index=c0, size=(160,))]
buf145.unmet_dependencies = [MemoryDep(name='buf144', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf145.met_dependencies = []
buf145.group.device = cuda:0
buf145.group.iteration = (160, 2048)
buf145.sizes = ([160], [8, 256])
class buf145_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf145', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf146: SchedulerNode(ComputedBuffer)
buf146.writes = [MemoryDep(name='buf146', index=c0, size=(160,))]
buf146.unmet_dependencies = [MemoryDep(name='buf145', index=c0, size=(160,))]
buf146.met_dependencies = []
buf146.group.device = cuda:0
buf146.group.iteration = (160, 1)
buf146.sizes = ([160], [])
class buf146_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf146', get_index_1, div, None)
        return store


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = 
    [   MemoryDep(name='buf147', index=c0, size=(160, 2048)),
        MemoryDep(name='buf147', index=c0, size=(160,))]
buf147.unmet_dependencies = 
    [   MemoryDep(name='buf144', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf146', index=c0, size=(160, 2048))]
buf147.met_dependencies = []
buf147.group.device = cuda:0
buf147.group.iteration = (160, 2048)
buf147.sizes = ([160], [8, 256])
class buf147_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf146', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf147', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = [MemoryDep(name='buf148', index=c0, size=(160,))]
buf148.unmet_dependencies = [MemoryDep(name='buf147', index=c0, size=(160,))]
buf148.met_dependencies = []
buf148.group.device = cuda:0
buf148.group.iteration = (160, 1)
buf148.sizes = ([160], [])
class buf148_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf148', get_index_1, rsqrt, None)
        return store


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = [MemoryDep(name='buf149', index=c0, size=(160,))]
buf149.unmet_dependencies = [MemoryDep(name='buf146', index=c0, size=(160,))]
buf149.met_dependencies = [MemoryDep(name='primals_147', index=c0, size=(160,))]
buf149.group.device = cuda:0
buf149.group.iteration = (160, 1)
buf149.sizes = ([160], [])
class buf149_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_147', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf149', get_index_2, add, None)
        return store


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = [MemoryDep(name='buf150', index=c0, size=(160,))]
buf150.unmet_dependencies = [MemoryDep(name='buf147', index=c0, size=(160,))]
buf150.met_dependencies = [MemoryDep(name='primals_148', index=c0, size=(160,))]
buf150.group.device = cuda:0
buf150.group.iteration = (160, 1)
buf150.sizes = ([160], [])
class buf150_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_148', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf150', get_index_2, add, None)
        return store


buf151: SchedulerNode(ComputedBuffer)
buf151.writes = [MemoryDep(name='buf151', index=c0, size=(327680,))]
buf151.unmet_dependencies = 
    [   MemoryDep(name='buf144', index=c0, size=(327680,)),
        MemoryDep(name='buf146', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf147', index=c1, size=(8, 160, 256))]
buf151.met_dependencies = 
    [   MemoryDep(name='primals_149', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_150', index=c1, size=(8, 160, 256))]
buf151.group.device = cuda:0
buf151.group.iteration = (327680, 1)
buf151.sizes = ([8, 160, 256], [])
class buf151_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf146', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf147', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_149', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_150', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, relu, None)
        return store


buf152: ExternKernelSchedulerNode(Convolution)
buf152.writes = [StarDep(name='buf152')]
buf152.unmet_dependencies = [StarDep(name='buf151')]
buf152.met_dependencies = [StarDep(name='primals_19')]
buf152.node.kernel = aten.convolution


buf153: SchedulerNode(ComputedBuffer)
buf153.writes = 
    [   MemoryDep(name='buf153', index=c0, size=(640, 2048)),
        MemoryDep(name='buf153', index=c0, size=(640,))]
buf153.unmet_dependencies = [MemoryDep(name='buf152', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf153.met_dependencies = []
buf153.group.device = cuda:0
buf153.group.iteration = (640, 2048)
buf153.sizes = ([640], [8, 256])
class buf153_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf153', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = [MemoryDep(name='buf154', index=c0, size=(640,))]
buf154.unmet_dependencies = [MemoryDep(name='buf153', index=c0, size=(640,))]
buf154.met_dependencies = []
buf154.group.device = cuda:0
buf154.group.iteration = (640, 1)
buf154.sizes = ([640], [])
class buf154_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf154', get_index_1, div, None)
        return store


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = 
    [   MemoryDep(name='buf155', index=c0, size=(640, 2048)),
        MemoryDep(name='buf155', index=c0, size=(640,))]
buf155.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf154', index=c0, size=(640, 2048))]
buf155.met_dependencies = []
buf155.group.device = cuda:0
buf155.group.iteration = (640, 2048)
buf155.sizes = ([640], [8, 256])
class buf155_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf155', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = [MemoryDep(name='buf156', index=c0, size=(640,))]
buf156.unmet_dependencies = [MemoryDep(name='buf155', index=c0, size=(640,))]
buf156.met_dependencies = []
buf156.group.device = cuda:0
buf156.group.iteration = (640, 1)
buf156.sizes = ([640], [])
class buf156_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf156', get_index_1, rsqrt, None)
        return store


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(640,))]
buf157.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(640,))]
buf157.met_dependencies = [MemoryDep(name='primals_152', index=c0, size=(640,))]
buf157.group.device = cuda:0
buf157.group.iteration = (640, 1)
buf157.sizes = ([640], [])
class buf157_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_152', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf157', get_index_2, add, None)
        return store


buf158: SchedulerNode(ComputedBuffer)
buf158.writes = [MemoryDep(name='buf158', index=c0, size=(640,))]
buf158.unmet_dependencies = [MemoryDep(name='buf155', index=c0, size=(640,))]
buf158.met_dependencies = [MemoryDep(name='primals_153', index=c0, size=(640,))]
buf158.group.device = cuda:0
buf158.group.iteration = (640, 1)
buf158.sizes = ([640], [])
class buf158_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_153', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf158', get_index_2, add, None)
        return store


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = [MemoryDep(name='buf159', index=c0, size=(1310720,))]
buf159.unmet_dependencies = 
    [   MemoryDep(name='buf135', index=c0, size=(1310720,)),
        MemoryDep(name='buf152', index=c0, size=(1310720,)),
        MemoryDep(name='buf154', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf155', index=c1, size=(8, 640, 256))]
buf159.met_dependencies = 
    [   MemoryDep(name='primals_154', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_155', index=c1, size=(8, 640, 256))]
buf159.group.device = cuda:0
buf159.group.iteration = (1310720, 1)
buf159.sizes = ([8, 640, 256], [])
class buf159_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_154', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_155', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf135', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf159', get_index_6, relu, None)
        return store


buf160: ExternKernelSchedulerNode(Convolution)
buf160.writes = [StarDep(name='buf160')]
buf160.unmet_dependencies = [StarDep(name='buf159')]
buf160.met_dependencies = [StarDep(name='primals_20')]
buf160.node.kernel = aten.convolution


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = 
    [   MemoryDep(name='buf161', index=c0, size=(160, 2048)),
        MemoryDep(name='buf161', index=c0, size=(160,))]
buf161.unmet_dependencies = [MemoryDep(name='buf160', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf161.met_dependencies = []
buf161.group.device = cuda:0
buf161.group.iteration = (160, 2048)
buf161.sizes = ([160], [8, 256])
class buf161_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf161', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = [MemoryDep(name='buf162', index=c0, size=(160,))]
buf162.unmet_dependencies = [MemoryDep(name='buf161', index=c0, size=(160,))]
buf162.met_dependencies = []
buf162.group.device = cuda:0
buf162.group.iteration = (160, 1)
buf162.sizes = ([160], [])
class buf162_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, div, None)
        return store


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = 
    [   MemoryDep(name='buf163', index=c0, size=(160, 2048)),
        MemoryDep(name='buf163', index=c0, size=(160,))]
buf163.unmet_dependencies = 
    [   MemoryDep(name='buf160', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf162', index=c0, size=(160, 2048))]
buf163.met_dependencies = []
buf163.group.device = cuda:0
buf163.group.iteration = (160, 2048)
buf163.sizes = ([160], [8, 256])
class buf163_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf163', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf164: SchedulerNode(ComputedBuffer)
buf164.writes = [MemoryDep(name='buf164', index=c0, size=(160,))]
buf164.unmet_dependencies = [MemoryDep(name='buf163', index=c0, size=(160,))]
buf164.met_dependencies = []
buf164.group.device = cuda:0
buf164.group.iteration = (160, 1)
buf164.sizes = ([160], [])
class buf164_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf164', get_index_1, rsqrt, None)
        return store


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = [MemoryDep(name='buf165', index=c0, size=(160,))]
buf165.unmet_dependencies = [MemoryDep(name='buf162', index=c0, size=(160,))]
buf165.met_dependencies = [MemoryDep(name='primals_157', index=c0, size=(160,))]
buf165.group.device = cuda:0
buf165.group.iteration = (160, 1)
buf165.sizes = ([160], [])
class buf165_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_157', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf165', get_index_2, add, None)
        return store


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = [MemoryDep(name='buf166', index=c0, size=(160,))]
buf166.unmet_dependencies = [MemoryDep(name='buf163', index=c0, size=(160,))]
buf166.met_dependencies = [MemoryDep(name='primals_158', index=c0, size=(160,))]
buf166.group.device = cuda:0
buf166.group.iteration = (160, 1)
buf166.sizes = ([160], [])
class buf166_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_158', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf166', get_index_2, add, None)
        return store


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = [MemoryDep(name='buf167', index=c0, size=(327680,))]
buf167.unmet_dependencies = 
    [   MemoryDep(name='buf160', index=c0, size=(327680,)),
        MemoryDep(name='buf162', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf163', index=c1, size=(8, 160, 256))]
buf167.met_dependencies = 
    [   MemoryDep(name='primals_159', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_160', index=c1, size=(8, 160, 256))]
buf167.group.device = cuda:0
buf167.group.iteration = (327680, 1)
buf167.sizes = ([8, 160, 256], [])
class buf167_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf163', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_159', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_160', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, relu, None)
        return store


buf168: ExternKernelSchedulerNode(Convolution)
buf168.writes = [StarDep(name='buf168')]
buf168.unmet_dependencies = [StarDep(name='buf167')]
buf168.met_dependencies = [StarDep(name='primals_21')]
buf168.node.kernel = aten.convolution


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = 
    [   MemoryDep(name='buf169', index=c0, size=(160, 2048)),
        MemoryDep(name='buf169', index=c0, size=(160,))]
buf169.unmet_dependencies = [MemoryDep(name='buf168', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf169.met_dependencies = []
buf169.group.device = cuda:0
buf169.group.iteration = (160, 2048)
buf169.sizes = ([160], [8, 256])
class buf169_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf169', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = [MemoryDep(name='buf170', index=c0, size=(160,))]
buf170.unmet_dependencies = [MemoryDep(name='buf169', index=c0, size=(160,))]
buf170.met_dependencies = []
buf170.group.device = cuda:0
buf170.group.iteration = (160, 1)
buf170.sizes = ([160], [])
class buf170_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf170', get_index_1, div, None)
        return store


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = 
    [   MemoryDep(name='buf171', index=c0, size=(160, 2048)),
        MemoryDep(name='buf171', index=c0, size=(160,))]
buf171.unmet_dependencies = 
    [   MemoryDep(name='buf168', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf170', index=c0, size=(160, 2048))]
buf171.met_dependencies = []
buf171.group.device = cuda:0
buf171.group.iteration = (160, 2048)
buf171.sizes = ([160], [8, 256])
class buf171_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf171', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = [MemoryDep(name='buf172', index=c0, size=(160,))]
buf172.unmet_dependencies = [MemoryDep(name='buf171', index=c0, size=(160,))]
buf172.met_dependencies = []
buf172.group.device = cuda:0
buf172.group.iteration = (160, 1)
buf172.sizes = ([160], [])
class buf172_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf172', get_index_1, rsqrt, None)
        return store


buf173: SchedulerNode(ComputedBuffer)
buf173.writes = [MemoryDep(name='buf173', index=c0, size=(160,))]
buf173.unmet_dependencies = [MemoryDep(name='buf170', index=c0, size=(160,))]
buf173.met_dependencies = [MemoryDep(name='primals_162', index=c0, size=(160,))]
buf173.group.device = cuda:0
buf173.group.iteration = (160, 1)
buf173.sizes = ([160], [])
class buf173_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_162', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf173', get_index_2, add, None)
        return store


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = [MemoryDep(name='buf174', index=c0, size=(160,))]
buf174.unmet_dependencies = [MemoryDep(name='buf171', index=c0, size=(160,))]
buf174.met_dependencies = [MemoryDep(name='primals_163', index=c0, size=(160,))]
buf174.group.device = cuda:0
buf174.group.iteration = (160, 1)
buf174.sizes = ([160], [])
class buf174_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_163', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf174', get_index_2, add, None)
        return store


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = [MemoryDep(name='buf175', index=c0, size=(327680,))]
buf175.unmet_dependencies = 
    [   MemoryDep(name='buf168', index=c0, size=(327680,)),
        MemoryDep(name='buf170', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf171', index=c1, size=(8, 160, 256))]
buf175.met_dependencies = 
    [   MemoryDep(name='primals_164', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_165', index=c1, size=(8, 160, 256))]
buf175.group.device = cuda:0
buf175.group.iteration = (327680, 1)
buf175.sizes = ([8, 160, 256], [])
class buf175_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf171', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_164', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_165', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, relu, None)
        return store


buf176: ExternKernelSchedulerNode(Convolution)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf175')]
buf176.met_dependencies = [StarDep(name='primals_22')]
buf176.node.kernel = aten.convolution


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = 
    [   MemoryDep(name='buf177', index=c0, size=(640, 2048)),
        MemoryDep(name='buf177', index=c0, size=(640,))]
buf177.unmet_dependencies = [MemoryDep(name='buf176', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf177.met_dependencies = []
buf177.group.device = cuda:0
buf177.group.iteration = (640, 2048)
buf177.sizes = ([640], [8, 256])
class buf177_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf177', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = [MemoryDep(name='buf178', index=c0, size=(640,))]
buf178.unmet_dependencies = [MemoryDep(name='buf177', index=c0, size=(640,))]
buf178.met_dependencies = []
buf178.group.device = cuda:0
buf178.group.iteration = (640, 1)
buf178.sizes = ([640], [])
class buf178_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, div, None)
        return store


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = 
    [   MemoryDep(name='buf179', index=c0, size=(640, 2048)),
        MemoryDep(name='buf179', index=c0, size=(640,))]
buf179.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf178', index=c0, size=(640, 2048))]
buf179.met_dependencies = []
buf179.group.device = cuda:0
buf179.group.iteration = (640, 2048)
buf179.sizes = ([640], [8, 256])
class buf179_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf178', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf179', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = [MemoryDep(name='buf180', index=c0, size=(640,))]
buf180.unmet_dependencies = [MemoryDep(name='buf179', index=c0, size=(640,))]
buf180.met_dependencies = []
buf180.group.device = cuda:0
buf180.group.iteration = (640, 1)
buf180.sizes = ([640], [])
class buf180_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf180', get_index_1, rsqrt, None)
        return store


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = [MemoryDep(name='buf181', index=c0, size=(640,))]
buf181.unmet_dependencies = [MemoryDep(name='buf178', index=c0, size=(640,))]
buf181.met_dependencies = [MemoryDep(name='primals_167', index=c0, size=(640,))]
buf181.group.device = cuda:0
buf181.group.iteration = (640, 1)
buf181.sizes = ([640], [])
class buf181_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_167', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf181', get_index_2, add, None)
        return store


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = [MemoryDep(name='buf182', index=c0, size=(640,))]
buf182.unmet_dependencies = [MemoryDep(name='buf179', index=c0, size=(640,))]
buf182.met_dependencies = [MemoryDep(name='primals_168', index=c0, size=(640,))]
buf182.group.device = cuda:0
buf182.group.iteration = (640, 1)
buf182.sizes = ([640], [])
class buf182_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_168', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf182', get_index_2, add, None)
        return store


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = [MemoryDep(name='buf183', index=c0, size=(1310720,))]
buf183.unmet_dependencies = 
    [   MemoryDep(name='buf159', index=c0, size=(1310720,)),
        MemoryDep(name='buf176', index=c0, size=(1310720,)),
        MemoryDep(name='buf178', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf179', index=c1, size=(8, 640, 256))]
buf183.met_dependencies = 
    [   MemoryDep(name='primals_169', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_170', index=c1, size=(8, 640, 256))]
buf183.group.device = cuda:0
buf183.group.iteration = (1310720, 1)
buf183.sizes = ([8, 640, 256], [])
class buf183_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf178', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf179', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_169', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_170', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf159', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf183', get_index_6, relu, None)
        return store


buf184: ExternKernelSchedulerNode(Convolution)
buf184.writes = [StarDep(name='buf184')]
buf184.unmet_dependencies = [StarDep(name='buf183')]
buf184.met_dependencies = [StarDep(name='primals_23')]
buf184.node.kernel = aten.convolution


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = 
    [   MemoryDep(name='buf185', index=c0, size=(160, 2048)),
        MemoryDep(name='buf185', index=c0, size=(160,))]
buf185.unmet_dependencies = [MemoryDep(name='buf184', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf185.met_dependencies = []
buf185.group.device = cuda:0
buf185.group.iteration = (160, 2048)
buf185.sizes = ([160], [8, 256])
class buf185_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf185', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = [MemoryDep(name='buf186', index=c0, size=(160,))]
buf186.unmet_dependencies = [MemoryDep(name='buf185', index=c0, size=(160,))]
buf186.met_dependencies = []
buf186.group.device = cuda:0
buf186.group.iteration = (160, 1)
buf186.sizes = ([160], [])
class buf186_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf186', get_index_1, div, None)
        return store


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = 
    [   MemoryDep(name='buf187', index=c0, size=(160, 2048)),
        MemoryDep(name='buf187', index=c0, size=(160,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf184', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf186', index=c0, size=(160, 2048))]
buf187.met_dependencies = []
buf187.group.device = cuda:0
buf187.group.iteration = (160, 2048)
buf187.sizes = ([160], [8, 256])
class buf187_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf186', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf187', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf188: SchedulerNode(ComputedBuffer)
buf188.writes = [MemoryDep(name='buf188', index=c0, size=(160,))]
buf188.unmet_dependencies = [MemoryDep(name='buf187', index=c0, size=(160,))]
buf188.met_dependencies = []
buf188.group.device = cuda:0
buf188.group.iteration = (160, 1)
buf188.sizes = ([160], [])
class buf188_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf188', get_index_1, rsqrt, None)
        return store


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = [MemoryDep(name='buf189', index=c0, size=(160,))]
buf189.unmet_dependencies = [MemoryDep(name='buf186', index=c0, size=(160,))]
buf189.met_dependencies = [MemoryDep(name='primals_172', index=c0, size=(160,))]
buf189.group.device = cuda:0
buf189.group.iteration = (160, 1)
buf189.sizes = ([160], [])
class buf189_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_172', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf189', get_index_2, add, None)
        return store


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = [MemoryDep(name='buf190', index=c0, size=(160,))]
buf190.unmet_dependencies = [MemoryDep(name='buf187', index=c0, size=(160,))]
buf190.met_dependencies = [MemoryDep(name='primals_173', index=c0, size=(160,))]
buf190.group.device = cuda:0
buf190.group.iteration = (160, 1)
buf190.sizes = ([160], [])
class buf190_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_173', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf190', get_index_2, add, None)
        return store


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(327680,))]
buf191.unmet_dependencies = 
    [   MemoryDep(name='buf184', index=c0, size=(327680,)),
        MemoryDep(name='buf186', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf187', index=c1, size=(8, 160, 256))]
buf191.met_dependencies = 
    [   MemoryDep(name='primals_174', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_175', index=c1, size=(8, 160, 256))]
buf191.group.device = cuda:0
buf191.group.iteration = (327680, 1)
buf191.sizes = ([8, 160, 256], [])
class buf191_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf186', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf187', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_174', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_175', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf191', get_index_5, relu, None)
        return store


buf192: ExternKernelSchedulerNode(Convolution)
buf192.writes = [StarDep(name='buf192')]
buf192.unmet_dependencies = [StarDep(name='buf191')]
buf192.met_dependencies = [StarDep(name='primals_24')]
buf192.node.kernel = aten.convolution


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = 
    [   MemoryDep(name='buf193', index=c0, size=(160, 2048)),
        MemoryDep(name='buf193', index=c0, size=(160,))]
buf193.unmet_dependencies = [MemoryDep(name='buf192', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf193.met_dependencies = []
buf193.group.device = cuda:0
buf193.group.iteration = (160, 2048)
buf193.sizes = ([160], [8, 256])
class buf193_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf193', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf194: SchedulerNode(ComputedBuffer)
buf194.writes = [MemoryDep(name='buf194', index=c0, size=(160,))]
buf194.unmet_dependencies = [MemoryDep(name='buf193', index=c0, size=(160,))]
buf194.met_dependencies = []
buf194.group.device = cuda:0
buf194.group.iteration = (160, 1)
buf194.sizes = ([160], [])
class buf194_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf194', get_index_1, div, None)
        return store


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = 
    [   MemoryDep(name='buf195', index=c0, size=(160, 2048)),
        MemoryDep(name='buf195', index=c0, size=(160,))]
buf195.unmet_dependencies = 
    [   MemoryDep(name='buf192', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf194', index=c0, size=(160, 2048))]
buf195.met_dependencies = []
buf195.group.device = cuda:0
buf195.group.iteration = (160, 2048)
buf195.sizes = ([160], [8, 256])
class buf195_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf194', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf195', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = [MemoryDep(name='buf196', index=c0, size=(160,))]
buf196.unmet_dependencies = [MemoryDep(name='buf195', index=c0, size=(160,))]
buf196.met_dependencies = []
buf196.group.device = cuda:0
buf196.group.iteration = (160, 1)
buf196.sizes = ([160], [])
class buf196_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, rsqrt, None)
        return store


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = [MemoryDep(name='buf197', index=c0, size=(160,))]
buf197.unmet_dependencies = [MemoryDep(name='buf194', index=c0, size=(160,))]
buf197.met_dependencies = [MemoryDep(name='primals_177', index=c0, size=(160,))]
buf197.group.device = cuda:0
buf197.group.iteration = (160, 1)
buf197.sizes = ([160], [])
class buf197_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_177', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf197', get_index_2, add, None)
        return store


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = [MemoryDep(name='buf198', index=c0, size=(160,))]
buf198.unmet_dependencies = [MemoryDep(name='buf195', index=c0, size=(160,))]
buf198.met_dependencies = [MemoryDep(name='primals_178', index=c0, size=(160,))]
buf198.group.device = cuda:0
buf198.group.iteration = (160, 1)
buf198.sizes = ([160], [])
class buf198_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_178', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf198', get_index_2, add, None)
        return store


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(327680,))]
buf199.unmet_dependencies = 
    [   MemoryDep(name='buf192', index=c0, size=(327680,)),
        MemoryDep(name='buf194', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf195', index=c1, size=(8, 160, 256))]
buf199.met_dependencies = 
    [   MemoryDep(name='primals_179', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_180', index=c1, size=(8, 160, 256))]
buf199.group.device = cuda:0
buf199.group.iteration = (327680, 1)
buf199.sizes = ([8, 160, 256], [])
class buf199_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf194', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_179', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_180', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, relu, None)
        return store


buf200: ExternKernelSchedulerNode(Convolution)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf199')]
buf200.met_dependencies = [StarDep(name='primals_25')]
buf200.node.kernel = aten.convolution


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = 
    [   MemoryDep(name='buf201', index=c0, size=(640, 2048)),
        MemoryDep(name='buf201', index=c0, size=(640,))]
buf201.unmet_dependencies = [MemoryDep(name='buf200', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf201.met_dependencies = []
buf201.group.device = cuda:0
buf201.group.iteration = (640, 2048)
buf201.sizes = ([640], [8, 256])
class buf201_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf201', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = [MemoryDep(name='buf202', index=c0, size=(640,))]
buf202.unmet_dependencies = [MemoryDep(name='buf201', index=c0, size=(640,))]
buf202.met_dependencies = []
buf202.group.device = cuda:0
buf202.group.iteration = (640, 1)
buf202.sizes = ([640], [])
class buf202_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf202', get_index_1, div, None)
        return store


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(640, 2048)),
        MemoryDep(name='buf203', index=c0, size=(640,))]
buf203.unmet_dependencies = 
    [   MemoryDep(name='buf200', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf202', index=c0, size=(640, 2048))]
buf203.met_dependencies = []
buf203.group.device = cuda:0
buf203.group.iteration = (640, 2048)
buf203.sizes = ([640], [8, 256])
class buf203_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf203', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = [MemoryDep(name='buf204', index=c0, size=(640,))]
buf204.unmet_dependencies = [MemoryDep(name='buf203', index=c0, size=(640,))]
buf204.met_dependencies = []
buf204.group.device = cuda:0
buf204.group.iteration = (640, 1)
buf204.sizes = ([640], [])
class buf204_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf204', get_index_1, rsqrt, None)
        return store


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(640,))]
buf205.unmet_dependencies = [MemoryDep(name='buf202', index=c0, size=(640,))]
buf205.met_dependencies = [MemoryDep(name='primals_182', index=c0, size=(640,))]
buf205.group.device = cuda:0
buf205.group.iteration = (640, 1)
buf205.sizes = ([640], [])
class buf205_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_182', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf205', get_index_2, add, None)
        return store


buf206: SchedulerNode(ComputedBuffer)
buf206.writes = [MemoryDep(name='buf206', index=c0, size=(640,))]
buf206.unmet_dependencies = [MemoryDep(name='buf203', index=c0, size=(640,))]
buf206.met_dependencies = [MemoryDep(name='primals_183', index=c0, size=(640,))]
buf206.group.device = cuda:0
buf206.group.iteration = (640, 1)
buf206.sizes = ([640], [])
class buf206_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_183', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf206', get_index_2, add, None)
        return store


buf207: SchedulerNode(ComputedBuffer)
buf207.writes = [MemoryDep(name='buf207', index=c0, size=(1310720,))]
buf207.unmet_dependencies = 
    [   MemoryDep(name='buf183', index=c0, size=(1310720,)),
        MemoryDep(name='buf200', index=c0, size=(1310720,)),
        MemoryDep(name='buf202', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf203', index=c1, size=(8, 640, 256))]
buf207.met_dependencies = 
    [   MemoryDep(name='primals_184', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_185', index=c1, size=(8, 640, 256))]
buf207.group.device = cuda:0
buf207.group.iteration = (1310720, 1)
buf207.sizes = ([8, 640, 256], [])
class buf207_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_184', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_185', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf183', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf207', get_index_6, relu, None)
        return store


buf208: ExternKernelSchedulerNode(Convolution)
buf208.writes = [StarDep(name='buf208')]
buf208.unmet_dependencies = [StarDep(name='buf207')]
buf208.met_dependencies = [StarDep(name='primals_26')]
buf208.node.kernel = aten.convolution


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = 
    [   MemoryDep(name='buf209', index=c0, size=(160, 2048)),
        MemoryDep(name='buf209', index=c0, size=(160,))]
buf209.unmet_dependencies = [MemoryDep(name='buf208', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf209.met_dependencies = []
buf209.group.device = cuda:0
buf209.group.iteration = (160, 2048)
buf209.sizes = ([160], [8, 256])
class buf209_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf209', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = [MemoryDep(name='buf210', index=c0, size=(160,))]
buf210.unmet_dependencies = [MemoryDep(name='buf209', index=c0, size=(160,))]
buf210.met_dependencies = []
buf210.group.device = cuda:0
buf210.group.iteration = (160, 1)
buf210.sizes = ([160], [])
class buf210_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf210', get_index_1, div, None)
        return store


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = 
    [   MemoryDep(name='buf211', index=c0, size=(160, 2048)),
        MemoryDep(name='buf211', index=c0, size=(160,))]
buf211.unmet_dependencies = 
    [   MemoryDep(name='buf208', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf210', index=c0, size=(160, 2048))]
buf211.met_dependencies = []
buf211.group.device = cuda:0
buf211.group.iteration = (160, 2048)
buf211.sizes = ([160], [8, 256])
class buf211_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf210', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf211', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(160,))]
buf212.unmet_dependencies = [MemoryDep(name='buf211', index=c0, size=(160,))]
buf212.met_dependencies = []
buf212.group.device = cuda:0
buf212.group.iteration = (160, 1)
buf212.sizes = ([160], [])
class buf212_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf212', get_index_1, rsqrt, None)
        return store


buf213: SchedulerNode(ComputedBuffer)
buf213.writes = [MemoryDep(name='buf213', index=c0, size=(160,))]
buf213.unmet_dependencies = [MemoryDep(name='buf210', index=c0, size=(160,))]
buf213.met_dependencies = [MemoryDep(name='primals_187', index=c0, size=(160,))]
buf213.group.device = cuda:0
buf213.group.iteration = (160, 1)
buf213.sizes = ([160], [])
class buf213_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_187', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf213', get_index_2, add, None)
        return store


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = [MemoryDep(name='buf214', index=c0, size=(160,))]
buf214.unmet_dependencies = [MemoryDep(name='buf211', index=c0, size=(160,))]
buf214.met_dependencies = [MemoryDep(name='primals_188', index=c0, size=(160,))]
buf214.group.device = cuda:0
buf214.group.iteration = (160, 1)
buf214.sizes = ([160], [])
class buf214_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_188', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf214', get_index_2, add, None)
        return store


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = [MemoryDep(name='buf215', index=c0, size=(327680,))]
buf215.unmet_dependencies = 
    [   MemoryDep(name='buf208', index=c0, size=(327680,)),
        MemoryDep(name='buf210', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf211', index=c1, size=(8, 160, 256))]
buf215.met_dependencies = 
    [   MemoryDep(name='primals_189', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_190', index=c1, size=(8, 160, 256))]
buf215.group.device = cuda:0
buf215.group.iteration = (327680, 1)
buf215.sizes = ([8, 160, 256], [])
class buf215_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf210', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf211', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_189', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_190', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf215', get_index_5, relu, None)
        return store


buf216: ExternKernelSchedulerNode(Convolution)
buf216.writes = [StarDep(name='buf216')]
buf216.unmet_dependencies = [StarDep(name='buf215')]
buf216.met_dependencies = [StarDep(name='primals_27')]
buf216.node.kernel = aten.convolution


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = 
    [   MemoryDep(name='buf217', index=c0, size=(160, 2048)),
        MemoryDep(name='buf217', index=c0, size=(160,))]
buf217.unmet_dependencies = [MemoryDep(name='buf216', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256))]
buf217.met_dependencies = []
buf217.group.device = cuda:0
buf217.group.iteration = (160, 2048)
buf217.sizes = ([160], [8, 256])
class buf217_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf217', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = [MemoryDep(name='buf218', index=c0, size=(160,))]
buf218.unmet_dependencies = [MemoryDep(name='buf217', index=c0, size=(160,))]
buf218.met_dependencies = []
buf218.group.device = cuda:0
buf218.group.iteration = (160, 1)
buf218.sizes = ([160], [])
class buf218_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf218', get_index_1, div, None)
        return store


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = 
    [   MemoryDep(name='buf219', index=c0, size=(160, 2048)),
        MemoryDep(name='buf219', index=c0, size=(160,))]
buf219.unmet_dependencies = 
    [   MemoryDep(name='buf216', index=256*c0 + 40960*c1 + c2, size=(160, 8, 256)),
        MemoryDep(name='buf218', index=c0, size=(160, 2048))]
buf219.met_dependencies = []
buf219.group.device = cuda:0
buf219.group.iteration = (160, 2048)
buf219.sizes = ([160], [8, 256])
class buf219_loop_body:
    var_ranges = {z0: 160, z1: 8, z2: 256}
    index0 = 256*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf219', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = [MemoryDep(name='buf220', index=c0, size=(160,))]
buf220.unmet_dependencies = [MemoryDep(name='buf219', index=c0, size=(160,))]
buf220.met_dependencies = []
buf220.group.device = cuda:0
buf220.group.iteration = (160, 1)
buf220.sizes = ([160], [])
class buf220_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf220', get_index_1, rsqrt, None)
        return store


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep(name='buf221', index=c0, size=(160,))]
buf221.unmet_dependencies = [MemoryDep(name='buf218', index=c0, size=(160,))]
buf221.met_dependencies = [MemoryDep(name='primals_192', index=c0, size=(160,))]
buf221.group.device = cuda:0
buf221.group.iteration = (160, 1)
buf221.sizes = ([160], [])
class buf221_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_192', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf221', get_index_2, add, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = [MemoryDep(name='buf222', index=c0, size=(160,))]
buf222.unmet_dependencies = [MemoryDep(name='buf219', index=c0, size=(160,))]
buf222.met_dependencies = [MemoryDep(name='primals_193', index=c0, size=(160,))]
buf222.group.device = cuda:0
buf222.group.iteration = (160, 1)
buf222.sizes = ([160], [])
class buf222_loop_body:
    var_ranges = {z0: 160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_193', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf222', get_index_2, add, None)
        return store


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(327680,))]
buf223.unmet_dependencies = 
    [   MemoryDep(name='buf216', index=c0, size=(327680,)),
        MemoryDep(name='buf218', index=c1, size=(8, 160, 256)),
        MemoryDep(name='buf219', index=c1, size=(8, 160, 256))]
buf223.met_dependencies = 
    [   MemoryDep(name='primals_194', index=c1, size=(8, 160, 256)),
        MemoryDep(name='primals_195', index=c1, size=(8, 160, 256))]
buf223.group.device = cuda:0
buf223.group.iteration = (327680, 1)
buf223.sizes = ([8, 160, 256], [])
class buf223_loop_body:
    var_ranges = {z0: 8, z1: 160, z2: 256}
    index0 = 40960*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_194', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_195', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, relu, None)
        return store


buf224: ExternKernelSchedulerNode(Convolution)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf223')]
buf224.met_dependencies = [StarDep(name='primals_28')]
buf224.node.kernel = aten.convolution


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = 
    [   MemoryDep(name='buf225', index=c0, size=(640, 2048)),
        MemoryDep(name='buf225', index=c0, size=(640,))]
buf225.unmet_dependencies = [MemoryDep(name='buf224', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256))]
buf225.met_dependencies = []
buf225.group.device = cuda:0
buf225.group.iteration = (640, 2048)
buf225.sizes = ([640], [8, 256])
class buf225_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf225', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf226: SchedulerNode(ComputedBuffer)
buf226.writes = [MemoryDep(name='buf226', index=c0, size=(640,))]
buf226.unmet_dependencies = [MemoryDep(name='buf225', index=c0, size=(640,))]
buf226.met_dependencies = []
buf226.group.device = cuda:0
buf226.group.iteration = (640, 1)
buf226.sizes = ([640], [])
class buf226_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf226', get_index_1, div, None)
        return store


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = 
    [   MemoryDep(name='buf227', index=c0, size=(640, 2048)),
        MemoryDep(name='buf227', index=c0, size=(640,))]
buf227.unmet_dependencies = 
    [   MemoryDep(name='buf224', index=256*c0 + 163840*c1 + c2, size=(640, 8, 256)),
        MemoryDep(name='buf226', index=c0, size=(640, 2048))]
buf227.met_dependencies = []
buf227.group.device = cuda:0
buf227.group.iteration = (640, 2048)
buf227.sizes = ([640], [8, 256])
class buf227_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 256}
    index0 = 256*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf227', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf228: SchedulerNode(ComputedBuffer)
buf228.writes = [MemoryDep(name='buf228', index=c0, size=(640,))]
buf228.unmet_dependencies = [MemoryDep(name='buf227', index=c0, size=(640,))]
buf228.met_dependencies = []
buf228.group.device = cuda:0
buf228.group.iteration = (640, 1)
buf228.sizes = ([640], [])
class buf228_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf228', get_index_1, rsqrt, None)
        return store


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = [MemoryDep(name='buf229', index=c0, size=(640,))]
buf229.unmet_dependencies = [MemoryDep(name='buf226', index=c0, size=(640,))]
buf229.met_dependencies = [MemoryDep(name='primals_197', index=c0, size=(640,))]
buf229.group.device = cuda:0
buf229.group.iteration = (640, 1)
buf229.sizes = ([640], [])
class buf229_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_197', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf229', get_index_2, add, None)
        return store


buf230: SchedulerNode(ComputedBuffer)
buf230.writes = [MemoryDep(name='buf230', index=c0, size=(640,))]
buf230.unmet_dependencies = [MemoryDep(name='buf227', index=c0, size=(640,))]
buf230.met_dependencies = [MemoryDep(name='primals_198', index=c0, size=(640,))]
buf230.group.device = cuda:0
buf230.group.iteration = (640, 1)
buf230.sizes = ([640], [])
class buf230_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_198', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf230', get_index_2, add, None)
        return store


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = [MemoryDep(name='buf231', index=c0, size=(1310720,))]
buf231.unmet_dependencies = 
    [   MemoryDep(name='buf207', index=c0, size=(1310720,)),
        MemoryDep(name='buf224', index=c0, size=(1310720,)),
        MemoryDep(name='buf226', index=c1, size=(8, 640, 256)),
        MemoryDep(name='buf227', index=c1, size=(8, 640, 256))]
buf231.met_dependencies = 
    [   MemoryDep(name='primals_199', index=c1, size=(8, 640, 256)),
        MemoryDep(name='primals_200', index=c1, size=(8, 640, 256))]
buf231.group.device = cuda:0
buf231.group.iteration = (1310720, 1)
buf231.sizes = ([8, 640, 256], [])
class buf231_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 256}
    index0 = 163840*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_199', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_200', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf207', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf231', get_index_6, relu, None)
        return store


buf232: ExternKernelSchedulerNode(Convolution)
buf232.writes = [StarDep(name='buf232')]
buf232.unmet_dependencies = [StarDep(name='buf231')]
buf232.met_dependencies = [StarDep(name='primals_29')]
buf232.node.kernel = aten.convolution


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = 
    [   MemoryDep(name='buf233', index=c0, size=(1920, 2048)),
        MemoryDep(name='buf233', index=c0, size=(1920,))]
buf233.unmet_dependencies = [MemoryDep(name='buf232', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256))]
buf233.met_dependencies = []
buf233.group.device = cuda:0
buf233.group.iteration = (1920, 2048)
buf233.sizes = ([1920], [8, 256])
class buf233_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 256}
    index0 = 256*z0 + 491520*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf233', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = [MemoryDep(name='buf234', index=c0, size=(1920,))]
buf234.unmet_dependencies = [MemoryDep(name='buf233', index=c0, size=(1920,))]
buf234.met_dependencies = []
buf234.group.device = cuda:0
buf234.group.iteration = (1920, 1)
buf234.sizes = ([1920], [])
class buf234_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf234', get_index_1, div, None)
        return store


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = 
    [   MemoryDep(name='buf235', index=c0, size=(1920, 2048)),
        MemoryDep(name='buf235', index=c0, size=(1920,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf232', index=256*c0 + 491520*c1 + c2, size=(1920, 8, 256)),
        MemoryDep(name='buf234', index=c0, size=(1920, 2048))]
buf235.met_dependencies = []
buf235.group.device = cuda:0
buf235.group.iteration = (1920, 2048)
buf235.sizes = ([1920], [8, 256])
class buf235_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 256}
    index0 = 256*z0 + 491520*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf234', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf235', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = [MemoryDep(name='buf236', index=c0, size=(1920,))]
buf236.unmet_dependencies = [MemoryDep(name='buf235', index=c0, size=(1920,))]
buf236.met_dependencies = []
buf236.group.device = cuda:0
buf236.group.iteration = (1920, 1)
buf236.sizes = ([1920], [])
class buf236_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf236', get_index_1, rsqrt, None)
        return store


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = [MemoryDep(name='buf237', index=c0, size=(1920,))]
buf237.unmet_dependencies = [MemoryDep(name='buf234', index=c0, size=(1920,))]
buf237.met_dependencies = [MemoryDep(name='primals_202', index=c0, size=(1920,))]
buf237.group.device = cuda:0
buf237.group.iteration = (1920, 1)
buf237.sizes = ([1920], [])
class buf237_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_202', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf237', get_index_2, add, None)
        return store


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = [MemoryDep(name='buf238', index=c0, size=(1920,))]
buf238.unmet_dependencies = [MemoryDep(name='buf235', index=c0, size=(1920,))]
buf238.met_dependencies = [MemoryDep(name='primals_203', index=c0, size=(1920,))]
buf238.group.device = cuda:0
buf238.group.iteration = (1920, 1)
buf238.sizes = ([1920], [])
class buf238_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_203', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf238', get_index_2, add, None)
        return store


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(3932160,))]
buf239.unmet_dependencies = 
    [   MemoryDep(name='buf232', index=c0, size=(3932160,)),
        MemoryDep(name='buf234', index=c1, size=(8, 1920, 256)),
        MemoryDep(name='buf235', index=c1, size=(8, 1920, 256))]
buf239.met_dependencies = 
    [   MemoryDep(name='primals_204', index=c1, size=(8, 1920, 256)),
        MemoryDep(name='primals_205', index=c1, size=(8, 1920, 256))]
buf239.group.device = cuda:0
buf239.group.iteration = (3932160, 1)
buf239.sizes = ([8, 1920, 256], [])
class buf239_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 256}
    index0 = 491520*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf234', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_204', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_205', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf239', get_index_5, relu, None)
        return store


buf240: ExternKernelSchedulerNode(Convolution)
buf240.writes = [StarDep(name='buf240')]
buf240.unmet_dependencies = [StarDep(name='buf239')]
buf240.met_dependencies = [StarDep(name='primals_30')]
buf240.node.kernel = aten.convolution


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = 
    [   MemoryDep(name='buf241', index=c0, size=(1920, 512)),
        MemoryDep(name='buf241', index=c0, size=(1920,))]
buf241.unmet_dependencies = [MemoryDep(name='buf240', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf241.met_dependencies = []
buf241.group.device = cuda:0
buf241.group.iteration = (1920, 512)
buf241.sizes = ([1920], [8, 64])
class buf241_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf241', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = [MemoryDep(name='buf242', index=c0, size=(1920,))]
buf242.unmet_dependencies = [MemoryDep(name='buf241', index=c0, size=(1920,))]
buf242.met_dependencies = []
buf242.group.device = cuda:0
buf242.group.iteration = (1920, 1)
buf242.sizes = ([1920], [])
class buf242_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf242', get_index_1, div, None)
        return store


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = 
    [   MemoryDep(name='buf243', index=c0, size=(1920, 512)),
        MemoryDep(name='buf243', index=c0, size=(1920,))]
buf243.unmet_dependencies = 
    [   MemoryDep(name='buf240', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf242', index=c0, size=(1920, 512))]
buf243.met_dependencies = []
buf243.group.device = cuda:0
buf243.group.iteration = (1920, 512)
buf243.sizes = ([1920], [8, 64])
class buf243_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf242', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf243', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = [MemoryDep(name='buf244', index=c0, size=(1920,))]
buf244.unmet_dependencies = [MemoryDep(name='buf243', index=c0, size=(1920,))]
buf244.met_dependencies = []
buf244.group.device = cuda:0
buf244.group.iteration = (1920, 1)
buf244.sizes = ([1920], [])
class buf244_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf244', get_index_1, rsqrt, None)
        return store


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep(name='buf245', index=c0, size=(1920,))]
buf245.unmet_dependencies = [MemoryDep(name='buf242', index=c0, size=(1920,))]
buf245.met_dependencies = [MemoryDep(name='primals_207', index=c0, size=(1920,))]
buf245.group.device = cuda:0
buf245.group.iteration = (1920, 1)
buf245.sizes = ([1920], [])
class buf245_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_207', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf245', get_index_2, add, None)
        return store


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = [MemoryDep(name='buf246', index=c0, size=(1920,))]
buf246.unmet_dependencies = [MemoryDep(name='buf243', index=c0, size=(1920,))]
buf246.met_dependencies = [MemoryDep(name='primals_208', index=c0, size=(1920,))]
buf246.group.device = cuda:0
buf246.group.iteration = (1920, 1)
buf246.sizes = ([1920], [])
class buf246_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_208', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf246', get_index_2, add, None)
        return store


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = [MemoryDep(name='buf247', index=c0, size=(983040,))]
buf247.unmet_dependencies = 
    [   MemoryDep(name='buf240', index=c0, size=(983040,)),
        MemoryDep(name='buf242', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf243', index=c1, size=(8, 1920, 64))]
buf247.met_dependencies = 
    [   MemoryDep(name='primals_209', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_210', index=c1, size=(8, 1920, 64))]
buf247.group.device = cuda:0
buf247.group.iteration = (983040, 1)
buf247.sizes = ([8, 1920, 64], [])
class buf247_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf242', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf243', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_209', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_210', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, relu, None)
        return store


buf248: ExternKernelSchedulerNode(Convolution)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf247')]
buf248.met_dependencies = [StarDep(name='primals_31')]
buf248.node.kernel = aten.convolution


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = 
    [   MemoryDep(name='buf249', index=c0, size=(640, 512)),
        MemoryDep(name='buf249', index=c0, size=(640,))]
buf249.unmet_dependencies = [MemoryDep(name='buf248', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf249.met_dependencies = []
buf249.group.device = cuda:0
buf249.group.iteration = (640, 512)
buf249.sizes = ([640], [8, 64])
class buf249_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf249', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf250: SchedulerNode(ComputedBuffer)
buf250.writes = [MemoryDep(name='buf250', index=c0, size=(640,))]
buf250.unmet_dependencies = [MemoryDep(name='buf249', index=c0, size=(640,))]
buf250.met_dependencies = []
buf250.group.device = cuda:0
buf250.group.iteration = (640, 1)
buf250.sizes = ([640], [])
class buf250_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf250', get_index_1, div, None)
        return store


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(640, 512)),
        MemoryDep(name='buf251', index=c0, size=(640,))]
buf251.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf250', index=c0, size=(640, 512))]
buf251.met_dependencies = []
buf251.group.device = cuda:0
buf251.group.iteration = (640, 512)
buf251.sizes = ([640], [8, 64])
class buf251_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf250', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = [MemoryDep(name='buf252', index=c0, size=(640,))]
buf252.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(640,))]
buf252.met_dependencies = []
buf252.group.device = cuda:0
buf252.group.iteration = (640, 1)
buf252.sizes = ([640], [])
class buf252_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, rsqrt, None)
        return store


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = [MemoryDep(name='buf253', index=c0, size=(640,))]
buf253.unmet_dependencies = [MemoryDep(name='buf250', index=c0, size=(640,))]
buf253.met_dependencies = [MemoryDep(name='primals_212', index=c0, size=(640,))]
buf253.group.device = cuda:0
buf253.group.iteration = (640, 1)
buf253.sizes = ([640], [])
class buf253_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_212', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf253', get_index_2, add, None)
        return store


buf254: SchedulerNode(ComputedBuffer)
buf254.writes = [MemoryDep(name='buf254', index=c0, size=(640,))]
buf254.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(640,))]
buf254.met_dependencies = [MemoryDep(name='primals_213', index=c0, size=(640,))]
buf254.group.device = cuda:0
buf254.group.iteration = (640, 1)
buf254.sizes = ([640], [])
class buf254_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_213', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf254', get_index_2, add, None)
        return store


buf255: ExternKernelSchedulerNode(Convolution)
buf255.writes = [StarDep(name='buf255')]
buf255.unmet_dependencies = [StarDep(name='buf231')]
buf255.met_dependencies = [StarDep(name='primals_32')]
buf255.node.kernel = aten.convolution


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = 
    [   MemoryDep(name='buf256', index=c0, size=(640, 512)),
        MemoryDep(name='buf256', index=c0, size=(640,))]
buf256.unmet_dependencies = [MemoryDep(name='buf255', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf256.met_dependencies = []
buf256.group.device = cuda:0
buf256.group.iteration = (640, 512)
buf256.sizes = ([640], [8, 64])
class buf256_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf256', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep(name='buf257', index=c0, size=(640,))]
buf257.unmet_dependencies = [MemoryDep(name='buf256', index=c0, size=(640,))]
buf257.met_dependencies = []
buf257.group.device = cuda:0
buf257.group.iteration = (640, 1)
buf257.sizes = ([640], [])
class buf257_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf257', get_index_1, div, None)
        return store


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = 
    [   MemoryDep(name='buf258', index=c0, size=(640, 512)),
        MemoryDep(name='buf258', index=c0, size=(640,))]
buf258.unmet_dependencies = 
    [   MemoryDep(name='buf255', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf257', index=c0, size=(640, 512))]
buf258.met_dependencies = []
buf258.group.device = cuda:0
buf258.group.iteration = (640, 512)
buf258.sizes = ([640], [8, 64])
class buf258_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf258', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = [MemoryDep(name='buf259', index=c0, size=(640,))]
buf259.unmet_dependencies = [MemoryDep(name='buf258', index=c0, size=(640,))]
buf259.met_dependencies = []
buf259.group.device = cuda:0
buf259.group.iteration = (640, 1)
buf259.sizes = ([640], [])
class buf259_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf259', get_index_1, rsqrt, None)
        return store


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = [MemoryDep(name='buf260', index=c0, size=(640,))]
buf260.unmet_dependencies = [MemoryDep(name='buf257', index=c0, size=(640,))]
buf260.met_dependencies = [MemoryDep(name='primals_217', index=c0, size=(640,))]
buf260.group.device = cuda:0
buf260.group.iteration = (640, 1)
buf260.sizes = ([640], [])
class buf260_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_217', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf260', get_index_2, add, None)
        return store


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = [MemoryDep(name='buf261', index=c0, size=(640,))]
buf261.unmet_dependencies = [MemoryDep(name='buf258', index=c0, size=(640,))]
buf261.met_dependencies = [MemoryDep(name='primals_218', index=c0, size=(640,))]
buf261.group.device = cuda:0
buf261.group.iteration = (640, 1)
buf261.sizes = ([640], [])
class buf261_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_218', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf261', get_index_2, add, None)
        return store


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = [MemoryDep(name='buf262', index=c0, size=(327680,))]
buf262.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=c0, size=(327680,)),
        MemoryDep(name='buf250', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf251', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf255', index=c0, size=(327680,)),
        MemoryDep(name='buf257', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf258', index=c1, size=(8, 640, 64))]
buf262.met_dependencies = 
    [   MemoryDep(name='primals_214', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_215', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_219', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_220', index=c1, size=(8, 640, 64))]
buf262.group.device = cuda:0
buf262.group.iteration = (327680, 1)
buf262.sizes = ([8, 640, 64], [])
class buf262_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf250', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf251', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_214', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_215', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf255', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf257', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf258', get_index_7)
        constant_2 = ops.constant(512, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_219', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_220', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf262', get_index_10, add_4, None)
        return store


buf263: SchedulerNode(ComputedBuffer)
buf263.writes = [MemoryDep(name='buf263', index=c0, size=(327680,))]
buf263.unmet_dependencies = [MemoryDep(name='buf262', index=c0, size=(327680,))]
buf263.met_dependencies = []
buf263.group.device = cuda:0
buf263.group.iteration = (327680, 1)
buf263.sizes = ([327680], [])
class buf263_loop_body:
    var_ranges = {z0: 327680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf263', get_index_1, relu, None)
        return store


buf264: ExternKernelSchedulerNode(Convolution)
buf264.writes = [StarDep(name='buf264')]
buf264.unmet_dependencies = [StarDep(name='buf263')]
buf264.met_dependencies = [StarDep(name='primals_33')]
buf264.node.kernel = aten.convolution


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = 
    [   MemoryDep(name='buf265', index=c0, size=(1920, 512)),
        MemoryDep(name='buf265', index=c0, size=(1920,))]
buf265.unmet_dependencies = [MemoryDep(name='buf264', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf265.met_dependencies = []
buf265.group.device = cuda:0
buf265.group.iteration = (1920, 512)
buf265.sizes = ([1920], [8, 64])
class buf265_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf265', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf266: SchedulerNode(ComputedBuffer)
buf266.writes = [MemoryDep(name='buf266', index=c0, size=(1920,))]
buf266.unmet_dependencies = [MemoryDep(name='buf265', index=c0, size=(1920,))]
buf266.met_dependencies = []
buf266.group.device = cuda:0
buf266.group.iteration = (1920, 1)
buf266.sizes = ([1920], [])
class buf266_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf266', get_index_1, div, None)
        return store


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = 
    [   MemoryDep(name='buf267', index=c0, size=(1920, 512)),
        MemoryDep(name='buf267', index=c0, size=(1920,))]
buf267.unmet_dependencies = 
    [   MemoryDep(name='buf264', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf266', index=c0, size=(1920, 512))]
buf267.met_dependencies = []
buf267.group.device = cuda:0
buf267.group.iteration = (1920, 512)
buf267.sizes = ([1920], [8, 64])
class buf267_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf267', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = [MemoryDep(name='buf268', index=c0, size=(1920,))]
buf268.unmet_dependencies = [MemoryDep(name='buf267', index=c0, size=(1920,))]
buf268.met_dependencies = []
buf268.group.device = cuda:0
buf268.group.iteration = (1920, 1)
buf268.sizes = ([1920], [])
class buf268_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf268', get_index_1, rsqrt, None)
        return store


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = [MemoryDep(name='buf269', index=c0, size=(1920,))]
buf269.unmet_dependencies = [MemoryDep(name='buf266', index=c0, size=(1920,))]
buf269.met_dependencies = [MemoryDep(name='primals_222', index=c0, size=(1920,))]
buf269.group.device = cuda:0
buf269.group.iteration = (1920, 1)
buf269.sizes = ([1920], [])
class buf269_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_222', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, add, None)
        return store


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = [MemoryDep(name='buf270', index=c0, size=(1920,))]
buf270.unmet_dependencies = [MemoryDep(name='buf267', index=c0, size=(1920,))]
buf270.met_dependencies = [MemoryDep(name='primals_223', index=c0, size=(1920,))]
buf270.group.device = cuda:0
buf270.group.iteration = (1920, 1)
buf270.sizes = ([1920], [])
class buf270_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_223', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf270', get_index_2, add, None)
        return store


buf271: SchedulerNode(ComputedBuffer)
buf271.writes = [MemoryDep(name='buf271', index=c0, size=(983040,))]
buf271.unmet_dependencies = 
    [   MemoryDep(name='buf264', index=c0, size=(983040,)),
        MemoryDep(name='buf266', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf267', index=c1, size=(8, 1920, 64))]
buf271.met_dependencies = 
    [   MemoryDep(name='primals_224', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_225', index=c1, size=(8, 1920, 64))]
buf271.group.device = cuda:0
buf271.group.iteration = (983040, 1)
buf271.sizes = ([8, 1920, 64], [])
class buf271_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf267', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_224', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_225', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, relu, None)
        return store


buf272: ExternKernelSchedulerNode(Convolution)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf271')]
buf272.met_dependencies = [StarDep(name='primals_34')]
buf272.node.kernel = aten.convolution


buf273: SchedulerNode(ComputedBuffer)
buf273.writes = 
    [   MemoryDep(name='buf273', index=c0, size=(1920, 512)),
        MemoryDep(name='buf273', index=c0, size=(1920,))]
buf273.unmet_dependencies = [MemoryDep(name='buf272', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf273.met_dependencies = []
buf273.group.device = cuda:0
buf273.group.iteration = (1920, 512)
buf273.sizes = ([1920], [8, 64])
class buf273_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf273', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = [MemoryDep(name='buf274', index=c0, size=(1920,))]
buf274.unmet_dependencies = [MemoryDep(name='buf273', index=c0, size=(1920,))]
buf274.met_dependencies = []
buf274.group.device = cuda:0
buf274.group.iteration = (1920, 1)
buf274.sizes = ([1920], [])
class buf274_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf274', get_index_1, div, None)
        return store


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(1920, 512)),
        MemoryDep(name='buf275', index=c0, size=(1920,))]
buf275.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf274', index=c0, size=(1920, 512))]
buf275.met_dependencies = []
buf275.group.device = cuda:0
buf275.group.iteration = (1920, 512)
buf275.sizes = ([1920], [8, 64])
class buf275_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf274', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf275', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = [MemoryDep(name='buf276', index=c0, size=(1920,))]
buf276.unmet_dependencies = [MemoryDep(name='buf275', index=c0, size=(1920,))]
buf276.met_dependencies = []
buf276.group.device = cuda:0
buf276.group.iteration = (1920, 1)
buf276.sizes = ([1920], [])
class buf276_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf276', get_index_1, rsqrt, None)
        return store


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = [MemoryDep(name='buf277', index=c0, size=(1920,))]
buf277.unmet_dependencies = [MemoryDep(name='buf274', index=c0, size=(1920,))]
buf277.met_dependencies = [MemoryDep(name='primals_227', index=c0, size=(1920,))]
buf277.group.device = cuda:0
buf277.group.iteration = (1920, 1)
buf277.sizes = ([1920], [])
class buf277_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_227', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf277', get_index_2, add, None)
        return store


buf278: SchedulerNode(ComputedBuffer)
buf278.writes = [MemoryDep(name='buf278', index=c0, size=(1920,))]
buf278.unmet_dependencies = [MemoryDep(name='buf275', index=c0, size=(1920,))]
buf278.met_dependencies = [MemoryDep(name='primals_228', index=c0, size=(1920,))]
buf278.group.device = cuda:0
buf278.group.iteration = (1920, 1)
buf278.sizes = ([1920], [])
class buf278_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_228', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf278', get_index_2, add, None)
        return store


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = [MemoryDep(name='buf279', index=c0, size=(983040,))]
buf279.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=c0, size=(983040,)),
        MemoryDep(name='buf274', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf275', index=c1, size=(8, 1920, 64))]
buf279.met_dependencies = 
    [   MemoryDep(name='primals_229', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_230', index=c1, size=(8, 1920, 64))]
buf279.group.device = cuda:0
buf279.group.iteration = (983040, 1)
buf279.sizes = ([8, 1920, 64], [])
class buf279_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf274', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf275', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_229', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_230', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf279', get_index_5, relu, None)
        return store


buf280: ExternKernelSchedulerNode(Convolution)
buf280.writes = [StarDep(name='buf280')]
buf280.unmet_dependencies = [StarDep(name='buf279')]
buf280.met_dependencies = [StarDep(name='primals_35')]
buf280.node.kernel = aten.convolution


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = 
    [   MemoryDep(name='buf281', index=c0, size=(640, 512)),
        MemoryDep(name='buf281', index=c0, size=(640,))]
buf281.unmet_dependencies = [MemoryDep(name='buf280', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf281.met_dependencies = []
buf281.group.device = cuda:0
buf281.group.iteration = (640, 512)
buf281.sizes = ([640], [8, 64])
class buf281_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf281', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = [MemoryDep(name='buf282', index=c0, size=(640,))]
buf282.unmet_dependencies = [MemoryDep(name='buf281', index=c0, size=(640,))]
buf282.met_dependencies = []
buf282.group.device = cuda:0
buf282.group.iteration = (640, 1)
buf282.sizes = ([640], [])
class buf282_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf282', get_index_1, div, None)
        return store


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = 
    [   MemoryDep(name='buf283', index=c0, size=(640, 512)),
        MemoryDep(name='buf283', index=c0, size=(640,))]
buf283.unmet_dependencies = 
    [   MemoryDep(name='buf280', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf282', index=c0, size=(640, 512))]
buf283.met_dependencies = []
buf283.group.device = cuda:0
buf283.group.iteration = (640, 512)
buf283.sizes = ([640], [8, 64])
class buf283_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf282', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf283', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf284: SchedulerNode(ComputedBuffer)
buf284.writes = [MemoryDep(name='buf284', index=c0, size=(640,))]
buf284.unmet_dependencies = [MemoryDep(name='buf283', index=c0, size=(640,))]
buf284.met_dependencies = []
buf284.group.device = cuda:0
buf284.group.iteration = (640, 1)
buf284.sizes = ([640], [])
class buf284_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf284', get_index_1, rsqrt, None)
        return store


buf285: SchedulerNode(ComputedBuffer)
buf285.writes = [MemoryDep(name='buf285', index=c0, size=(640,))]
buf285.unmet_dependencies = [MemoryDep(name='buf282', index=c0, size=(640,))]
buf285.met_dependencies = [MemoryDep(name='primals_232', index=c0, size=(640,))]
buf285.group.device = cuda:0
buf285.group.iteration = (640, 1)
buf285.sizes = ([640], [])
class buf285_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_232', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf285', get_index_2, add, None)
        return store


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = [MemoryDep(name='buf286', index=c0, size=(640,))]
buf286.unmet_dependencies = [MemoryDep(name='buf283', index=c0, size=(640,))]
buf286.met_dependencies = [MemoryDep(name='primals_233', index=c0, size=(640,))]
buf286.group.device = cuda:0
buf286.group.iteration = (640, 1)
buf286.sizes = ([640], [])
class buf286_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_233', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf286', get_index_2, add, None)
        return store


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = [MemoryDep(name='buf287', index=c0, size=(327680,))]
buf287.unmet_dependencies = 
    [   MemoryDep(name='buf263', index=c0, size=(327680,)),
        MemoryDep(name='buf280', index=c0, size=(327680,)),
        MemoryDep(name='buf282', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf283', index=c1, size=(8, 640, 64))]
buf287.met_dependencies = 
    [   MemoryDep(name='primals_234', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_235', index=c1, size=(8, 640, 64))]
buf287.group.device = cuda:0
buf287.group.iteration = (327680, 1)
buf287.sizes = ([8, 640, 64], [])
class buf287_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf282', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf283', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_234', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_235', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf263', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf287', get_index_6, relu, None)
        return store


buf288: ExternKernelSchedulerNode(Convolution)
buf288.writes = [StarDep(name='buf288')]
buf288.unmet_dependencies = [StarDep(name='buf287')]
buf288.met_dependencies = [StarDep(name='primals_36')]
buf288.node.kernel = aten.convolution


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = 
    [   MemoryDep(name='buf289', index=c0, size=(1920, 512)),
        MemoryDep(name='buf289', index=c0, size=(1920,))]
buf289.unmet_dependencies = [MemoryDep(name='buf288', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf289.met_dependencies = []
buf289.group.device = cuda:0
buf289.group.iteration = (1920, 512)
buf289.sizes = ([1920], [8, 64])
class buf289_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf289', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf290: SchedulerNode(ComputedBuffer)
buf290.writes = [MemoryDep(name='buf290', index=c0, size=(1920,))]
buf290.unmet_dependencies = [MemoryDep(name='buf289', index=c0, size=(1920,))]
buf290.met_dependencies = []
buf290.group.device = cuda:0
buf290.group.iteration = (1920, 1)
buf290.sizes = ([1920], [])
class buf290_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf290', get_index_1, div, None)
        return store


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = 
    [   MemoryDep(name='buf291', index=c0, size=(1920, 512)),
        MemoryDep(name='buf291', index=c0, size=(1920,))]
buf291.unmet_dependencies = 
    [   MemoryDep(name='buf288', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf290', index=c0, size=(1920, 512))]
buf291.met_dependencies = []
buf291.group.device = cuda:0
buf291.group.iteration = (1920, 512)
buf291.sizes = ([1920], [8, 64])
class buf291_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf290', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf291', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = [MemoryDep(name='buf292', index=c0, size=(1920,))]
buf292.unmet_dependencies = [MemoryDep(name='buf291', index=c0, size=(1920,))]
buf292.met_dependencies = []
buf292.group.device = cuda:0
buf292.group.iteration = (1920, 1)
buf292.sizes = ([1920], [])
class buf292_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf292', get_index_1, rsqrt, None)
        return store


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = [MemoryDep(name='buf293', index=c0, size=(1920,))]
buf293.unmet_dependencies = [MemoryDep(name='buf290', index=c0, size=(1920,))]
buf293.met_dependencies = [MemoryDep(name='primals_237', index=c0, size=(1920,))]
buf293.group.device = cuda:0
buf293.group.iteration = (1920, 1)
buf293.sizes = ([1920], [])
class buf293_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_237', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf293', get_index_2, add, None)
        return store


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = [MemoryDep(name='buf294', index=c0, size=(1920,))]
buf294.unmet_dependencies = [MemoryDep(name='buf291', index=c0, size=(1920,))]
buf294.met_dependencies = [MemoryDep(name='primals_238', index=c0, size=(1920,))]
buf294.group.device = cuda:0
buf294.group.iteration = (1920, 1)
buf294.sizes = ([1920], [])
class buf294_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_238', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf294', get_index_2, add, None)
        return store


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = [MemoryDep(name='buf295', index=c0, size=(983040,))]
buf295.unmet_dependencies = 
    [   MemoryDep(name='buf288', index=c0, size=(983040,)),
        MemoryDep(name='buf290', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf291', index=c1, size=(8, 1920, 64))]
buf295.met_dependencies = 
    [   MemoryDep(name='primals_239', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_240', index=c1, size=(8, 1920, 64))]
buf295.group.device = cuda:0
buf295.group.iteration = (983040, 1)
buf295.sizes = ([8, 1920, 64], [])
class buf295_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf290', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf291', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_239', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_240', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, relu, None)
        return store


buf296: ExternKernelSchedulerNode(Convolution)
buf296.writes = [StarDep(name='buf296')]
buf296.unmet_dependencies = [StarDep(name='buf295')]
buf296.met_dependencies = [StarDep(name='primals_37')]
buf296.node.kernel = aten.convolution


buf297: SchedulerNode(ComputedBuffer)
buf297.writes = 
    [   MemoryDep(name='buf297', index=c0, size=(1920, 512)),
        MemoryDep(name='buf297', index=c0, size=(1920,))]
buf297.unmet_dependencies = [MemoryDep(name='buf296', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf297.met_dependencies = []
buf297.group.device = cuda:0
buf297.group.iteration = (1920, 512)
buf297.sizes = ([1920], [8, 64])
class buf297_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf297', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = [MemoryDep(name='buf298', index=c0, size=(1920,))]
buf298.unmet_dependencies = [MemoryDep(name='buf297', index=c0, size=(1920,))]
buf298.met_dependencies = []
buf298.group.device = cuda:0
buf298.group.iteration = (1920, 1)
buf298.sizes = ([1920], [])
class buf298_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf298', get_index_1, div, None)
        return store


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = 
    [   MemoryDep(name='buf299', index=c0, size=(1920, 512)),
        MemoryDep(name='buf299', index=c0, size=(1920,))]
buf299.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf298', index=c0, size=(1920, 512))]
buf299.met_dependencies = []
buf299.group.device = cuda:0
buf299.group.iteration = (1920, 512)
buf299.sizes = ([1920], [8, 64])
class buf299_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf298', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf299', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = [MemoryDep(name='buf300', index=c0, size=(1920,))]
buf300.unmet_dependencies = [MemoryDep(name='buf299', index=c0, size=(1920,))]
buf300.met_dependencies = []
buf300.group.device = cuda:0
buf300.group.iteration = (1920, 1)
buf300.sizes = ([1920], [])
class buf300_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf300', get_index_1, rsqrt, None)
        return store


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = [MemoryDep(name='buf301', index=c0, size=(1920,))]
buf301.unmet_dependencies = [MemoryDep(name='buf298', index=c0, size=(1920,))]
buf301.met_dependencies = [MemoryDep(name='primals_242', index=c0, size=(1920,))]
buf301.group.device = cuda:0
buf301.group.iteration = (1920, 1)
buf301.sizes = ([1920], [])
class buf301_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_242', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf301', get_index_2, add, None)
        return store


buf302: SchedulerNode(ComputedBuffer)
buf302.writes = [MemoryDep(name='buf302', index=c0, size=(1920,))]
buf302.unmet_dependencies = [MemoryDep(name='buf299', index=c0, size=(1920,))]
buf302.met_dependencies = [MemoryDep(name='primals_243', index=c0, size=(1920,))]
buf302.group.device = cuda:0
buf302.group.iteration = (1920, 1)
buf302.sizes = ([1920], [])
class buf302_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_243', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf302', get_index_2, add, None)
        return store


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = [MemoryDep(name='buf303', index=c0, size=(983040,))]
buf303.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=c0, size=(983040,)),
        MemoryDep(name='buf298', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf299', index=c1, size=(8, 1920, 64))]
buf303.met_dependencies = 
    [   MemoryDep(name='primals_244', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_245', index=c1, size=(8, 1920, 64))]
buf303.group.device = cuda:0
buf303.group.iteration = (983040, 1)
buf303.sizes = ([8, 1920, 64], [])
class buf303_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf298', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf299', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_244', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_245', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf303', get_index_5, relu, None)
        return store


buf304: ExternKernelSchedulerNode(Convolution)
buf304.writes = [StarDep(name='buf304')]
buf304.unmet_dependencies = [StarDep(name='buf303')]
buf304.met_dependencies = [StarDep(name='primals_38')]
buf304.node.kernel = aten.convolution


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = 
    [   MemoryDep(name='buf305', index=c0, size=(640, 512)),
        MemoryDep(name='buf305', index=c0, size=(640,))]
buf305.unmet_dependencies = [MemoryDep(name='buf304', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf305.met_dependencies = []
buf305.group.device = cuda:0
buf305.group.iteration = (640, 512)
buf305.sizes = ([640], [8, 64])
class buf305_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf305', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = [MemoryDep(name='buf306', index=c0, size=(640,))]
buf306.unmet_dependencies = [MemoryDep(name='buf305', index=c0, size=(640,))]
buf306.met_dependencies = []
buf306.group.device = cuda:0
buf306.group.iteration = (640, 1)
buf306.sizes = ([640], [])
class buf306_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf306', get_index_1, div, None)
        return store


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = 
    [   MemoryDep(name='buf307', index=c0, size=(640, 512)),
        MemoryDep(name='buf307', index=c0, size=(640,))]
buf307.unmet_dependencies = 
    [   MemoryDep(name='buf304', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf306', index=c0, size=(640, 512))]
buf307.met_dependencies = []
buf307.group.device = cuda:0
buf307.group.iteration = (640, 512)
buf307.sizes = ([640], [8, 64])
class buf307_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf306', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf307', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf308: SchedulerNode(ComputedBuffer)
buf308.writes = [MemoryDep(name='buf308', index=c0, size=(640,))]
buf308.unmet_dependencies = [MemoryDep(name='buf307', index=c0, size=(640,))]
buf308.met_dependencies = []
buf308.group.device = cuda:0
buf308.group.iteration = (640, 1)
buf308.sizes = ([640], [])
class buf308_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf308', get_index_1, rsqrt, None)
        return store


buf309: SchedulerNode(ComputedBuffer)
buf309.writes = [MemoryDep(name='buf309', index=c0, size=(640,))]
buf309.unmet_dependencies = [MemoryDep(name='buf306', index=c0, size=(640,))]
buf309.met_dependencies = [MemoryDep(name='primals_247', index=c0, size=(640,))]
buf309.group.device = cuda:0
buf309.group.iteration = (640, 1)
buf309.sizes = ([640], [])
class buf309_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_247', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf309', get_index_2, add, None)
        return store


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = [MemoryDep(name='buf310', index=c0, size=(640,))]
buf310.unmet_dependencies = [MemoryDep(name='buf307', index=c0, size=(640,))]
buf310.met_dependencies = [MemoryDep(name='primals_248', index=c0, size=(640,))]
buf310.group.device = cuda:0
buf310.group.iteration = (640, 1)
buf310.sizes = ([640], [])
class buf310_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_248', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf310', get_index_2, add, None)
        return store


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = [MemoryDep(name='buf311', index=c0, size=(327680,))]
buf311.unmet_dependencies = 
    [   MemoryDep(name='buf287', index=c0, size=(327680,)),
        MemoryDep(name='buf304', index=c0, size=(327680,)),
        MemoryDep(name='buf306', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf307', index=c1, size=(8, 640, 64))]
buf311.met_dependencies = 
    [   MemoryDep(name='primals_249', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_250', index=c1, size=(8, 640, 64))]
buf311.group.device = cuda:0
buf311.group.iteration = (327680, 1)
buf311.sizes = ([8, 640, 64], [])
class buf311_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf306', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf307', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_249', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_250', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf287', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf311', get_index_6, relu, None)
        return store


buf312: ExternKernelSchedulerNode(Convolution)
buf312.writes = [StarDep(name='buf312')]
buf312.unmet_dependencies = [StarDep(name='buf311')]
buf312.met_dependencies = [StarDep(name='primals_39')]
buf312.node.kernel = aten.convolution


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = 
    [   MemoryDep(name='buf313', index=c0, size=(1920, 512)),
        MemoryDep(name='buf313', index=c0, size=(1920,))]
buf313.unmet_dependencies = [MemoryDep(name='buf312', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf313.met_dependencies = []
buf313.group.device = cuda:0
buf313.group.iteration = (1920, 512)
buf313.sizes = ([1920], [8, 64])
class buf313_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf313', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf314: SchedulerNode(ComputedBuffer)
buf314.writes = [MemoryDep(name='buf314', index=c0, size=(1920,))]
buf314.unmet_dependencies = [MemoryDep(name='buf313', index=c0, size=(1920,))]
buf314.met_dependencies = []
buf314.group.device = cuda:0
buf314.group.iteration = (1920, 1)
buf314.sizes = ([1920], [])
class buf314_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf314', get_index_1, div, None)
        return store


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = 
    [   MemoryDep(name='buf315', index=c0, size=(1920, 512)),
        MemoryDep(name='buf315', index=c0, size=(1920,))]
buf315.unmet_dependencies = 
    [   MemoryDep(name='buf312', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf314', index=c0, size=(1920, 512))]
buf315.met_dependencies = []
buf315.group.device = cuda:0
buf315.group.iteration = (1920, 512)
buf315.sizes = ([1920], [8, 64])
class buf315_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf315', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = [MemoryDep(name='buf316', index=c0, size=(1920,))]
buf316.unmet_dependencies = [MemoryDep(name='buf315', index=c0, size=(1920,))]
buf316.met_dependencies = []
buf316.group.device = cuda:0
buf316.group.iteration = (1920, 1)
buf316.sizes = ([1920], [])
class buf316_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf316', get_index_1, rsqrt, None)
        return store


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = [MemoryDep(name='buf317', index=c0, size=(1920,))]
buf317.unmet_dependencies = [MemoryDep(name='buf314', index=c0, size=(1920,))]
buf317.met_dependencies = [MemoryDep(name='primals_252', index=c0, size=(1920,))]
buf317.group.device = cuda:0
buf317.group.iteration = (1920, 1)
buf317.sizes = ([1920], [])
class buf317_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_252', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf317', get_index_2, add, None)
        return store


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = [MemoryDep(name='buf318', index=c0, size=(1920,))]
buf318.unmet_dependencies = [MemoryDep(name='buf315', index=c0, size=(1920,))]
buf318.met_dependencies = [MemoryDep(name='primals_253', index=c0, size=(1920,))]
buf318.group.device = cuda:0
buf318.group.iteration = (1920, 1)
buf318.sizes = ([1920], [])
class buf318_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_253', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf318', get_index_2, add, None)
        return store


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = [MemoryDep(name='buf319', index=c0, size=(983040,))]
buf319.unmet_dependencies = 
    [   MemoryDep(name='buf312', index=c0, size=(983040,)),
        MemoryDep(name='buf314', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf315', index=c1, size=(8, 1920, 64))]
buf319.met_dependencies = 
    [   MemoryDep(name='primals_254', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_255', index=c1, size=(8, 1920, 64))]
buf319.group.device = cuda:0
buf319.group.iteration = (983040, 1)
buf319.sizes = ([8, 1920, 64], [])
class buf319_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf315', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_254', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_255', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf319', get_index_5, relu, None)
        return store


buf320: ExternKernelSchedulerNode(Convolution)
buf320.writes = [StarDep(name='buf320')]
buf320.unmet_dependencies = [StarDep(name='buf319')]
buf320.met_dependencies = [StarDep(name='primals_40')]
buf320.node.kernel = aten.convolution


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = 
    [   MemoryDep(name='buf321', index=c0, size=(1920, 512)),
        MemoryDep(name='buf321', index=c0, size=(1920,))]
buf321.unmet_dependencies = [MemoryDep(name='buf320', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf321.met_dependencies = []
buf321.group.device = cuda:0
buf321.group.iteration = (1920, 512)
buf321.sizes = ([1920], [8, 64])
class buf321_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf321', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf322: SchedulerNode(ComputedBuffer)
buf322.writes = [MemoryDep(name='buf322', index=c0, size=(1920,))]
buf322.unmet_dependencies = [MemoryDep(name='buf321', index=c0, size=(1920,))]
buf322.met_dependencies = []
buf322.group.device = cuda:0
buf322.group.iteration = (1920, 1)
buf322.sizes = ([1920], [])
class buf322_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, div, None)
        return store


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = 
    [   MemoryDep(name='buf323', index=c0, size=(1920, 512)),
        MemoryDep(name='buf323', index=c0, size=(1920,))]
buf323.unmet_dependencies = 
    [   MemoryDep(name='buf320', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf322', index=c0, size=(1920, 512))]
buf323.met_dependencies = []
buf323.group.device = cuda:0
buf323.group.iteration = (1920, 512)
buf323.sizes = ([1920], [8, 64])
class buf323_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf322', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf323', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = [MemoryDep(name='buf324', index=c0, size=(1920,))]
buf324.unmet_dependencies = [MemoryDep(name='buf323', index=c0, size=(1920,))]
buf324.met_dependencies = []
buf324.group.device = cuda:0
buf324.group.iteration = (1920, 1)
buf324.sizes = ([1920], [])
class buf324_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, rsqrt, None)
        return store


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = [MemoryDep(name='buf325', index=c0, size=(1920,))]
buf325.unmet_dependencies = [MemoryDep(name='buf322', index=c0, size=(1920,))]
buf325.met_dependencies = [MemoryDep(name='primals_257', index=c0, size=(1920,))]
buf325.group.device = cuda:0
buf325.group.iteration = (1920, 1)
buf325.sizes = ([1920], [])
class buf325_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_257', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf325', get_index_2, add, None)
        return store


buf326: SchedulerNode(ComputedBuffer)
buf326.writes = [MemoryDep(name='buf326', index=c0, size=(1920,))]
buf326.unmet_dependencies = [MemoryDep(name='buf323', index=c0, size=(1920,))]
buf326.met_dependencies = [MemoryDep(name='primals_258', index=c0, size=(1920,))]
buf326.group.device = cuda:0
buf326.group.iteration = (1920, 1)
buf326.sizes = ([1920], [])
class buf326_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_258', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf326', get_index_2, add, None)
        return store


buf327: SchedulerNode(ComputedBuffer)
buf327.writes = [MemoryDep(name='buf327', index=c0, size=(983040,))]
buf327.unmet_dependencies = 
    [   MemoryDep(name='buf320', index=c0, size=(983040,)),
        MemoryDep(name='buf322', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf323', index=c1, size=(8, 1920, 64))]
buf327.met_dependencies = 
    [   MemoryDep(name='primals_259', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_260', index=c1, size=(8, 1920, 64))]
buf327.group.device = cuda:0
buf327.group.iteration = (983040, 1)
buf327.sizes = ([8, 1920, 64], [])
class buf327_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf322', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf323', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_259', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_260', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf327', get_index_5, relu, None)
        return store


buf328: ExternKernelSchedulerNode(Convolution)
buf328.writes = [StarDep(name='buf328')]
buf328.unmet_dependencies = [StarDep(name='buf327')]
buf328.met_dependencies = [StarDep(name='primals_41')]
buf328.node.kernel = aten.convolution


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = 
    [   MemoryDep(name='buf329', index=c0, size=(640, 512)),
        MemoryDep(name='buf329', index=c0, size=(640,))]
buf329.unmet_dependencies = [MemoryDep(name='buf328', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf329.met_dependencies = []
buf329.group.device = cuda:0
buf329.group.iteration = (640, 512)
buf329.sizes = ([640], [8, 64])
class buf329_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf329', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf330: SchedulerNode(ComputedBuffer)
buf330.writes = [MemoryDep(name='buf330', index=c0, size=(640,))]
buf330.unmet_dependencies = [MemoryDep(name='buf329', index=c0, size=(640,))]
buf330.met_dependencies = []
buf330.group.device = cuda:0
buf330.group.iteration = (640, 1)
buf330.sizes = ([640], [])
class buf330_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, div, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = 
    [   MemoryDep(name='buf331', index=c0, size=(640, 512)),
        MemoryDep(name='buf331', index=c0, size=(640,))]
buf331.unmet_dependencies = 
    [   MemoryDep(name='buf328', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf330', index=c0, size=(640, 512))]
buf331.met_dependencies = []
buf331.group.device = cuda:0
buf331.group.iteration = (640, 512)
buf331.sizes = ([640], [8, 64])
class buf331_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf330', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf331', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf332: SchedulerNode(ComputedBuffer)
buf332.writes = [MemoryDep(name='buf332', index=c0, size=(640,))]
buf332.unmet_dependencies = [MemoryDep(name='buf331', index=c0, size=(640,))]
buf332.met_dependencies = []
buf332.group.device = cuda:0
buf332.group.iteration = (640, 1)
buf332.sizes = ([640], [])
class buf332_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, rsqrt, None)
        return store


buf333: SchedulerNode(ComputedBuffer)
buf333.writes = [MemoryDep(name='buf333', index=c0, size=(640,))]
buf333.unmet_dependencies = [MemoryDep(name='buf330', index=c0, size=(640,))]
buf333.met_dependencies = [MemoryDep(name='primals_262', index=c0, size=(640,))]
buf333.group.device = cuda:0
buf333.group.iteration = (640, 1)
buf333.sizes = ([640], [])
class buf333_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_262', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, add, None)
        return store


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = [MemoryDep(name='buf334', index=c0, size=(640,))]
buf334.unmet_dependencies = [MemoryDep(name='buf331', index=c0, size=(640,))]
buf334.met_dependencies = [MemoryDep(name='primals_263', index=c0, size=(640,))]
buf334.group.device = cuda:0
buf334.group.iteration = (640, 1)
buf334.sizes = ([640], [])
class buf334_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_263', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf334', get_index_2, add, None)
        return store


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = [MemoryDep(name='buf335', index=c0, size=(327680,))]
buf335.unmet_dependencies = 
    [   MemoryDep(name='buf311', index=c0, size=(327680,)),
        MemoryDep(name='buf328', index=c0, size=(327680,)),
        MemoryDep(name='buf330', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf331', index=c1, size=(8, 640, 64))]
buf335.met_dependencies = 
    [   MemoryDep(name='primals_264', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_265', index=c1, size=(8, 640, 64))]
buf335.group.device = cuda:0
buf335.group.iteration = (327680, 1)
buf335.sizes = ([8, 640, 64], [])
class buf335_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf330', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf331', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_264', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_265', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf311', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf335', get_index_6, relu, None)
        return store


buf336: ExternKernelSchedulerNode(Convolution)
buf336.writes = [StarDep(name='buf336')]
buf336.unmet_dependencies = [StarDep(name='buf335')]
buf336.met_dependencies = [StarDep(name='primals_42')]
buf336.node.kernel = aten.convolution


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = 
    [   MemoryDep(name='buf337', index=c0, size=(1920, 512)),
        MemoryDep(name='buf337', index=c0, size=(1920,))]
buf337.unmet_dependencies = [MemoryDep(name='buf336', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf337.met_dependencies = []
buf337.group.device = cuda:0
buf337.group.iteration = (1920, 512)
buf337.sizes = ([1920], [8, 64])
class buf337_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf337', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = [MemoryDep(name='buf338', index=c0, size=(1920,))]
buf338.unmet_dependencies = [MemoryDep(name='buf337', index=c0, size=(1920,))]
buf338.met_dependencies = []
buf338.group.device = cuda:0
buf338.group.iteration = (1920, 1)
buf338.sizes = ([1920], [])
class buf338_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, div, None)
        return store


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = 
    [   MemoryDep(name='buf339', index=c0, size=(1920, 512)),
        MemoryDep(name='buf339', index=c0, size=(1920,))]
buf339.unmet_dependencies = 
    [   MemoryDep(name='buf336', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf338', index=c0, size=(1920, 512))]
buf339.met_dependencies = []
buf339.group.device = cuda:0
buf339.group.iteration = (1920, 512)
buf339.sizes = ([1920], [8, 64])
class buf339_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf339', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf340: SchedulerNode(ComputedBuffer)
buf340.writes = [MemoryDep(name='buf340', index=c0, size=(1920,))]
buf340.unmet_dependencies = [MemoryDep(name='buf339', index=c0, size=(1920,))]
buf340.met_dependencies = []
buf340.group.device = cuda:0
buf340.group.iteration = (1920, 1)
buf340.sizes = ([1920], [])
class buf340_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf340', get_index_1, rsqrt, None)
        return store


buf341: SchedulerNode(ComputedBuffer)
buf341.writes = [MemoryDep(name='buf341', index=c0, size=(1920,))]
buf341.unmet_dependencies = [MemoryDep(name='buf338', index=c0, size=(1920,))]
buf341.met_dependencies = [MemoryDep(name='primals_267', index=c0, size=(1920,))]
buf341.group.device = cuda:0
buf341.group.iteration = (1920, 1)
buf341.sizes = ([1920], [])
class buf341_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_267', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf341', get_index_2, add, None)
        return store


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = [MemoryDep(name='buf342', index=c0, size=(1920,))]
buf342.unmet_dependencies = [MemoryDep(name='buf339', index=c0, size=(1920,))]
buf342.met_dependencies = [MemoryDep(name='primals_268', index=c0, size=(1920,))]
buf342.group.device = cuda:0
buf342.group.iteration = (1920, 1)
buf342.sizes = ([1920], [])
class buf342_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_268', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf342', get_index_2, add, None)
        return store


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = [MemoryDep(name='buf343', index=c0, size=(983040,))]
buf343.unmet_dependencies = 
    [   MemoryDep(name='buf336', index=c0, size=(983040,)),
        MemoryDep(name='buf338', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf339', index=c1, size=(8, 1920, 64))]
buf343.met_dependencies = 
    [   MemoryDep(name='primals_269', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_270', index=c1, size=(8, 1920, 64))]
buf343.group.device = cuda:0
buf343.group.iteration = (983040, 1)
buf343.sizes = ([8, 1920, 64], [])
class buf343_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf339', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_269', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_270', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, relu, None)
        return store


buf344: ExternKernelSchedulerNode(Convolution)
buf344.writes = [StarDep(name='buf344')]
buf344.unmet_dependencies = [StarDep(name='buf343')]
buf344.met_dependencies = [StarDep(name='primals_43')]
buf344.node.kernel = aten.convolution


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = 
    [   MemoryDep(name='buf345', index=c0, size=(1920, 512)),
        MemoryDep(name='buf345', index=c0, size=(1920,))]
buf345.unmet_dependencies = [MemoryDep(name='buf344', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf345.met_dependencies = []
buf345.group.device = cuda:0
buf345.group.iteration = (1920, 512)
buf345.sizes = ([1920], [8, 64])
class buf345_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf345', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf346: SchedulerNode(ComputedBuffer)
buf346.writes = [MemoryDep(name='buf346', index=c0, size=(1920,))]
buf346.unmet_dependencies = [MemoryDep(name='buf345', index=c0, size=(1920,))]
buf346.met_dependencies = []
buf346.group.device = cuda:0
buf346.group.iteration = (1920, 1)
buf346.sizes = ([1920], [])
class buf346_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf346', get_index_1, div, None)
        return store


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = 
    [   MemoryDep(name='buf347', index=c0, size=(1920, 512)),
        MemoryDep(name='buf347', index=c0, size=(1920,))]
buf347.unmet_dependencies = 
    [   MemoryDep(name='buf344', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf346', index=c0, size=(1920, 512))]
buf347.met_dependencies = []
buf347.group.device = cuda:0
buf347.group.iteration = (1920, 512)
buf347.sizes = ([1920], [8, 64])
class buf347_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf346', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf347', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf348: SchedulerNode(ComputedBuffer)
buf348.writes = [MemoryDep(name='buf348', index=c0, size=(1920,))]
buf348.unmet_dependencies = [MemoryDep(name='buf347', index=c0, size=(1920,))]
buf348.met_dependencies = []
buf348.group.device = cuda:0
buf348.group.iteration = (1920, 1)
buf348.sizes = ([1920], [])
class buf348_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf348', get_index_1, rsqrt, None)
        return store


buf349: SchedulerNode(ComputedBuffer)
buf349.writes = [MemoryDep(name='buf349', index=c0, size=(1920,))]
buf349.unmet_dependencies = [MemoryDep(name='buf346', index=c0, size=(1920,))]
buf349.met_dependencies = [MemoryDep(name='primals_272', index=c0, size=(1920,))]
buf349.group.device = cuda:0
buf349.group.iteration = (1920, 1)
buf349.sizes = ([1920], [])
class buf349_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_272', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf349', get_index_2, add, None)
        return store


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = [MemoryDep(name='buf350', index=c0, size=(1920,))]
buf350.unmet_dependencies = [MemoryDep(name='buf347', index=c0, size=(1920,))]
buf350.met_dependencies = [MemoryDep(name='primals_273', index=c0, size=(1920,))]
buf350.group.device = cuda:0
buf350.group.iteration = (1920, 1)
buf350.sizes = ([1920], [])
class buf350_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_273', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf350', get_index_2, add, None)
        return store


buf351: SchedulerNode(ComputedBuffer)
buf351.writes = [MemoryDep(name='buf351', index=c0, size=(983040,))]
buf351.unmet_dependencies = 
    [   MemoryDep(name='buf344', index=c0, size=(983040,)),
        MemoryDep(name='buf346', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf347', index=c1, size=(8, 1920, 64))]
buf351.met_dependencies = 
    [   MemoryDep(name='primals_274', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_275', index=c1, size=(8, 1920, 64))]
buf351.group.device = cuda:0
buf351.group.iteration = (983040, 1)
buf351.sizes = ([8, 1920, 64], [])
class buf351_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf346', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf347', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_274', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_275', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf351', get_index_5, relu, None)
        return store


buf352: ExternKernelSchedulerNode(Convolution)
buf352.writes = [StarDep(name='buf352')]
buf352.unmet_dependencies = [StarDep(name='buf351')]
buf352.met_dependencies = [StarDep(name='primals_44')]
buf352.node.kernel = aten.convolution


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = 
    [   MemoryDep(name='buf353', index=c0, size=(640, 512)),
        MemoryDep(name='buf353', index=c0, size=(640,))]
buf353.unmet_dependencies = [MemoryDep(name='buf352', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf353.met_dependencies = []
buf353.group.device = cuda:0
buf353.group.iteration = (640, 512)
buf353.sizes = ([640], [8, 64])
class buf353_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf353', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf354: SchedulerNode(ComputedBuffer)
buf354.writes = [MemoryDep(name='buf354', index=c0, size=(640,))]
buf354.unmet_dependencies = [MemoryDep(name='buf353', index=c0, size=(640,))]
buf354.met_dependencies = []
buf354.group.device = cuda:0
buf354.group.iteration = (640, 1)
buf354.sizes = ([640], [])
class buf354_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf354', get_index_1, div, None)
        return store


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = 
    [   MemoryDep(name='buf355', index=c0, size=(640, 512)),
        MemoryDep(name='buf355', index=c0, size=(640,))]
buf355.unmet_dependencies = 
    [   MemoryDep(name='buf352', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf354', index=c0, size=(640, 512))]
buf355.met_dependencies = []
buf355.group.device = cuda:0
buf355.group.iteration = (640, 512)
buf355.sizes = ([640], [8, 64])
class buf355_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf354', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf355', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf356: SchedulerNode(ComputedBuffer)
buf356.writes = [MemoryDep(name='buf356', index=c0, size=(640,))]
buf356.unmet_dependencies = [MemoryDep(name='buf355', index=c0, size=(640,))]
buf356.met_dependencies = []
buf356.group.device = cuda:0
buf356.group.iteration = (640, 1)
buf356.sizes = ([640], [])
class buf356_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf356', get_index_1, rsqrt, None)
        return store


buf357: SchedulerNode(ComputedBuffer)
buf357.writes = [MemoryDep(name='buf357', index=c0, size=(640,))]
buf357.unmet_dependencies = [MemoryDep(name='buf354', index=c0, size=(640,))]
buf357.met_dependencies = [MemoryDep(name='primals_277', index=c0, size=(640,))]
buf357.group.device = cuda:0
buf357.group.iteration = (640, 1)
buf357.sizes = ([640], [])
class buf357_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_277', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf357', get_index_2, add, None)
        return store


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = [MemoryDep(name='buf358', index=c0, size=(640,))]
buf358.unmet_dependencies = [MemoryDep(name='buf355', index=c0, size=(640,))]
buf358.met_dependencies = [MemoryDep(name='primals_278', index=c0, size=(640,))]
buf358.group.device = cuda:0
buf358.group.iteration = (640, 1)
buf358.sizes = ([640], [])
class buf358_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_278', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf358', get_index_2, add, None)
        return store


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(327680,))]
buf359.unmet_dependencies = 
    [   MemoryDep(name='buf335', index=c0, size=(327680,)),
        MemoryDep(name='buf352', index=c0, size=(327680,)),
        MemoryDep(name='buf354', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf355', index=c1, size=(8, 640, 64))]
buf359.met_dependencies = 
    [   MemoryDep(name='primals_279', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_280', index=c1, size=(8, 640, 64))]
buf359.group.device = cuda:0
buf359.group.iteration = (327680, 1)
buf359.sizes = ([8, 640, 64], [])
class buf359_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf354', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf355', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_279', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_280', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf335', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf359', get_index_6, relu, None)
        return store


buf360: ExternKernelSchedulerNode(Convolution)
buf360.writes = [StarDep(name='buf360')]
buf360.unmet_dependencies = [StarDep(name='buf359')]
buf360.met_dependencies = [StarDep(name='primals_45')]
buf360.node.kernel = aten.convolution


buf361: SchedulerNode(ComputedBuffer)
buf361.writes = 
    [   MemoryDep(name='buf361', index=c0, size=(1920, 512)),
        MemoryDep(name='buf361', index=c0, size=(1920,))]
buf361.unmet_dependencies = [MemoryDep(name='buf360', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf361.met_dependencies = []
buf361.group.device = cuda:0
buf361.group.iteration = (1920, 512)
buf361.sizes = ([1920], [8, 64])
class buf361_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf361', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = [MemoryDep(name='buf362', index=c0, size=(1920,))]
buf362.unmet_dependencies = [MemoryDep(name='buf361', index=c0, size=(1920,))]
buf362.met_dependencies = []
buf362.group.device = cuda:0
buf362.group.iteration = (1920, 1)
buf362.sizes = ([1920], [])
class buf362_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf362', get_index_1, div, None)
        return store


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = 
    [   MemoryDep(name='buf363', index=c0, size=(1920, 512)),
        MemoryDep(name='buf363', index=c0, size=(1920,))]
buf363.unmet_dependencies = 
    [   MemoryDep(name='buf360', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf362', index=c0, size=(1920, 512))]
buf363.met_dependencies = []
buf363.group.device = cuda:0
buf363.group.iteration = (1920, 512)
buf363.sizes = ([1920], [8, 64])
class buf363_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf362', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf363', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = [MemoryDep(name='buf364', index=c0, size=(1920,))]
buf364.unmet_dependencies = [MemoryDep(name='buf363', index=c0, size=(1920,))]
buf364.met_dependencies = []
buf364.group.device = cuda:0
buf364.group.iteration = (1920, 1)
buf364.sizes = ([1920], [])
class buf364_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf364', get_index_1, rsqrt, None)
        return store


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = [MemoryDep(name='buf365', index=c0, size=(1920,))]
buf365.unmet_dependencies = [MemoryDep(name='buf362', index=c0, size=(1920,))]
buf365.met_dependencies = [MemoryDep(name='primals_282', index=c0, size=(1920,))]
buf365.group.device = cuda:0
buf365.group.iteration = (1920, 1)
buf365.sizes = ([1920], [])
class buf365_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_282', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf365', get_index_2, add, None)
        return store


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = [MemoryDep(name='buf366', index=c0, size=(1920,))]
buf366.unmet_dependencies = [MemoryDep(name='buf363', index=c0, size=(1920,))]
buf366.met_dependencies = [MemoryDep(name='primals_283', index=c0, size=(1920,))]
buf366.group.device = cuda:0
buf366.group.iteration = (1920, 1)
buf366.sizes = ([1920], [])
class buf366_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_283', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, add, None)
        return store


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = [MemoryDep(name='buf367', index=c0, size=(983040,))]
buf367.unmet_dependencies = 
    [   MemoryDep(name='buf360', index=c0, size=(983040,)),
        MemoryDep(name='buf362', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf363', index=c1, size=(8, 1920, 64))]
buf367.met_dependencies = 
    [   MemoryDep(name='primals_284', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_285', index=c1, size=(8, 1920, 64))]
buf367.group.device = cuda:0
buf367.group.iteration = (983040, 1)
buf367.sizes = ([8, 1920, 64], [])
class buf367_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf362', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf363', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_284', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_285', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf367', get_index_5, relu, None)
        return store


buf368: ExternKernelSchedulerNode(Convolution)
buf368.writes = [StarDep(name='buf368')]
buf368.unmet_dependencies = [StarDep(name='buf367')]
buf368.met_dependencies = [StarDep(name='primals_46')]
buf368.node.kernel = aten.convolution


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = 
    [   MemoryDep(name='buf369', index=c0, size=(1920, 512)),
        MemoryDep(name='buf369', index=c0, size=(1920,))]
buf369.unmet_dependencies = [MemoryDep(name='buf368', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf369.met_dependencies = []
buf369.group.device = cuda:0
buf369.group.iteration = (1920, 512)
buf369.sizes = ([1920], [8, 64])
class buf369_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf369', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf370: SchedulerNode(ComputedBuffer)
buf370.writes = [MemoryDep(name='buf370', index=c0, size=(1920,))]
buf370.unmet_dependencies = [MemoryDep(name='buf369', index=c0, size=(1920,))]
buf370.met_dependencies = []
buf370.group.device = cuda:0
buf370.group.iteration = (1920, 1)
buf370.sizes = ([1920], [])
class buf370_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf370', get_index_1, div, None)
        return store


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = 
    [   MemoryDep(name='buf371', index=c0, size=(1920, 512)),
        MemoryDep(name='buf371', index=c0, size=(1920,))]
buf371.unmet_dependencies = 
    [   MemoryDep(name='buf368', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf370', index=c0, size=(1920, 512))]
buf371.met_dependencies = []
buf371.group.device = cuda:0
buf371.group.iteration = (1920, 512)
buf371.sizes = ([1920], [8, 64])
class buf371_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf371', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf372: SchedulerNode(ComputedBuffer)
buf372.writes = [MemoryDep(name='buf372', index=c0, size=(1920,))]
buf372.unmet_dependencies = [MemoryDep(name='buf371', index=c0, size=(1920,))]
buf372.met_dependencies = []
buf372.group.device = cuda:0
buf372.group.iteration = (1920, 1)
buf372.sizes = ([1920], [])
class buf372_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf372', get_index_1, rsqrt, None)
        return store


buf373: SchedulerNode(ComputedBuffer)
buf373.writes = [MemoryDep(name='buf373', index=c0, size=(1920,))]
buf373.unmet_dependencies = [MemoryDep(name='buf370', index=c0, size=(1920,))]
buf373.met_dependencies = [MemoryDep(name='primals_287', index=c0, size=(1920,))]
buf373.group.device = cuda:0
buf373.group.iteration = (1920, 1)
buf373.sizes = ([1920], [])
class buf373_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_287', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf373', get_index_2, add, None)
        return store


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = [MemoryDep(name='buf374', index=c0, size=(1920,))]
buf374.unmet_dependencies = [MemoryDep(name='buf371', index=c0, size=(1920,))]
buf374.met_dependencies = [MemoryDep(name='primals_288', index=c0, size=(1920,))]
buf374.group.device = cuda:0
buf374.group.iteration = (1920, 1)
buf374.sizes = ([1920], [])
class buf374_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_288', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf374', get_index_2, add, None)
        return store


buf375: SchedulerNode(ComputedBuffer)
buf375.writes = [MemoryDep(name='buf375', index=c0, size=(983040,))]
buf375.unmet_dependencies = 
    [   MemoryDep(name='buf368', index=c0, size=(983040,)),
        MemoryDep(name='buf370', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf371', index=c1, size=(8, 1920, 64))]
buf375.met_dependencies = 
    [   MemoryDep(name='primals_289', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_290', index=c1, size=(8, 1920, 64))]
buf375.group.device = cuda:0
buf375.group.iteration = (983040, 1)
buf375.sizes = ([8, 1920, 64], [])
class buf375_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf371', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_289', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_290', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf375', get_index_5, relu, None)
        return store


buf376: ExternKernelSchedulerNode(Convolution)
buf376.writes = [StarDep(name='buf376')]
buf376.unmet_dependencies = [StarDep(name='buf375')]
buf376.met_dependencies = [StarDep(name='primals_47')]
buf376.node.kernel = aten.convolution


buf377: SchedulerNode(ComputedBuffer)
buf377.writes = 
    [   MemoryDep(name='buf377', index=c0, size=(640, 512)),
        MemoryDep(name='buf377', index=c0, size=(640,))]
buf377.unmet_dependencies = [MemoryDep(name='buf376', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf377.met_dependencies = []
buf377.group.device = cuda:0
buf377.group.iteration = (640, 512)
buf377.sizes = ([640], [8, 64])
class buf377_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf377', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf378: SchedulerNode(ComputedBuffer)
buf378.writes = [MemoryDep(name='buf378', index=c0, size=(640,))]
buf378.unmet_dependencies = [MemoryDep(name='buf377', index=c0, size=(640,))]
buf378.met_dependencies = []
buf378.group.device = cuda:0
buf378.group.iteration = (640, 1)
buf378.sizes = ([640], [])
class buf378_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf378', get_index_1, div, None)
        return store


buf379: SchedulerNode(ComputedBuffer)
buf379.writes = 
    [   MemoryDep(name='buf379', index=c0, size=(640, 512)),
        MemoryDep(name='buf379', index=c0, size=(640,))]
buf379.unmet_dependencies = 
    [   MemoryDep(name='buf376', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf378', index=c0, size=(640, 512))]
buf379.met_dependencies = []
buf379.group.device = cuda:0
buf379.group.iteration = (640, 512)
buf379.sizes = ([640], [8, 64])
class buf379_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf378', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf379', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf380: SchedulerNode(ComputedBuffer)
buf380.writes = [MemoryDep(name='buf380', index=c0, size=(640,))]
buf380.unmet_dependencies = [MemoryDep(name='buf379', index=c0, size=(640,))]
buf380.met_dependencies = []
buf380.group.device = cuda:0
buf380.group.iteration = (640, 1)
buf380.sizes = ([640], [])
class buf380_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf380', get_index_1, rsqrt, None)
        return store


buf381: SchedulerNode(ComputedBuffer)
buf381.writes = [MemoryDep(name='buf381', index=c0, size=(640,))]
buf381.unmet_dependencies = [MemoryDep(name='buf378', index=c0, size=(640,))]
buf381.met_dependencies = [MemoryDep(name='primals_292', index=c0, size=(640,))]
buf381.group.device = cuda:0
buf381.group.iteration = (640, 1)
buf381.sizes = ([640], [])
class buf381_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_292', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf381', get_index_2, add, None)
        return store


buf382: SchedulerNode(ComputedBuffer)
buf382.writes = [MemoryDep(name='buf382', index=c0, size=(640,))]
buf382.unmet_dependencies = [MemoryDep(name='buf379', index=c0, size=(640,))]
buf382.met_dependencies = [MemoryDep(name='primals_293', index=c0, size=(640,))]
buf382.group.device = cuda:0
buf382.group.iteration = (640, 1)
buf382.sizes = ([640], [])
class buf382_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_293', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf382', get_index_2, add, None)
        return store


buf383: SchedulerNode(ComputedBuffer)
buf383.writes = [MemoryDep(name='buf383', index=c0, size=(327680,))]
buf383.unmet_dependencies = 
    [   MemoryDep(name='buf359', index=c0, size=(327680,)),
        MemoryDep(name='buf376', index=c0, size=(327680,)),
        MemoryDep(name='buf378', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf379', index=c1, size=(8, 640, 64))]
buf383.met_dependencies = 
    [   MemoryDep(name='primals_294', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_295', index=c1, size=(8, 640, 64))]
buf383.group.device = cuda:0
buf383.group.iteration = (327680, 1)
buf383.sizes = ([8, 640, 64], [])
class buf383_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf378', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf379', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_294', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_295', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf359', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf383', get_index_6, relu, None)
        return store


buf384: ExternKernelSchedulerNode(Convolution)
buf384.writes = [StarDep(name='buf384')]
buf384.unmet_dependencies = [StarDep(name='buf383')]
buf384.met_dependencies = [StarDep(name='primals_48')]
buf384.node.kernel = aten.convolution


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = 
    [   MemoryDep(name='buf385', index=c0, size=(1920, 512)),
        MemoryDep(name='buf385', index=c0, size=(1920,))]
buf385.unmet_dependencies = [MemoryDep(name='buf384', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf385.met_dependencies = []
buf385.group.device = cuda:0
buf385.group.iteration = (1920, 512)
buf385.sizes = ([1920], [8, 64])
class buf385_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf385', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf386: SchedulerNode(ComputedBuffer)
buf386.writes = [MemoryDep(name='buf386', index=c0, size=(1920,))]
buf386.unmet_dependencies = [MemoryDep(name='buf385', index=c0, size=(1920,))]
buf386.met_dependencies = []
buf386.group.device = cuda:0
buf386.group.iteration = (1920, 1)
buf386.sizes = ([1920], [])
class buf386_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf386', get_index_1, div, None)
        return store


buf387: SchedulerNode(ComputedBuffer)
buf387.writes = 
    [   MemoryDep(name='buf387', index=c0, size=(1920, 512)),
        MemoryDep(name='buf387', index=c0, size=(1920,))]
buf387.unmet_dependencies = 
    [   MemoryDep(name='buf384', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf386', index=c0, size=(1920, 512))]
buf387.met_dependencies = []
buf387.group.device = cuda:0
buf387.group.iteration = (1920, 512)
buf387.sizes = ([1920], [8, 64])
class buf387_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf386', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf387', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf388: SchedulerNode(ComputedBuffer)
buf388.writes = [MemoryDep(name='buf388', index=c0, size=(1920,))]
buf388.unmet_dependencies = [MemoryDep(name='buf387', index=c0, size=(1920,))]
buf388.met_dependencies = []
buf388.group.device = cuda:0
buf388.group.iteration = (1920, 1)
buf388.sizes = ([1920], [])
class buf388_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf388', get_index_1, rsqrt, None)
        return store


buf389: SchedulerNode(ComputedBuffer)
buf389.writes = [MemoryDep(name='buf389', index=c0, size=(1920,))]
buf389.unmet_dependencies = [MemoryDep(name='buf386', index=c0, size=(1920,))]
buf389.met_dependencies = [MemoryDep(name='primals_297', index=c0, size=(1920,))]
buf389.group.device = cuda:0
buf389.group.iteration = (1920, 1)
buf389.sizes = ([1920], [])
class buf389_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_297', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, add, None)
        return store


buf390: SchedulerNode(ComputedBuffer)
buf390.writes = [MemoryDep(name='buf390', index=c0, size=(1920,))]
buf390.unmet_dependencies = [MemoryDep(name='buf387', index=c0, size=(1920,))]
buf390.met_dependencies = [MemoryDep(name='primals_298', index=c0, size=(1920,))]
buf390.group.device = cuda:0
buf390.group.iteration = (1920, 1)
buf390.sizes = ([1920], [])
class buf390_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_298', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf390', get_index_2, add, None)
        return store


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = [MemoryDep(name='buf391', index=c0, size=(983040,))]
buf391.unmet_dependencies = 
    [   MemoryDep(name='buf384', index=c0, size=(983040,)),
        MemoryDep(name='buf386', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf387', index=c1, size=(8, 1920, 64))]
buf391.met_dependencies = 
    [   MemoryDep(name='primals_299', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_300', index=c1, size=(8, 1920, 64))]
buf391.group.device = cuda:0
buf391.group.iteration = (983040, 1)
buf391.sizes = ([8, 1920, 64], [])
class buf391_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf386', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf387', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_299', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_300', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf391', get_index_5, relu, None)
        return store


buf392: ExternKernelSchedulerNode(Convolution)
buf392.writes = [StarDep(name='buf392')]
buf392.unmet_dependencies = [StarDep(name='buf391')]
buf392.met_dependencies = [StarDep(name='primals_49')]
buf392.node.kernel = aten.convolution


buf393: SchedulerNode(ComputedBuffer)
buf393.writes = 
    [   MemoryDep(name='buf393', index=c0, size=(1920, 512)),
        MemoryDep(name='buf393', index=c0, size=(1920,))]
buf393.unmet_dependencies = [MemoryDep(name='buf392', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf393.met_dependencies = []
buf393.group.device = cuda:0
buf393.group.iteration = (1920, 512)
buf393.sizes = ([1920], [8, 64])
class buf393_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf393', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf394: SchedulerNode(ComputedBuffer)
buf394.writes = [MemoryDep(name='buf394', index=c0, size=(1920,))]
buf394.unmet_dependencies = [MemoryDep(name='buf393', index=c0, size=(1920,))]
buf394.met_dependencies = []
buf394.group.device = cuda:0
buf394.group.iteration = (1920, 1)
buf394.sizes = ([1920], [])
class buf394_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf394', get_index_1, div, None)
        return store


buf395: SchedulerNode(ComputedBuffer)
buf395.writes = 
    [   MemoryDep(name='buf395', index=c0, size=(1920, 512)),
        MemoryDep(name='buf395', index=c0, size=(1920,))]
buf395.unmet_dependencies = 
    [   MemoryDep(name='buf392', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf394', index=c0, size=(1920, 512))]
buf395.met_dependencies = []
buf395.group.device = cuda:0
buf395.group.iteration = (1920, 512)
buf395.sizes = ([1920], [8, 64])
class buf395_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf394', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf395', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf396: SchedulerNode(ComputedBuffer)
buf396.writes = [MemoryDep(name='buf396', index=c0, size=(1920,))]
buf396.unmet_dependencies = [MemoryDep(name='buf395', index=c0, size=(1920,))]
buf396.met_dependencies = []
buf396.group.device = cuda:0
buf396.group.iteration = (1920, 1)
buf396.sizes = ([1920], [])
class buf396_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf396', get_index_1, rsqrt, None)
        return store


buf397: SchedulerNode(ComputedBuffer)
buf397.writes = [MemoryDep(name='buf397', index=c0, size=(1920,))]
buf397.unmet_dependencies = [MemoryDep(name='buf394', index=c0, size=(1920,))]
buf397.met_dependencies = [MemoryDep(name='primals_302', index=c0, size=(1920,))]
buf397.group.device = cuda:0
buf397.group.iteration = (1920, 1)
buf397.sizes = ([1920], [])
class buf397_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_302', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf397', get_index_2, add, None)
        return store


buf398: SchedulerNode(ComputedBuffer)
buf398.writes = [MemoryDep(name='buf398', index=c0, size=(1920,))]
buf398.unmet_dependencies = [MemoryDep(name='buf395', index=c0, size=(1920,))]
buf398.met_dependencies = [MemoryDep(name='primals_303', index=c0, size=(1920,))]
buf398.group.device = cuda:0
buf398.group.iteration = (1920, 1)
buf398.sizes = ([1920], [])
class buf398_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_303', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf398', get_index_2, add, None)
        return store


buf399: SchedulerNode(ComputedBuffer)
buf399.writes = [MemoryDep(name='buf399', index=c0, size=(983040,))]
buf399.unmet_dependencies = 
    [   MemoryDep(name='buf392', index=c0, size=(983040,)),
        MemoryDep(name='buf394', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf395', index=c1, size=(8, 1920, 64))]
buf399.met_dependencies = 
    [   MemoryDep(name='primals_304', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_305', index=c1, size=(8, 1920, 64))]
buf399.group.device = cuda:0
buf399.group.iteration = (983040, 1)
buf399.sizes = ([8, 1920, 64], [])
class buf399_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf394', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf395', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_304', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_305', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf399', get_index_5, relu, None)
        return store


buf400: ExternKernelSchedulerNode(Convolution)
buf400.writes = [StarDep(name='buf400')]
buf400.unmet_dependencies = [StarDep(name='buf399')]
buf400.met_dependencies = [StarDep(name='primals_50')]
buf400.node.kernel = aten.convolution


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = 
    [   MemoryDep(name='buf401', index=c0, size=(640, 512)),
        MemoryDep(name='buf401', index=c0, size=(640,))]
buf401.unmet_dependencies = [MemoryDep(name='buf400', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf401.met_dependencies = []
buf401.group.device = cuda:0
buf401.group.iteration = (640, 512)
buf401.sizes = ([640], [8, 64])
class buf401_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf401', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf402: SchedulerNode(ComputedBuffer)
buf402.writes = [MemoryDep(name='buf402', index=c0, size=(640,))]
buf402.unmet_dependencies = [MemoryDep(name='buf401', index=c0, size=(640,))]
buf402.met_dependencies = []
buf402.group.device = cuda:0
buf402.group.iteration = (640, 1)
buf402.sizes = ([640], [])
class buf402_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf402', get_index_1, div, None)
        return store


buf403: SchedulerNode(ComputedBuffer)
buf403.writes = 
    [   MemoryDep(name='buf403', index=c0, size=(640, 512)),
        MemoryDep(name='buf403', index=c0, size=(640,))]
buf403.unmet_dependencies = 
    [   MemoryDep(name='buf400', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf402', index=c0, size=(640, 512))]
buf403.met_dependencies = []
buf403.group.device = cuda:0
buf403.group.iteration = (640, 512)
buf403.sizes = ([640], [8, 64])
class buf403_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf403', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf404: SchedulerNode(ComputedBuffer)
buf404.writes = [MemoryDep(name='buf404', index=c0, size=(640,))]
buf404.unmet_dependencies = [MemoryDep(name='buf403', index=c0, size=(640,))]
buf404.met_dependencies = []
buf404.group.device = cuda:0
buf404.group.iteration = (640, 1)
buf404.sizes = ([640], [])
class buf404_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf404', get_index_1, rsqrt, None)
        return store


buf405: SchedulerNode(ComputedBuffer)
buf405.writes = [MemoryDep(name='buf405', index=c0, size=(640,))]
buf405.unmet_dependencies = [MemoryDep(name='buf402', index=c0, size=(640,))]
buf405.met_dependencies = [MemoryDep(name='primals_307', index=c0, size=(640,))]
buf405.group.device = cuda:0
buf405.group.iteration = (640, 1)
buf405.sizes = ([640], [])
class buf405_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_307', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf405', get_index_2, add, None)
        return store


buf406: SchedulerNode(ComputedBuffer)
buf406.writes = [MemoryDep(name='buf406', index=c0, size=(640,))]
buf406.unmet_dependencies = [MemoryDep(name='buf403', index=c0, size=(640,))]
buf406.met_dependencies = [MemoryDep(name='primals_308', index=c0, size=(640,))]
buf406.group.device = cuda:0
buf406.group.iteration = (640, 1)
buf406.sizes = ([640], [])
class buf406_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_308', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf406', get_index_2, add, None)
        return store


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = [MemoryDep(name='buf407', index=c0, size=(327680,))]
buf407.unmet_dependencies = 
    [   MemoryDep(name='buf383', index=c0, size=(327680,)),
        MemoryDep(name='buf400', index=c0, size=(327680,)),
        MemoryDep(name='buf402', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf403', index=c1, size=(8, 640, 64))]
buf407.met_dependencies = 
    [   MemoryDep(name='primals_309', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_310', index=c1, size=(8, 640, 64))]
buf407.group.device = cuda:0
buf407.group.iteration = (327680, 1)
buf407.sizes = ([8, 640, 64], [])
class buf407_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf403', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_309', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_310', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf383', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf407', get_index_6, relu, None)
        return store


buf408: ExternKernelSchedulerNode(Convolution)
buf408.writes = [StarDep(name='buf408')]
buf408.unmet_dependencies = [StarDep(name='buf407')]
buf408.met_dependencies = [StarDep(name='primals_51')]
buf408.node.kernel = aten.convolution


buf409: SchedulerNode(ComputedBuffer)
buf409.writes = 
    [   MemoryDep(name='buf409', index=c0, size=(1920, 512)),
        MemoryDep(name='buf409', index=c0, size=(1920,))]
buf409.unmet_dependencies = [MemoryDep(name='buf408', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf409.met_dependencies = []
buf409.group.device = cuda:0
buf409.group.iteration = (1920, 512)
buf409.sizes = ([1920], [8, 64])
class buf409_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf409', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf410: SchedulerNode(ComputedBuffer)
buf410.writes = [MemoryDep(name='buf410', index=c0, size=(1920,))]
buf410.unmet_dependencies = [MemoryDep(name='buf409', index=c0, size=(1920,))]
buf410.met_dependencies = []
buf410.group.device = cuda:0
buf410.group.iteration = (1920, 1)
buf410.sizes = ([1920], [])
class buf410_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf410', get_index_1, div, None)
        return store


buf411: SchedulerNode(ComputedBuffer)
buf411.writes = 
    [   MemoryDep(name='buf411', index=c0, size=(1920, 512)),
        MemoryDep(name='buf411', index=c0, size=(1920,))]
buf411.unmet_dependencies = 
    [   MemoryDep(name='buf408', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf410', index=c0, size=(1920, 512))]
buf411.met_dependencies = []
buf411.group.device = cuda:0
buf411.group.iteration = (1920, 512)
buf411.sizes = ([1920], [8, 64])
class buf411_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf410', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf411', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf412: SchedulerNode(ComputedBuffer)
buf412.writes = [MemoryDep(name='buf412', index=c0, size=(1920,))]
buf412.unmet_dependencies = [MemoryDep(name='buf411', index=c0, size=(1920,))]
buf412.met_dependencies = []
buf412.group.device = cuda:0
buf412.group.iteration = (1920, 1)
buf412.sizes = ([1920], [])
class buf412_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf412', get_index_1, rsqrt, None)
        return store


buf413: SchedulerNode(ComputedBuffer)
buf413.writes = [MemoryDep(name='buf413', index=c0, size=(1920,))]
buf413.unmet_dependencies = [MemoryDep(name='buf410', index=c0, size=(1920,))]
buf413.met_dependencies = [MemoryDep(name='primals_312', index=c0, size=(1920,))]
buf413.group.device = cuda:0
buf413.group.iteration = (1920, 1)
buf413.sizes = ([1920], [])
class buf413_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_312', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf413', get_index_2, add, None)
        return store


buf414: SchedulerNode(ComputedBuffer)
buf414.writes = [MemoryDep(name='buf414', index=c0, size=(1920,))]
buf414.unmet_dependencies = [MemoryDep(name='buf411', index=c0, size=(1920,))]
buf414.met_dependencies = [MemoryDep(name='primals_313', index=c0, size=(1920,))]
buf414.group.device = cuda:0
buf414.group.iteration = (1920, 1)
buf414.sizes = ([1920], [])
class buf414_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_313', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf414', get_index_2, add, None)
        return store


buf415: SchedulerNode(ComputedBuffer)
buf415.writes = [MemoryDep(name='buf415', index=c0, size=(983040,))]
buf415.unmet_dependencies = 
    [   MemoryDep(name='buf408', index=c0, size=(983040,)),
        MemoryDep(name='buf410', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf411', index=c1, size=(8, 1920, 64))]
buf415.met_dependencies = 
    [   MemoryDep(name='primals_314', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_315', index=c1, size=(8, 1920, 64))]
buf415.group.device = cuda:0
buf415.group.iteration = (983040, 1)
buf415.sizes = ([8, 1920, 64], [])
class buf415_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf410', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf411', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_314', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_315', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf415', get_index_5, relu, None)
        return store


buf416: ExternKernelSchedulerNode(Convolution)
buf416.writes = [StarDep(name='buf416')]
buf416.unmet_dependencies = [StarDep(name='buf415')]
buf416.met_dependencies = [StarDep(name='primals_52')]
buf416.node.kernel = aten.convolution


buf417: SchedulerNode(ComputedBuffer)
buf417.writes = 
    [   MemoryDep(name='buf417', index=c0, size=(1920, 512)),
        MemoryDep(name='buf417', index=c0, size=(1920,))]
buf417.unmet_dependencies = [MemoryDep(name='buf416', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf417.met_dependencies = []
buf417.group.device = cuda:0
buf417.group.iteration = (1920, 512)
buf417.sizes = ([1920], [8, 64])
class buf417_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf417', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf418: SchedulerNode(ComputedBuffer)
buf418.writes = [MemoryDep(name='buf418', index=c0, size=(1920,))]
buf418.unmet_dependencies = [MemoryDep(name='buf417', index=c0, size=(1920,))]
buf418.met_dependencies = []
buf418.group.device = cuda:0
buf418.group.iteration = (1920, 1)
buf418.sizes = ([1920], [])
class buf418_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf418', get_index_1, div, None)
        return store


buf419: SchedulerNode(ComputedBuffer)
buf419.writes = 
    [   MemoryDep(name='buf419', index=c0, size=(1920, 512)),
        MemoryDep(name='buf419', index=c0, size=(1920,))]
buf419.unmet_dependencies = 
    [   MemoryDep(name='buf416', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf418', index=c0, size=(1920, 512))]
buf419.met_dependencies = []
buf419.group.device = cuda:0
buf419.group.iteration = (1920, 512)
buf419.sizes = ([1920], [8, 64])
class buf419_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf418', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf419', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf420: SchedulerNode(ComputedBuffer)
buf420.writes = [MemoryDep(name='buf420', index=c0, size=(1920,))]
buf420.unmet_dependencies = [MemoryDep(name='buf419', index=c0, size=(1920,))]
buf420.met_dependencies = []
buf420.group.device = cuda:0
buf420.group.iteration = (1920, 1)
buf420.sizes = ([1920], [])
class buf420_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf420', get_index_1, rsqrt, None)
        return store


buf421: SchedulerNode(ComputedBuffer)
buf421.writes = [MemoryDep(name='buf421', index=c0, size=(1920,))]
buf421.unmet_dependencies = [MemoryDep(name='buf418', index=c0, size=(1920,))]
buf421.met_dependencies = [MemoryDep(name='primals_317', index=c0, size=(1920,))]
buf421.group.device = cuda:0
buf421.group.iteration = (1920, 1)
buf421.sizes = ([1920], [])
class buf421_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_317', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf421', get_index_2, add, None)
        return store


buf422: SchedulerNode(ComputedBuffer)
buf422.writes = [MemoryDep(name='buf422', index=c0, size=(1920,))]
buf422.unmet_dependencies = [MemoryDep(name='buf419', index=c0, size=(1920,))]
buf422.met_dependencies = [MemoryDep(name='primals_318', index=c0, size=(1920,))]
buf422.group.device = cuda:0
buf422.group.iteration = (1920, 1)
buf422.sizes = ([1920], [])
class buf422_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_318', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf422', get_index_2, add, None)
        return store


buf423: SchedulerNode(ComputedBuffer)
buf423.writes = [MemoryDep(name='buf423', index=c0, size=(983040,))]
buf423.unmet_dependencies = 
    [   MemoryDep(name='buf416', index=c0, size=(983040,)),
        MemoryDep(name='buf418', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf419', index=c1, size=(8, 1920, 64))]
buf423.met_dependencies = 
    [   MemoryDep(name='primals_319', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_320', index=c1, size=(8, 1920, 64))]
buf423.group.device = cuda:0
buf423.group.iteration = (983040, 1)
buf423.sizes = ([8, 1920, 64], [])
class buf423_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf418', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf419', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_319', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_320', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf423', get_index_5, relu, None)
        return store


buf424: ExternKernelSchedulerNode(Convolution)
buf424.writes = [StarDep(name='buf424')]
buf424.unmet_dependencies = [StarDep(name='buf423')]
buf424.met_dependencies = [StarDep(name='primals_53')]
buf424.node.kernel = aten.convolution


buf425: SchedulerNode(ComputedBuffer)
buf425.writes = 
    [   MemoryDep(name='buf425', index=c0, size=(640, 512)),
        MemoryDep(name='buf425', index=c0, size=(640,))]
buf425.unmet_dependencies = [MemoryDep(name='buf424', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf425.met_dependencies = []
buf425.group.device = cuda:0
buf425.group.iteration = (640, 512)
buf425.sizes = ([640], [8, 64])
class buf425_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf425', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf426: SchedulerNode(ComputedBuffer)
buf426.writes = [MemoryDep(name='buf426', index=c0, size=(640,))]
buf426.unmet_dependencies = [MemoryDep(name='buf425', index=c0, size=(640,))]
buf426.met_dependencies = []
buf426.group.device = cuda:0
buf426.group.iteration = (640, 1)
buf426.sizes = ([640], [])
class buf426_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf426', get_index_1, div, None)
        return store


buf427: SchedulerNode(ComputedBuffer)
buf427.writes = 
    [   MemoryDep(name='buf427', index=c0, size=(640, 512)),
        MemoryDep(name='buf427', index=c0, size=(640,))]
buf427.unmet_dependencies = 
    [   MemoryDep(name='buf424', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf426', index=c0, size=(640, 512))]
buf427.met_dependencies = []
buf427.group.device = cuda:0
buf427.group.iteration = (640, 512)
buf427.sizes = ([640], [8, 64])
class buf427_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf426', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf427', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf428: SchedulerNode(ComputedBuffer)
buf428.writes = [MemoryDep(name='buf428', index=c0, size=(640,))]
buf428.unmet_dependencies = [MemoryDep(name='buf427', index=c0, size=(640,))]
buf428.met_dependencies = []
buf428.group.device = cuda:0
buf428.group.iteration = (640, 1)
buf428.sizes = ([640], [])
class buf428_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf428', get_index_1, rsqrt, None)
        return store


buf429: SchedulerNode(ComputedBuffer)
buf429.writes = [MemoryDep(name='buf429', index=c0, size=(640,))]
buf429.unmet_dependencies = [MemoryDep(name='buf426', index=c0, size=(640,))]
buf429.met_dependencies = [MemoryDep(name='primals_322', index=c0, size=(640,))]
buf429.group.device = cuda:0
buf429.group.iteration = (640, 1)
buf429.sizes = ([640], [])
class buf429_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf426', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_322', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf429', get_index_2, add, None)
        return store


buf430: SchedulerNode(ComputedBuffer)
buf430.writes = [MemoryDep(name='buf430', index=c0, size=(640,))]
buf430.unmet_dependencies = [MemoryDep(name='buf427', index=c0, size=(640,))]
buf430.met_dependencies = [MemoryDep(name='primals_323', index=c0, size=(640,))]
buf430.group.device = cuda:0
buf430.group.iteration = (640, 1)
buf430.sizes = ([640], [])
class buf430_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_323', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf430', get_index_2, add, None)
        return store


buf431: SchedulerNode(ComputedBuffer)
buf431.writes = [MemoryDep(name='buf431', index=c0, size=(327680,))]
buf431.unmet_dependencies = 
    [   MemoryDep(name='buf407', index=c0, size=(327680,)),
        MemoryDep(name='buf424', index=c0, size=(327680,)),
        MemoryDep(name='buf426', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf427', index=c1, size=(8, 640, 64))]
buf431.met_dependencies = 
    [   MemoryDep(name='primals_324', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_325', index=c1, size=(8, 640, 64))]
buf431.group.device = cuda:0
buf431.group.iteration = (327680, 1)
buf431.sizes = ([8, 640, 64], [])
class buf431_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf426', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf427', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_324', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_325', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf407', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf431', get_index_6, relu, None)
        return store


buf432: ExternKernelSchedulerNode(Convolution)
buf432.writes = [StarDep(name='buf432')]
buf432.unmet_dependencies = [StarDep(name='buf431')]
buf432.met_dependencies = [StarDep(name='primals_54')]
buf432.node.kernel = aten.convolution


buf433: SchedulerNode(ComputedBuffer)
buf433.writes = 
    [   MemoryDep(name='buf433', index=c0, size=(1920, 512)),
        MemoryDep(name='buf433', index=c0, size=(1920,))]
buf433.unmet_dependencies = [MemoryDep(name='buf432', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf433.met_dependencies = []
buf433.group.device = cuda:0
buf433.group.iteration = (1920, 512)
buf433.sizes = ([1920], [8, 64])
class buf433_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf433', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf434: SchedulerNode(ComputedBuffer)
buf434.writes = [MemoryDep(name='buf434', index=c0, size=(1920,))]
buf434.unmet_dependencies = [MemoryDep(name='buf433', index=c0, size=(1920,))]
buf434.met_dependencies = []
buf434.group.device = cuda:0
buf434.group.iteration = (1920, 1)
buf434.sizes = ([1920], [])
class buf434_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf434', get_index_1, div, None)
        return store


buf435: SchedulerNode(ComputedBuffer)
buf435.writes = 
    [   MemoryDep(name='buf435', index=c0, size=(1920, 512)),
        MemoryDep(name='buf435', index=c0, size=(1920,))]
buf435.unmet_dependencies = 
    [   MemoryDep(name='buf432', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf434', index=c0, size=(1920, 512))]
buf435.met_dependencies = []
buf435.group.device = cuda:0
buf435.group.iteration = (1920, 512)
buf435.sizes = ([1920], [8, 64])
class buf435_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf434', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf435', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf436: SchedulerNode(ComputedBuffer)
buf436.writes = [MemoryDep(name='buf436', index=c0, size=(1920,))]
buf436.unmet_dependencies = [MemoryDep(name='buf435', index=c0, size=(1920,))]
buf436.met_dependencies = []
buf436.group.device = cuda:0
buf436.group.iteration = (1920, 1)
buf436.sizes = ([1920], [])
class buf436_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf436', get_index_1, rsqrt, None)
        return store


buf437: SchedulerNode(ComputedBuffer)
buf437.writes = [MemoryDep(name='buf437', index=c0, size=(1920,))]
buf437.unmet_dependencies = [MemoryDep(name='buf434', index=c0, size=(1920,))]
buf437.met_dependencies = [MemoryDep(name='primals_327', index=c0, size=(1920,))]
buf437.group.device = cuda:0
buf437.group.iteration = (1920, 1)
buf437.sizes = ([1920], [])
class buf437_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_327', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf437', get_index_2, add, None)
        return store


buf438: SchedulerNode(ComputedBuffer)
buf438.writes = [MemoryDep(name='buf438', index=c0, size=(1920,))]
buf438.unmet_dependencies = [MemoryDep(name='buf435', index=c0, size=(1920,))]
buf438.met_dependencies = [MemoryDep(name='primals_328', index=c0, size=(1920,))]
buf438.group.device = cuda:0
buf438.group.iteration = (1920, 1)
buf438.sizes = ([1920], [])
class buf438_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_328', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf438', get_index_2, add, None)
        return store


buf439: SchedulerNode(ComputedBuffer)
buf439.writes = [MemoryDep(name='buf439', index=c0, size=(983040,))]
buf439.unmet_dependencies = 
    [   MemoryDep(name='buf432', index=c0, size=(983040,)),
        MemoryDep(name='buf434', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf435', index=c1, size=(8, 1920, 64))]
buf439.met_dependencies = 
    [   MemoryDep(name='primals_329', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_330', index=c1, size=(8, 1920, 64))]
buf439.group.device = cuda:0
buf439.group.iteration = (983040, 1)
buf439.sizes = ([8, 1920, 64], [])
class buf439_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf434', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf435', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_329', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_330', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf439', get_index_5, relu, None)
        return store


buf440: ExternKernelSchedulerNode(Convolution)
buf440.writes = [StarDep(name='buf440')]
buf440.unmet_dependencies = [StarDep(name='buf439')]
buf440.met_dependencies = [StarDep(name='primals_55')]
buf440.node.kernel = aten.convolution


buf441: SchedulerNode(ComputedBuffer)
buf441.writes = 
    [   MemoryDep(name='buf441', index=c0, size=(1920, 512)),
        MemoryDep(name='buf441', index=c0, size=(1920,))]
buf441.unmet_dependencies = [MemoryDep(name='buf440', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64))]
buf441.met_dependencies = []
buf441.group.device = cuda:0
buf441.group.iteration = (1920, 512)
buf441.sizes = ([1920], [8, 64])
class buf441_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf441', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf442: SchedulerNode(ComputedBuffer)
buf442.writes = [MemoryDep(name='buf442', index=c0, size=(1920,))]
buf442.unmet_dependencies = [MemoryDep(name='buf441', index=c0, size=(1920,))]
buf442.met_dependencies = []
buf442.group.device = cuda:0
buf442.group.iteration = (1920, 1)
buf442.sizes = ([1920], [])
class buf442_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf442', get_index_1, div, None)
        return store


buf443: SchedulerNode(ComputedBuffer)
buf443.writes = 
    [   MemoryDep(name='buf443', index=c0, size=(1920, 512)),
        MemoryDep(name='buf443', index=c0, size=(1920,))]
buf443.unmet_dependencies = 
    [   MemoryDep(name='buf440', index=64*c0 + 122880*c1 + c2, size=(1920, 8, 64)),
        MemoryDep(name='buf442', index=c0, size=(1920, 512))]
buf443.met_dependencies = []
buf443.group.device = cuda:0
buf443.group.iteration = (1920, 512)
buf443.sizes = ([1920], [8, 64])
class buf443_loop_body:
    var_ranges = {z0: 1920, z1: 8, z2: 64}
    index0 = 64*z0 + 122880*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf442', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf443', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf444: SchedulerNode(ComputedBuffer)
buf444.writes = [MemoryDep(name='buf444', index=c0, size=(1920,))]
buf444.unmet_dependencies = [MemoryDep(name='buf443', index=c0, size=(1920,))]
buf444.met_dependencies = []
buf444.group.device = cuda:0
buf444.group.iteration = (1920, 1)
buf444.sizes = ([1920], [])
class buf444_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf444', get_index_1, rsqrt, None)
        return store


buf445: SchedulerNode(ComputedBuffer)
buf445.writes = [MemoryDep(name='buf445', index=c0, size=(1920,))]
buf445.unmet_dependencies = [MemoryDep(name='buf442', index=c0, size=(1920,))]
buf445.met_dependencies = [MemoryDep(name='primals_332', index=c0, size=(1920,))]
buf445.group.device = cuda:0
buf445.group.iteration = (1920, 1)
buf445.sizes = ([1920], [])
class buf445_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_332', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf445', get_index_2, add, None)
        return store


buf446: SchedulerNode(ComputedBuffer)
buf446.writes = [MemoryDep(name='buf446', index=c0, size=(1920,))]
buf446.unmet_dependencies = [MemoryDep(name='buf443', index=c0, size=(1920,))]
buf446.met_dependencies = [MemoryDep(name='primals_333', index=c0, size=(1920,))]
buf446.group.device = cuda:0
buf446.group.iteration = (1920, 1)
buf446.sizes = ([1920], [])
class buf446_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_333', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf446', get_index_2, add, None)
        return store


buf447: SchedulerNode(ComputedBuffer)
buf447.writes = [MemoryDep(name='buf447', index=c0, size=(983040,))]
buf447.unmet_dependencies = 
    [   MemoryDep(name='buf440', index=c0, size=(983040,)),
        MemoryDep(name='buf442', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='buf443', index=c1, size=(8, 1920, 64))]
buf447.met_dependencies = 
    [   MemoryDep(name='primals_334', index=c1, size=(8, 1920, 64)),
        MemoryDep(name='primals_335', index=c1, size=(8, 1920, 64))]
buf447.group.device = cuda:0
buf447.group.iteration = (983040, 1)
buf447.sizes = ([8, 1920, 64], [])
class buf447_loop_body:
    var_ranges = {z0: 8, z1: 1920, z2: 64}
    index0 = 122880*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf442', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf443', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_334', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_335', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf447', get_index_5, relu, None)
        return store


buf448: ExternKernelSchedulerNode(Convolution)
buf448.writes = [StarDep(name='buf448')]
buf448.unmet_dependencies = [StarDep(name='buf447')]
buf448.met_dependencies = [StarDep(name='primals_56')]
buf448.node.kernel = aten.convolution


buf449: SchedulerNode(ComputedBuffer)
buf449.writes = 
    [   MemoryDep(name='buf449', index=c0, size=(640, 512)),
        MemoryDep(name='buf449', index=c0, size=(640,))]
buf449.unmet_dependencies = [MemoryDep(name='buf448', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64))]
buf449.met_dependencies = []
buf449.group.device = cuda:0
buf449.group.iteration = (640, 512)
buf449.sizes = ([640], [8, 64])
class buf449_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf449', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf450: SchedulerNode(ComputedBuffer)
buf450.writes = [MemoryDep(name='buf450', index=c0, size=(640,))]
buf450.unmet_dependencies = [MemoryDep(name='buf449', index=c0, size=(640,))]
buf450.met_dependencies = []
buf450.group.device = cuda:0
buf450.group.iteration = (640, 1)
buf450.sizes = ([640], [])
class buf450_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf450', get_index_1, div, None)
        return store


buf451: SchedulerNode(ComputedBuffer)
buf451.writes = 
    [   MemoryDep(name='buf451', index=c0, size=(640, 512)),
        MemoryDep(name='buf451', index=c0, size=(640,))]
buf451.unmet_dependencies = 
    [   MemoryDep(name='buf448', index=64*c0 + 40960*c1 + c2, size=(640, 8, 64)),
        MemoryDep(name='buf450', index=c0, size=(640, 512))]
buf451.met_dependencies = []
buf451.group.device = cuda:0
buf451.group.iteration = (640, 512)
buf451.sizes = ([640], [8, 64])
class buf451_loop_body:
    var_ranges = {z0: 640, z1: 8, z2: 64}
    index0 = 64*z0 + 40960*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf450', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf451', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf452: SchedulerNode(ComputedBuffer)
buf452.writes = [MemoryDep(name='buf452', index=c0, size=(640,))]
buf452.unmet_dependencies = [MemoryDep(name='buf451', index=c0, size=(640,))]
buf452.met_dependencies = []
buf452.group.device = cuda:0
buf452.group.iteration = (640, 1)
buf452.sizes = ([640], [])
class buf452_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf452', get_index_1, rsqrt, None)
        return store


buf453: SchedulerNode(ComputedBuffer)
buf453.writes = [MemoryDep(name='buf453', index=c0, size=(640,))]
buf453.unmet_dependencies = [MemoryDep(name='buf450', index=c0, size=(640,))]
buf453.met_dependencies = [MemoryDep(name='primals_337', index=c0, size=(640,))]
buf453.group.device = cuda:0
buf453.group.iteration = (640, 1)
buf453.sizes = ([640], [])
class buf453_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_337', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf453', get_index_2, add, None)
        return store


buf454: SchedulerNode(ComputedBuffer)
buf454.writes = [MemoryDep(name='buf454', index=c0, size=(640,))]
buf454.unmet_dependencies = [MemoryDep(name='buf451', index=c0, size=(640,))]
buf454.met_dependencies = [MemoryDep(name='primals_338', index=c0, size=(640,))]
buf454.group.device = cuda:0
buf454.group.iteration = (640, 1)
buf454.sizes = ([640], [])
class buf454_loop_body:
    var_ranges = {z0: 640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_338', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf454', get_index_2, add, None)
        return store


buf455: SchedulerNode(ComputedBuffer)
buf455.writes = [MemoryDep(name='buf455', index=c0, size=(327680,))]
buf455.unmet_dependencies = 
    [   MemoryDep(name='buf431', index=c0, size=(327680,)),
        MemoryDep(name='buf448', index=c0, size=(327680,)),
        MemoryDep(name='buf450', index=c1, size=(8, 640, 64)),
        MemoryDep(name='buf451', index=c1, size=(8, 640, 64))]
buf455.met_dependencies = 
    [   MemoryDep(name='primals_339', index=c1, size=(8, 640, 64)),
        MemoryDep(name='primals_340', index=c1, size=(8, 640, 64))]
buf455.group.device = cuda:0
buf455.group.iteration = (327680, 1)
buf455.sizes = ([8, 640, 64], [])
class buf455_loop_body:
    var_ranges = {z0: 8, z1: 640, z2: 64}
    index0 = 40960*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf450', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf451', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_339', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_340', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf431', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf455', get_index_6, relu, None)
        return store


buf456: ExternKernelSchedulerNode(Convolution)
buf456.writes = [StarDep(name='buf456')]
buf456.unmet_dependencies = [StarDep(name='buf455')]
buf456.met_dependencies = [StarDep(name='primals_57')]
buf456.node.kernel = aten.convolution


buf457: SchedulerNode(ComputedBuffer)
buf457.writes = 
    [   MemoryDep(name='buf457', index=c0, size=(2560, 512)),
        MemoryDep(name='buf457', index=c0, size=(2560,))]
buf457.unmet_dependencies = [MemoryDep(name='buf456', index=64*c0 + 163840*c1 + c2, size=(2560, 8, 64))]
buf457.met_dependencies = []
buf457.group.device = cuda:0
buf457.group.iteration = (2560, 512)
buf457.sizes = ([2560], [8, 64])
class buf457_loop_body:
    var_ranges = {z0: 2560, z1: 8, z2: 64}
    index0 = 64*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf457', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf458: SchedulerNode(ComputedBuffer)
buf458.writes = [MemoryDep(name='buf458', index=c0, size=(2560,))]
buf458.unmet_dependencies = [MemoryDep(name='buf457', index=c0, size=(2560,))]
buf458.met_dependencies = []
buf458.group.device = cuda:0
buf458.group.iteration = (2560, 1)
buf458.sizes = ([2560], [])
class buf458_loop_body:
    var_ranges = {z0: 2560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf458', get_index_1, div, None)
        return store


buf459: SchedulerNode(ComputedBuffer)
buf459.writes = 
    [   MemoryDep(name='buf459', index=c0, size=(2560, 512)),
        MemoryDep(name='buf459', index=c0, size=(2560,))]
buf459.unmet_dependencies = 
    [   MemoryDep(name='buf456', index=64*c0 + 163840*c1 + c2, size=(2560, 8, 64)),
        MemoryDep(name='buf458', index=c0, size=(2560, 512))]
buf459.met_dependencies = []
buf459.group.device = cuda:0
buf459.group.iteration = (2560, 512)
buf459.sizes = ([2560], [8, 64])
class buf459_loop_body:
    var_ranges = {z0: 2560, z1: 8, z2: 64}
    index0 = 64*z0 + 163840*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf458', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf459', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf460: SchedulerNode(ComputedBuffer)
buf460.writes = [MemoryDep(name='buf460', index=c0, size=(2560,))]
buf460.unmet_dependencies = [MemoryDep(name='buf459', index=c0, size=(2560,))]
buf460.met_dependencies = []
buf460.group.device = cuda:0
buf460.group.iteration = (2560, 1)
buf460.sizes = ([2560], [])
class buf460_loop_body:
    var_ranges = {z0: 2560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, rsqrt, None)
        return store


buf461: SchedulerNode(ComputedBuffer)
buf461.writes = [MemoryDep(name='buf461', index=c0, size=(2560,))]
buf461.unmet_dependencies = [MemoryDep(name='buf458', index=c0, size=(2560,))]
buf461.met_dependencies = [MemoryDep(name='primals_342', index=c0, size=(2560,))]
buf461.group.device = cuda:0
buf461.group.iteration = (2560, 1)
buf461.sizes = ([2560], [])
class buf461_loop_body:
    var_ranges = {z0: 2560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_342', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf461', get_index_2, add, None)
        return store


buf462: SchedulerNode(ComputedBuffer)
buf462.writes = [MemoryDep(name='buf462', index=c0, size=(2560,))]
buf462.unmet_dependencies = [MemoryDep(name='buf459', index=c0, size=(2560,))]
buf462.met_dependencies = [MemoryDep(name='primals_343', index=c0, size=(2560,))]
buf462.group.device = cuda:0
buf462.group.iteration = (2560, 1)
buf462.sizes = ([2560], [])
class buf462_loop_body:
    var_ranges = {z0: 2560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_343', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf462', get_index_2, add, None)
        return store


buf463: SchedulerNode(ComputedBuffer)
buf463.writes = [MemoryDep(name='buf463', index=c0, size=(1310720,))]
buf463.unmet_dependencies = 
    [   MemoryDep(name='buf456', index=c0, size=(1310720,)),
        MemoryDep(name='buf458', index=c1, size=(8, 2560, 64)),
        MemoryDep(name='buf459', index=c1, size=(8, 2560, 64))]
buf463.met_dependencies = 
    [   MemoryDep(name='primals_344', index=c1, size=(8, 2560, 64)),
        MemoryDep(name='primals_345', index=c1, size=(8, 2560, 64))]
buf463.group.device = cuda:0
buf463.group.iteration = (1310720, 1)
buf463.sizes = ([8, 2560, 64], [])
class buf463_loop_body:
    var_ranges = {z0: 8, z1: 2560, z2: 64}
    index0 = 163840*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf458', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf459', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_344', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_345', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf463', get_index_5, relu, None)
        return store


buf464: SchedulerNode(ComputedBuffer)
buf464.writes = 
    [   MemoryDep(name='buf464', index=c0, size=(20480, 64)),
        MemoryDep(name='buf464', index=c0, size=(20480,))]
buf464.unmet_dependencies = [MemoryDep(name='buf463', index=c0, size=(1310720,))]
buf464.met_dependencies = []
buf464.group.device = cuda:0
buf464.group.iteration = (20480, 64)
buf464.sizes = ([20480], [64])
class buf464_loop_body:
    var_ranges = {z0: 20480, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf464', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf465: SchedulerNode(ComputedBuffer)
buf465.writes = [MemoryDep(name='buf465', index=c0, size=(20480,))]
buf465.unmet_dependencies = [MemoryDep(name='buf464', index=c0, size=(20480,))]
buf465.met_dependencies = []
buf465.group.device = cuda:0
buf465.group.iteration = (20480, 1)
buf465.sizes = ([20480], [])
class buf465_loop_body:
    var_ranges = {z0: 20480}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf465', get_index_1, div, None)
        return store


buf466: ExternKernelSchedulerNode(ExternKernelOut)
buf466.writes = [StarDep(name='buf466')]
buf466.unmet_dependencies = [StarDep(name='buf465')]
buf466.met_dependencies = [StarDep(name='primals_58'), StarDep(name='primals_59')]
buf466.node.kernel = extern_kernels.addmm


buf467: SchedulerNode(ComputedBuffer)
buf467.writes = [MemoryDep(name='buf467', index=c0, size=(1310720,))]
buf467.unmet_dependencies = [MemoryDep(name='buf463', index=c0, size=(1310720,))]
buf467.met_dependencies = []
buf467.group.device = cuda:0
buf467.group.iteration = (1310720, 1)
buf467.sizes = ([1310720], [])
class buf467_loop_body:
    var_ranges = {z0: 1310720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf467', get_index_1, le, None)
        return store


buf468: SchedulerNode(ComputedBuffer)
buf468.writes = [MemoryDep(name='buf468', index=0, size=())]
buf468.unmet_dependencies = []
buf468.met_dependencies = [MemoryDep(name='primals_61', index=0, size=())]
buf468.group.device = cuda:0
buf468.group.iteration = (1, 1)
buf468.sizes = ([], [])
class buf468_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_61', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf468', get_index_1, add, None)
        return store


buf469: SchedulerNode(ComputedBuffer)
buf469.writes = [MemoryDep(name='buf469', index=0, size=())]
buf469.unmet_dependencies = []
buf469.met_dependencies = [MemoryDep(name='primals_66', index=0, size=())]
buf469.group.device = cuda:0
buf469.group.iteration = (1, 1)
buf469.sizes = ([], [])
class buf469_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_66', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf469', get_index_1, add, None)
        return store


buf470: SchedulerNode(ComputedBuffer)
buf470.writes = [MemoryDep(name='buf470', index=0, size=())]
buf470.unmet_dependencies = []
buf470.met_dependencies = [MemoryDep(name='primals_71', index=0, size=())]
buf470.group.device = cuda:0
buf470.group.iteration = (1, 1)
buf470.sizes = ([], [])
class buf470_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_71', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf470', get_index_1, add, None)
        return store


buf471: SchedulerNode(ComputedBuffer)
buf471.writes = [MemoryDep(name='buf471', index=0, size=())]
buf471.unmet_dependencies = []
buf471.met_dependencies = [MemoryDep(name='primals_76', index=0, size=())]
buf471.group.device = cuda:0
buf471.group.iteration = (1, 1)
buf471.sizes = ([], [])
class buf471_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_76', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf471', get_index_1, add, None)
        return store


buf472: SchedulerNode(ComputedBuffer)
buf472.writes = [MemoryDep(name='buf472', index=0, size=())]
buf472.unmet_dependencies = []
buf472.met_dependencies = [MemoryDep(name='primals_81', index=0, size=())]
buf472.group.device = cuda:0
buf472.group.iteration = (1, 1)
buf472.sizes = ([], [])
class buf472_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_81', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf472', get_index_1, add, None)
        return store


buf473: SchedulerNode(ComputedBuffer)
buf473.writes = [MemoryDep(name='buf473', index=0, size=())]
buf473.unmet_dependencies = []
buf473.met_dependencies = [MemoryDep(name='primals_86', index=0, size=())]
buf473.group.device = cuda:0
buf473.group.iteration = (1, 1)
buf473.sizes = ([], [])
class buf473_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_86', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf473', get_index_1, add, None)
        return store


buf474: SchedulerNode(ComputedBuffer)
buf474.writes = [MemoryDep(name='buf474', index=0, size=())]
buf474.unmet_dependencies = []
buf474.met_dependencies = [MemoryDep(name='primals_91', index=0, size=())]
buf474.group.device = cuda:0
buf474.group.iteration = (1, 1)
buf474.sizes = ([], [])
class buf474_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_91', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf474', get_index_1, add, None)
        return store


buf475: SchedulerNode(ComputedBuffer)
buf475.writes = [MemoryDep(name='buf475', index=0, size=())]
buf475.unmet_dependencies = []
buf475.met_dependencies = [MemoryDep(name='primals_96', index=0, size=())]
buf475.group.device = cuda:0
buf475.group.iteration = (1, 1)
buf475.sizes = ([], [])
class buf475_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_96', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf475', get_index_1, add, None)
        return store


buf476: SchedulerNode(ComputedBuffer)
buf476.writes = [MemoryDep(name='buf476', index=0, size=())]
buf476.unmet_dependencies = []
buf476.met_dependencies = [MemoryDep(name='primals_101', index=0, size=())]
buf476.group.device = cuda:0
buf476.group.iteration = (1, 1)
buf476.sizes = ([], [])
class buf476_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_101', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf476', get_index_1, add, None)
        return store


buf477: SchedulerNode(ComputedBuffer)
buf477.writes = [MemoryDep(name='buf477', index=0, size=())]
buf477.unmet_dependencies = []
buf477.met_dependencies = [MemoryDep(name='primals_106', index=0, size=())]
buf477.group.device = cuda:0
buf477.group.iteration = (1, 1)
buf477.sizes = ([], [])
class buf477_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_106', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf477', get_index_1, add, None)
        return store


buf478: SchedulerNode(ComputedBuffer)
buf478.writes = [MemoryDep(name='buf478', index=0, size=())]
buf478.unmet_dependencies = []
buf478.met_dependencies = [MemoryDep(name='primals_111', index=0, size=())]
buf478.group.device = cuda:0
buf478.group.iteration = (1, 1)
buf478.sizes = ([], [])
class buf478_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_111', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf478', get_index_1, add, None)
        return store


buf479: SchedulerNode(ComputedBuffer)
buf479.writes = [MemoryDep(name='buf479', index=0, size=())]
buf479.unmet_dependencies = []
buf479.met_dependencies = [MemoryDep(name='primals_116', index=0, size=())]
buf479.group.device = cuda:0
buf479.group.iteration = (1, 1)
buf479.sizes = ([], [])
class buf479_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_116', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf479', get_index_1, add, None)
        return store


buf480: SchedulerNode(ComputedBuffer)
buf480.writes = [MemoryDep(name='buf480', index=0, size=())]
buf480.unmet_dependencies = []
buf480.met_dependencies = [MemoryDep(name='primals_121', index=0, size=())]
buf480.group.device = cuda:0
buf480.group.iteration = (1, 1)
buf480.sizes = ([], [])
class buf480_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_121', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf480', get_index_1, add, None)
        return store


buf481: SchedulerNode(ComputedBuffer)
buf481.writes = [MemoryDep(name='buf481', index=0, size=())]
buf481.unmet_dependencies = []
buf481.met_dependencies = [MemoryDep(name='primals_126', index=0, size=())]
buf481.group.device = cuda:0
buf481.group.iteration = (1, 1)
buf481.sizes = ([], [])
class buf481_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_126', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf481', get_index_1, add, None)
        return store


buf482: SchedulerNode(ComputedBuffer)
buf482.writes = [MemoryDep(name='buf482', index=0, size=())]
buf482.unmet_dependencies = []
buf482.met_dependencies = [MemoryDep(name='primals_131', index=0, size=())]
buf482.group.device = cuda:0
buf482.group.iteration = (1, 1)
buf482.sizes = ([], [])
class buf482_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_131', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf482', get_index_1, add, None)
        return store


buf483: SchedulerNode(ComputedBuffer)
buf483.writes = [MemoryDep(name='buf483', index=0, size=())]
buf483.unmet_dependencies = []
buf483.met_dependencies = [MemoryDep(name='primals_136', index=0, size=())]
buf483.group.device = cuda:0
buf483.group.iteration = (1, 1)
buf483.sizes = ([], [])
class buf483_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_136', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf483', get_index_1, add, None)
        return store


buf484: SchedulerNode(ComputedBuffer)
buf484.writes = [MemoryDep(name='buf484', index=0, size=())]
buf484.unmet_dependencies = []
buf484.met_dependencies = [MemoryDep(name='primals_141', index=0, size=())]
buf484.group.device = cuda:0
buf484.group.iteration = (1, 1)
buf484.sizes = ([], [])
class buf484_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_141', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf484', get_index_1, add, None)
        return store


buf485: SchedulerNode(ComputedBuffer)
buf485.writes = [MemoryDep(name='buf485', index=0, size=())]
buf485.unmet_dependencies = []
buf485.met_dependencies = [MemoryDep(name='primals_146', index=0, size=())]
buf485.group.device = cuda:0
buf485.group.iteration = (1, 1)
buf485.sizes = ([], [])
class buf485_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_146', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf485', get_index_1, add, None)
        return store


buf486: SchedulerNode(ComputedBuffer)
buf486.writes = [MemoryDep(name='buf486', index=0, size=())]
buf486.unmet_dependencies = []
buf486.met_dependencies = [MemoryDep(name='primals_151', index=0, size=())]
buf486.group.device = cuda:0
buf486.group.iteration = (1, 1)
buf486.sizes = ([], [])
class buf486_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_151', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf486', get_index_1, add, None)
        return store


buf487: SchedulerNode(ComputedBuffer)
buf487.writes = [MemoryDep(name='buf487', index=0, size=())]
buf487.unmet_dependencies = []
buf487.met_dependencies = [MemoryDep(name='primals_156', index=0, size=())]
buf487.group.device = cuda:0
buf487.group.iteration = (1, 1)
buf487.sizes = ([], [])
class buf487_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf487', get_index_1, add, None)
        return store


buf488: SchedulerNode(ComputedBuffer)
buf488.writes = [MemoryDep(name='buf488', index=0, size=())]
buf488.unmet_dependencies = []
buf488.met_dependencies = [MemoryDep(name='primals_161', index=0, size=())]
buf488.group.device = cuda:0
buf488.group.iteration = (1, 1)
buf488.sizes = ([], [])
class buf488_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf488', get_index_1, add, None)
        return store


buf489: SchedulerNode(ComputedBuffer)
buf489.writes = [MemoryDep(name='buf489', index=0, size=())]
buf489.unmet_dependencies = []
buf489.met_dependencies = [MemoryDep(name='primals_166', index=0, size=())]
buf489.group.device = cuda:0
buf489.group.iteration = (1, 1)
buf489.sizes = ([], [])
class buf489_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_166', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf489', get_index_1, add, None)
        return store


buf490: SchedulerNode(ComputedBuffer)
buf490.writes = [MemoryDep(name='buf490', index=0, size=())]
buf490.unmet_dependencies = []
buf490.met_dependencies = [MemoryDep(name='primals_171', index=0, size=())]
buf490.group.device = cuda:0
buf490.group.iteration = (1, 1)
buf490.sizes = ([], [])
class buf490_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_171', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf490', get_index_1, add, None)
        return store


buf491: SchedulerNode(ComputedBuffer)
buf491.writes = [MemoryDep(name='buf491', index=0, size=())]
buf491.unmet_dependencies = []
buf491.met_dependencies = [MemoryDep(name='primals_176', index=0, size=())]
buf491.group.device = cuda:0
buf491.group.iteration = (1, 1)
buf491.sizes = ([], [])
class buf491_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_176', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf491', get_index_1, add, None)
        return store


buf492: SchedulerNode(ComputedBuffer)
buf492.writes = [MemoryDep(name='buf492', index=0, size=())]
buf492.unmet_dependencies = []
buf492.met_dependencies = [MemoryDep(name='primals_181', index=0, size=())]
buf492.group.device = cuda:0
buf492.group.iteration = (1, 1)
buf492.sizes = ([], [])
class buf492_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_181', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf492', get_index_1, add, None)
        return store


buf493: SchedulerNode(ComputedBuffer)
buf493.writes = [MemoryDep(name='buf493', index=0, size=())]
buf493.unmet_dependencies = []
buf493.met_dependencies = [MemoryDep(name='primals_186', index=0, size=())]
buf493.group.device = cuda:0
buf493.group.iteration = (1, 1)
buf493.sizes = ([], [])
class buf493_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_186', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf493', get_index_1, add, None)
        return store


buf494: SchedulerNode(ComputedBuffer)
buf494.writes = [MemoryDep(name='buf494', index=0, size=())]
buf494.unmet_dependencies = []
buf494.met_dependencies = [MemoryDep(name='primals_191', index=0, size=())]
buf494.group.device = cuda:0
buf494.group.iteration = (1, 1)
buf494.sizes = ([], [])
class buf494_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_191', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf494', get_index_1, add, None)
        return store


buf495: SchedulerNode(ComputedBuffer)
buf495.writes = [MemoryDep(name='buf495', index=0, size=())]
buf495.unmet_dependencies = []
buf495.met_dependencies = [MemoryDep(name='primals_196', index=0, size=())]
buf495.group.device = cuda:0
buf495.group.iteration = (1, 1)
buf495.sizes = ([], [])
class buf495_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_196', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf495', get_index_1, add, None)
        return store


buf496: SchedulerNode(ComputedBuffer)
buf496.writes = [MemoryDep(name='buf496', index=0, size=())]
buf496.unmet_dependencies = []
buf496.met_dependencies = [MemoryDep(name='primals_201', index=0, size=())]
buf496.group.device = cuda:0
buf496.group.iteration = (1, 1)
buf496.sizes = ([], [])
class buf496_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_201', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf496', get_index_1, add, None)
        return store


buf497: SchedulerNode(ComputedBuffer)
buf497.writes = [MemoryDep(name='buf497', index=0, size=())]
buf497.unmet_dependencies = []
buf497.met_dependencies = [MemoryDep(name='primals_206', index=0, size=())]
buf497.group.device = cuda:0
buf497.group.iteration = (1, 1)
buf497.sizes = ([], [])
class buf497_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_206', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf497', get_index_1, add, None)
        return store


buf498: SchedulerNode(ComputedBuffer)
buf498.writes = [MemoryDep(name='buf498', index=0, size=())]
buf498.unmet_dependencies = []
buf498.met_dependencies = [MemoryDep(name='primals_211', index=0, size=())]
buf498.group.device = cuda:0
buf498.group.iteration = (1, 1)
buf498.sizes = ([], [])
class buf498_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_211', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf498', get_index_1, add, None)
        return store


buf499: SchedulerNode(ComputedBuffer)
buf499.writes = [MemoryDep(name='buf499', index=0, size=())]
buf499.unmet_dependencies = []
buf499.met_dependencies = [MemoryDep(name='primals_216', index=0, size=())]
buf499.group.device = cuda:0
buf499.group.iteration = (1, 1)
buf499.sizes = ([], [])
class buf499_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_216', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf499', get_index_1, add, None)
        return store


buf500: SchedulerNode(ComputedBuffer)
buf500.writes = [MemoryDep(name='buf500', index=0, size=())]
buf500.unmet_dependencies = []
buf500.met_dependencies = [MemoryDep(name='primals_221', index=0, size=())]
buf500.group.device = cuda:0
buf500.group.iteration = (1, 1)
buf500.sizes = ([], [])
class buf500_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_221', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf500', get_index_1, add, None)
        return store


buf501: SchedulerNode(ComputedBuffer)
buf501.writes = [MemoryDep(name='buf501', index=0, size=())]
buf501.unmet_dependencies = []
buf501.met_dependencies = [MemoryDep(name='primals_226', index=0, size=())]
buf501.group.device = cuda:0
buf501.group.iteration = (1, 1)
buf501.sizes = ([], [])
class buf501_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_226', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf501', get_index_1, add, None)
        return store


buf502: SchedulerNode(ComputedBuffer)
buf502.writes = [MemoryDep(name='buf502', index=0, size=())]
buf502.unmet_dependencies = []
buf502.met_dependencies = [MemoryDep(name='primals_231', index=0, size=())]
buf502.group.device = cuda:0
buf502.group.iteration = (1, 1)
buf502.sizes = ([], [])
class buf502_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_231', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf502', get_index_1, add, None)
        return store


buf503: SchedulerNode(ComputedBuffer)
buf503.writes = [MemoryDep(name='buf503', index=0, size=())]
buf503.unmet_dependencies = []
buf503.met_dependencies = [MemoryDep(name='primals_236', index=0, size=())]
buf503.group.device = cuda:0
buf503.group.iteration = (1, 1)
buf503.sizes = ([], [])
class buf503_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_236', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf503', get_index_1, add, None)
        return store


buf504: SchedulerNode(ComputedBuffer)
buf504.writes = [MemoryDep(name='buf504', index=0, size=())]
buf504.unmet_dependencies = []
buf504.met_dependencies = [MemoryDep(name='primals_241', index=0, size=())]
buf504.group.device = cuda:0
buf504.group.iteration = (1, 1)
buf504.sizes = ([], [])
class buf504_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_241', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf504', get_index_1, add, None)
        return store


buf505: SchedulerNode(ComputedBuffer)
buf505.writes = [MemoryDep(name='buf505', index=0, size=())]
buf505.unmet_dependencies = []
buf505.met_dependencies = [MemoryDep(name='primals_246', index=0, size=())]
buf505.group.device = cuda:0
buf505.group.iteration = (1, 1)
buf505.sizes = ([], [])
class buf505_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_246', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf505', get_index_1, add, None)
        return store


buf506: SchedulerNode(ComputedBuffer)
buf506.writes = [MemoryDep(name='buf506', index=0, size=())]
buf506.unmet_dependencies = []
buf506.met_dependencies = [MemoryDep(name='primals_251', index=0, size=())]
buf506.group.device = cuda:0
buf506.group.iteration = (1, 1)
buf506.sizes = ([], [])
class buf506_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_251', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf506', get_index_1, add, None)
        return store


buf507: SchedulerNode(ComputedBuffer)
buf507.writes = [MemoryDep(name='buf507', index=0, size=())]
buf507.unmet_dependencies = []
buf507.met_dependencies = [MemoryDep(name='primals_256', index=0, size=())]
buf507.group.device = cuda:0
buf507.group.iteration = (1, 1)
buf507.sizes = ([], [])
class buf507_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_256', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf507', get_index_1, add, None)
        return store


buf508: SchedulerNode(ComputedBuffer)
buf508.writes = [MemoryDep(name='buf508', index=0, size=())]
buf508.unmet_dependencies = []
buf508.met_dependencies = [MemoryDep(name='primals_261', index=0, size=())]
buf508.group.device = cuda:0
buf508.group.iteration = (1, 1)
buf508.sizes = ([], [])
class buf508_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_261', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf508', get_index_1, add, None)
        return store


buf509: SchedulerNode(ComputedBuffer)
buf509.writes = [MemoryDep(name='buf509', index=0, size=())]
buf509.unmet_dependencies = []
buf509.met_dependencies = [MemoryDep(name='primals_266', index=0, size=())]
buf509.group.device = cuda:0
buf509.group.iteration = (1, 1)
buf509.sizes = ([], [])
class buf509_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_266', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf509', get_index_1, add, None)
        return store


buf510: SchedulerNode(ComputedBuffer)
buf510.writes = [MemoryDep(name='buf510', index=0, size=())]
buf510.unmet_dependencies = []
buf510.met_dependencies = [MemoryDep(name='primals_271', index=0, size=())]
buf510.group.device = cuda:0
buf510.group.iteration = (1, 1)
buf510.sizes = ([], [])
class buf510_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_271', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf510', get_index_1, add, None)
        return store


buf511: SchedulerNode(ComputedBuffer)
buf511.writes = [MemoryDep(name='buf511', index=0, size=())]
buf511.unmet_dependencies = []
buf511.met_dependencies = [MemoryDep(name='primals_276', index=0, size=())]
buf511.group.device = cuda:0
buf511.group.iteration = (1, 1)
buf511.sizes = ([], [])
class buf511_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_276', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf511', get_index_1, add, None)
        return store


buf512: SchedulerNode(ComputedBuffer)
buf512.writes = [MemoryDep(name='buf512', index=0, size=())]
buf512.unmet_dependencies = []
buf512.met_dependencies = [MemoryDep(name='primals_281', index=0, size=())]
buf512.group.device = cuda:0
buf512.group.iteration = (1, 1)
buf512.sizes = ([], [])
class buf512_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_281', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf512', get_index_1, add, None)
        return store


buf513: SchedulerNode(ComputedBuffer)
buf513.writes = [MemoryDep(name='buf513', index=0, size=())]
buf513.unmet_dependencies = []
buf513.met_dependencies = [MemoryDep(name='primals_286', index=0, size=())]
buf513.group.device = cuda:0
buf513.group.iteration = (1, 1)
buf513.sizes = ([], [])
class buf513_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_286', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf513', get_index_1, add, None)
        return store


buf514: SchedulerNode(ComputedBuffer)
buf514.writes = [MemoryDep(name='buf514', index=0, size=())]
buf514.unmet_dependencies = []
buf514.met_dependencies = [MemoryDep(name='primals_291', index=0, size=())]
buf514.group.device = cuda:0
buf514.group.iteration = (1, 1)
buf514.sizes = ([], [])
class buf514_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_291', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf514', get_index_1, add, None)
        return store


buf515: SchedulerNode(ComputedBuffer)
buf515.writes = [MemoryDep(name='buf515', index=0, size=())]
buf515.unmet_dependencies = []
buf515.met_dependencies = [MemoryDep(name='primals_296', index=0, size=())]
buf515.group.device = cuda:0
buf515.group.iteration = (1, 1)
buf515.sizes = ([], [])
class buf515_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_296', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf515', get_index_1, add, None)
        return store


buf516: SchedulerNode(ComputedBuffer)
buf516.writes = [MemoryDep(name='buf516', index=0, size=())]
buf516.unmet_dependencies = []
buf516.met_dependencies = [MemoryDep(name='primals_301', index=0, size=())]
buf516.group.device = cuda:0
buf516.group.iteration = (1, 1)
buf516.sizes = ([], [])
class buf516_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_301', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf516', get_index_1, add, None)
        return store


buf517: SchedulerNode(ComputedBuffer)
buf517.writes = [MemoryDep(name='buf517', index=0, size=())]
buf517.unmet_dependencies = []
buf517.met_dependencies = [MemoryDep(name='primals_306', index=0, size=())]
buf517.group.device = cuda:0
buf517.group.iteration = (1, 1)
buf517.sizes = ([], [])
class buf517_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_306', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf517', get_index_1, add, None)
        return store


buf518: SchedulerNode(ComputedBuffer)
buf518.writes = [MemoryDep(name='buf518', index=0, size=())]
buf518.unmet_dependencies = []
buf518.met_dependencies = [MemoryDep(name='primals_311', index=0, size=())]
buf518.group.device = cuda:0
buf518.group.iteration = (1, 1)
buf518.sizes = ([], [])
class buf518_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_311', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf518', get_index_1, add, None)
        return store


buf519: SchedulerNode(ComputedBuffer)
buf519.writes = [MemoryDep(name='buf519', index=0, size=())]
buf519.unmet_dependencies = []
buf519.met_dependencies = [MemoryDep(name='primals_316', index=0, size=())]
buf519.group.device = cuda:0
buf519.group.iteration = (1, 1)
buf519.sizes = ([], [])
class buf519_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_316', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf519', get_index_1, add, None)
        return store


buf520: SchedulerNode(ComputedBuffer)
buf520.writes = [MemoryDep(name='buf520', index=0, size=())]
buf520.unmet_dependencies = []
buf520.met_dependencies = [MemoryDep(name='primals_321', index=0, size=())]
buf520.group.device = cuda:0
buf520.group.iteration = (1, 1)
buf520.sizes = ([], [])
class buf520_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_321', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf520', get_index_1, add, None)
        return store


buf521: SchedulerNode(ComputedBuffer)
buf521.writes = [MemoryDep(name='buf521', index=0, size=())]
buf521.unmet_dependencies = []
buf521.met_dependencies = [MemoryDep(name='primals_326', index=0, size=())]
buf521.group.device = cuda:0
buf521.group.iteration = (1, 1)
buf521.sizes = ([], [])
class buf521_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_326', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf521', get_index_1, add, None)
        return store


buf522: SchedulerNode(ComputedBuffer)
buf522.writes = [MemoryDep(name='buf522', index=0, size=())]
buf522.unmet_dependencies = []
buf522.met_dependencies = [MemoryDep(name='primals_331', index=0, size=())]
buf522.group.device = cuda:0
buf522.group.iteration = (1, 1)
buf522.sizes = ([], [])
class buf522_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_331', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf522', get_index_1, add, None)
        return store


buf523: SchedulerNode(ComputedBuffer)
buf523.writes = [MemoryDep(name='buf523', index=0, size=())]
buf523.unmet_dependencies = []
buf523.met_dependencies = [MemoryDep(name='primals_336', index=0, size=())]
buf523.group.device = cuda:0
buf523.group.iteration = (1, 1)
buf523.sizes = ([], [])
class buf523_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_336', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf523', get_index_1, add, None)
        return store


buf524: SchedulerNode(ComputedBuffer)
buf524.writes = [MemoryDep(name='buf524', index=0, size=())]
buf524.unmet_dependencies = []
buf524.met_dependencies = [MemoryDep(name='primals_341', index=0, size=())]
buf524.group.device = cuda:0
buf524.group.iteration = (1, 1)
buf524.sizes = ([], [])
class buf524_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_341', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf524', get_index_1, add, None)
        return store


