buf0: SchedulerNode(ComputedBuffer)
buf0.writes = 
    [   MemoryDep(name='buf0', index=c0, size=(8, 1000)),
        MemoryDep(name='buf0', index=c0, size=(8,))]
buf0.unmet_dependencies = []
buf0.met_dependencies = [MemoryDep(name='primals_1', index=c0, size=(8000,))]
buf0.group.device = cuda:0
buf0.group.iteration = (8, 1000)
buf0.sizes = ([8], [1000])
class buf0_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf0', torch.float32, torch.float32, 'max', get_index_1, load)
        return reduction


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = 
    [   MemoryDep(name='buf1', index=c0, size=(8, 1000)),
        MemoryDep(name='buf1', index=c0, size=(8,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=c0, size=(8, 1000))]
buf1.met_dependencies = [MemoryDep(name='primals_1', index=c0, size=(8000,))]
buf1.group.device = cuda:0
buf1.group.iteration = (8, 1000)
buf1.sizes = ([8], [1000])
class buf1_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf1', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=c0, size=(8000,))]
buf2.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(8, 1000)),
        MemoryDep(name='buf1', index=c0, size=(8, 1000))]
buf2.met_dependencies = [MemoryDep(name='primals_1', index=c0, size=(8000,))]
buf2.group.device = cuda:0
buf2.group.iteration = (8000, 1)
buf2.sizes = ([8, 1000], [])
class buf2_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        log = ops.log(load_2)
        sub_1 = ops.sub(sub, log)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2', get_index_3, sub_1, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = 
    [   MemoryDep(name='buf3', index=0, size=()),
        MemoryDep(name='buf3', index=0, size=(8,))]
buf3.unmet_dependencies = [MemoryDep(name='buf2', index=(tmp0) + 1000*c0, size=(8,))]
buf3.met_dependencies = [MemoryDep(name='primals_2', index=c0, size=(8,))]
buf3.group.device = cuda:0
buf3.group.iteration = (1, 8)
buf3.sizes = ([], [8])
class buf3_loop_body:
    var_ranges = {z0: 8}
    index0 = z0
    index1 = indirect0 + 1000*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        neg = ops.neg(load_1)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf3', torch.float32, torch.float32, 'sum', get_index_2, neg)
        return reduction


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=0, size=())]
buf4.unmet_dependencies = [MemoryDep(name='buf3', index=0, size=())]
buf4.met_dependencies = []
buf4.group.device = cuda:0
buf4.group.iteration = (1, 1)
buf4.sizes = ([], [])
class buf4_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(10.0, torch.float32)
        div_1 = ops.div(div, constant_1)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, div_1, None)
        return store


