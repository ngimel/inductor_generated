[aot_autograd.py:1055 DEBUG] ====== Forward (only) graph 2 ======
[aot_autograd.py:1056 DEBUG] class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: f32[32, 3, 3, 3], arg1_1: f32[32], arg2_1: f32[32], arg3_1: f32[128, 32, 1, 1], arg4_1: f32[128], arg5_1: f32[128], arg6_1: f32[128, 32, 3, 3], arg7_1: f32[128], arg8_1: f32[128], arg9_1: f32[128, 128, 3, 3], arg10_1: f32[128], arg11_1: f32[128], arg12_1: f32[192, 128, 1, 1], arg13_1: f32[192], arg14_1: f32[192], arg15_1: f32[192, 128, 3, 3], arg16_1: f32[192], arg17_1: f32[192], arg18_1: f32[192, 192, 3, 3], arg19_1: f32[192], arg20_1: f32[192], arg21_1: f32[192, 192, 3, 3], arg22_1: f32[192], arg23_1: f32[192], arg24_1: f32[192, 192, 3, 3], arg25_1: f32[192], arg26_1: f32[192], arg27_1: f32[640, 192, 1, 1], arg28_1: f32[640], arg29_1: f32[640], arg30_1: f32[160, 192, 1, 1], arg31_1: f32[160], arg32_1: f32[160], arg33_1: f32[160, 160, 3, 3], arg34_1: f32[160], arg35_1: f32[160], arg36_1: f32[640, 160, 1, 1], arg37_1: f32[640], arg38_1: f32[640], arg39_1: f32[160, 640, 1, 1], arg40_1: f32[160], arg41_1: f32[160], arg42_1: f32[160, 160, 3, 3], arg43_1: f32[160], arg44_1: f32[160], arg45_1: f32[640, 160, 1, 1], arg46_1: f32[640], arg47_1: f32[640], arg48_1: f32[160, 640, 1, 1], arg49_1: f32[160], arg50_1: f32[160], arg51_1: f32[160, 160, 3, 3], arg52_1: f32[160], arg53_1: f32[160], arg54_1: f32[640, 160, 1, 1], arg55_1: f32[640], arg56_1: f32[640], arg57_1: f32[160, 640, 1, 1], arg58_1: f32[160], arg59_1: f32[160], arg60_1: f32[160, 160, 3, 3], arg61_1: f32[160], arg62_1: f32[160], arg63_1: f32[640, 160, 1, 1], arg64_1: f32[640], arg65_1: f32[640], arg66_1: f32[160, 640, 1, 1], arg67_1: f32[160], arg68_1: f32[160], arg69_1: f32[160, 160, 3, 3], arg70_1: f32[160], arg71_1: f32[160], arg72_1: f32[640, 160, 1, 1], arg73_1: f32[640], arg74_1: f32[640], arg75_1: f32[160, 640, 1, 1], arg76_1: f32[160], arg77_1: f32[160], arg78_1: f32[160, 160, 3, 3], arg79_1: f32[160], arg80_1: f32[160], arg81_1: f32[640, 160, 1, 1], arg82_1: f32[640], arg83_1: f32[640], arg84_1: f32[640, 640, 1, 1], arg85_1: f32[640], arg86_1: f32[640], arg87_1: f32[1920, 640, 1, 1], arg88_1: f32[1920], arg89_1: f32[1920], arg90_1: f32[1920, 1, 3, 3], arg91_1: f32[1920], arg92_1: f32[1920], arg93_1: f32[640, 1920, 1, 1], arg94_1: f32[640], arg95_1: f32[640], arg96_1: f32[1920, 640, 1, 1], arg97_1: f32[1920], arg98_1: f32[1920], arg99_1: f32[1920, 1, 3, 3], arg100_1: f32[1920], arg101_1: f32[1920], arg102_1: f32[640, 1920, 1, 1], arg103_1: f32[640], arg104_1: f32[640], arg105_1: f32[1920, 640, 1, 1], arg106_1: f32[1920], arg107_1: f32[1920], arg108_1: f32[1920, 1, 3, 3], arg109_1: f32[1920], arg110_1: f32[1920], arg111_1: f32[640, 1920, 1, 1], arg112_1: f32[640], arg113_1: f32[640], arg114_1: f32[1920, 640, 1, 1], arg115_1: f32[1920], arg116_1: f32[1920], arg117_1: f32[1920, 1, 3, 3], arg118_1: f32[1920], arg119_1: f32[1920], arg120_1: f32[640, 1920, 1, 1], arg121_1: f32[640], arg122_1: f32[640], arg123_1: f32[1920, 640, 1, 1], arg124_1: f32[1920], arg125_1: f32[1920], arg126_1: f32[1920, 1, 3, 3], arg127_1: f32[1920], arg128_1: f32[1920], arg129_1: f32[640, 1920, 1, 1], arg130_1: f32[640], arg131_1: f32[640], arg132_1: f32[1920, 640, 1, 1], arg133_1: f32[1920], arg134_1: f32[1920], arg135_1: f32[1920, 1, 3, 3], arg136_1: f32[1920], arg137_1: f32[1920], arg138_1: f32[640, 1920, 1, 1], arg139_1: f32[640], arg140_1: f32[640], arg141_1: f32[1920, 640, 1, 1], arg142_1: f32[1920], arg143_1: f32[1920], arg144_1: f32[1920, 1, 3, 3], arg145_1: f32[1920], arg146_1: f32[1920], arg147_1: f32[640, 1920, 1, 1], arg148_1: f32[640], arg149_1: f32[640], arg150_1: f32[1920, 640, 1, 1], arg151_1: f32[1920], arg152_1: f32[1920], arg153_1: f32[1920, 1, 3, 3], arg154_1: f32[1920], arg155_1: f32[1920], arg156_1: f32[640, 1920, 1, 1], arg157_1: f32[640], arg158_1: f32[640], arg159_1: f32[1920, 640, 1, 1], arg160_1: f32[1920], arg161_1: f32[1920], arg162_1: f32[1920, 1, 3, 3], arg163_1: f32[1920], arg164_1: f32[1920], arg165_1: f32[640, 1920, 1, 1], arg166_1: f32[640], arg167_1: f32[640], arg168_1: f32[2560, 640, 1, 1], arg169_1: f32[2560], arg170_1: f32[2560], arg171_1: f32[1000, 2560], arg172_1: f32[1000], arg173_1: f32[32, 3, 3, 3], arg174_1: f32[32], arg175_1: f32[32], arg176_1: f32[128, 32, 1, 1], arg177_1: f32[128], arg178_1: f32[128], arg179_1: f32[128, 32, 3, 3], arg180_1: f32[128], arg181_1: f32[128], arg182_1: f32[128, 128, 3, 3], arg183_1: f32[128], arg184_1: f32[128], arg185_1: f32[192, 128, 1, 1], arg186_1: f32[192], arg187_1: f32[192], arg188_1: f32[192, 128, 3, 3], arg189_1: f32[192], arg190_1: f32[192], arg191_1: f32[192, 192, 3, 3], arg192_1: f32[192], arg193_1: f32[192], arg194_1: f32[192, 192, 3, 3], arg195_1: f32[192], arg196_1: f32[192], arg197_1: f32[192, 192, 3, 3], arg198_1: f32[192], arg199_1: f32[192], arg200_1: f32[640, 192, 1, 1], arg201_1: f32[640], arg202_1: f32[640], arg203_1: f32[160, 192, 1, 1], arg204_1: f32[160], arg205_1: f32[160], arg206_1: f32[160, 160, 3, 3], arg207_1: f32[160], arg208_1: f32[160], arg209_1: f32[640, 160, 1, 1], arg210_1: f32[640], arg211_1: f32[640], arg212_1: f32[160, 640, 1, 1], arg213_1: f32[160], arg214_1: f32[160], arg215_1: f32[160, 160, 3, 3], arg216_1: f32[160], arg217_1: f32[160], arg218_1: f32[640, 160, 1, 1], arg219_1: f32[640], arg220_1: f32[640], arg221_1: f32[160, 640, 1, 1], arg222_1: f32[160], arg223_1: f32[160], arg224_1: f32[160, 160, 3, 3], arg225_1: f32[160], arg226_1: f32[160], arg227_1: f32[640, 160, 1, 1], arg228_1: f32[640], arg229_1: f32[640], arg230_1: f32[160, 640, 1, 1], arg231_1: f32[160], arg232_1: f32[160], arg233_1: f32[160, 160, 3, 3], arg234_1: f32[160], arg235_1: f32[160], arg236_1: f32[640, 160, 1, 1], arg237_1: f32[640], arg238_1: f32[640], arg239_1: f32[160, 640, 1, 1], arg240_1: f32[160], arg241_1: f32[160], arg242_1: f32[160, 160, 3, 3], arg243_1: f32[160], arg244_1: f32[160], arg245_1: f32[640, 160, 1, 1], arg246_1: f32[640], arg247_1: f32[640], arg248_1: f32[160, 640, 1, 1], arg249_1: f32[160], arg250_1: f32[160], arg251_1: f32[160, 160, 3, 3], arg252_1: f32[160], arg253_1: f32[160], arg254_1: f32[640, 160, 1, 1], arg255_1: f32[640], arg256_1: f32[640], arg257_1: f32[640, 640, 1, 1], arg258_1: f32[640], arg259_1: f32[640], arg260_1: f32[1920, 640, 1, 1], arg261_1: f32[1920], arg262_1: f32[1920], arg263_1: f32[1920, 1, 3, 3], arg264_1: f32[1920], arg265_1: f32[1920], arg266_1: f32[640, 1920, 1, 1], arg267_1: f32[640], arg268_1: f32[640], arg269_1: f32[1920, 640, 1, 1], arg270_1: f32[1920], arg271_1: f32[1920], arg272_1: f32[1920, 1, 3, 3], arg273_1: f32[1920], arg274_1: f32[1920], arg275_1: f32[640, 1920, 1, 1], arg276_1: f32[640], arg277_1: f32[640], arg278_1: f32[1920, 640, 1, 1], arg279_1: f32[1920], arg280_1: f32[1920], arg281_1: f32[1920, 1, 3, 3], arg282_1: f32[1920], arg283_1: f32[1920], arg284_1: f32[640, 1920, 1, 1], arg285_1: f32[640], arg286_1: f32[640], arg287_1: f32[1920, 640, 1, 1], arg288_1: f32[1920], arg289_1: f32[1920], arg290_1: f32[1920, 1, 3, 3], arg291_1: f32[1920], arg292_1: f32[1920], arg293_1: f32[640, 1920, 1, 1], arg294_1: f32[640], arg295_1: f32[640], arg296_1: f32[1920, 640, 1, 1], arg297_1: f32[1920], arg298_1: f32[1920], arg299_1: f32[1920, 1, 3, 3], arg300_1: f32[1920], arg301_1: f32[1920], arg302_1: f32[640, 1920, 1, 1], arg303_1: f32[640], arg304_1: f32[640], arg305_1: f32[1920, 640, 1, 1], arg306_1: f32[1920], arg307_1: f32[1920], arg308_1: f32[1920, 1, 3, 3], arg309_1: f32[1920], arg310_1: f32[1920], arg311_1: f32[640, 1920, 1, 1], arg312_1: f32[640], arg313_1: f32[640], arg314_1: f32[1920, 640, 1, 1], arg315_1: f32[1920], arg316_1: f32[1920], arg317_1: f32[1920, 1, 3, 3], arg318_1: f32[1920], arg319_1: f32[1920], arg320_1: f32[640, 1920, 1, 1], arg321_1: f32[640], arg322_1: f32[640], arg323_1: f32[1920, 640, 1, 1], arg324_1: f32[1920], arg325_1: f32[1920], arg326_1: f32[1920, 1, 3, 3], arg327_1: f32[1920], arg328_1: f32[1920], arg329_1: f32[640, 1920, 1, 1], arg330_1: f32[640], arg331_1: f32[640], arg332_1: f32[1920, 640, 1, 1], arg333_1: f32[1920], arg334_1: f32[1920], arg335_1: f32[1920, 1, 3, 3], arg336_1: f32[1920], arg337_1: f32[1920], arg338_1: f32[640, 1920, 1, 1], arg339_1: f32[640], arg340_1: f32[640], arg341_1: f32[2560, 640, 1, 1], arg342_1: f32[2560], arg343_1: f32[2560], arg344_1: f32[1000, 2560], arg345_1: f32[1000]):
        # File: /scratch/ngimel/work/pytorch/torch/optim/sgd.py:266, code: param.add_(d_p, alpha=-lr)
        mul: f32[32, 3, 3, 3] = torch.ops.aten.mul.Tensor(arg173_1, -0.01);  arg173_1 = None
        add_: f32[32, 3, 3, 3] = torch.ops.aten.add_.Tensor(arg0_1, mul);  arg0_1 = mul = None
        mul_1: f32[32] = torch.ops.aten.mul.Tensor(arg174_1, -0.01);  arg174_1 = None
        add__1: f32[32] = torch.ops.aten.add_.Tensor(arg1_1, mul_1);  arg1_1 = mul_1 = None
        mul_2: f32[32] = torch.ops.aten.mul.Tensor(arg175_1, -0.01);  arg175_1 = None
        add__2: f32[32] = torch.ops.aten.add_.Tensor(arg2_1, mul_2);  arg2_1 = mul_2 = None
        mul_3: f32[128, 32, 1, 1] = torch.ops.aten.mul.Tensor(arg176_1, -0.01);  arg176_1 = None
        add__3: f32[128, 32, 1, 1] = torch.ops.aten.add_.Tensor(arg3_1, mul_3);  arg3_1 = mul_3 = None
        mul_4: f32[128] = torch.ops.aten.mul.Tensor(arg177_1, -0.01);  arg177_1 = None
        add__4: f32[128] = torch.ops.aten.add_.Tensor(arg4_1, mul_4);  arg4_1 = mul_4 = None
        mul_5: f32[128] = torch.ops.aten.mul.Tensor(arg178_1, -0.01);  arg178_1 = None
        add__5: f32[128] = torch.ops.aten.add_.Tensor(arg5_1, mul_5);  arg5_1 = mul_5 = None
        mul_6: f32[128, 32, 3, 3] = torch.ops.aten.mul.Tensor(arg179_1, -0.01);  arg179_1 = None
        add__6: f32[128, 32, 3, 3] = torch.ops.aten.add_.Tensor(arg6_1, mul_6);  arg6_1 = mul_6 = None
        mul_7: f32[128] = torch.ops.aten.mul.Tensor(arg180_1, -0.01);  arg180_1 = None
        add__7: f32[128] = torch.ops.aten.add_.Tensor(arg7_1, mul_7);  arg7_1 = mul_7 = None
        mul_8: f32[128] = torch.ops.aten.mul.Tensor(arg181_1, -0.01);  arg181_1 = None
        add__8: f32[128] = torch.ops.aten.add_.Tensor(arg8_1, mul_8);  arg8_1 = mul_8 = None
        mul_9: f32[128, 128, 3, 3] = torch.ops.aten.mul.Tensor(arg182_1, -0.01);  arg182_1 = None
        add__9: f32[128, 128, 3, 3] = torch.ops.aten.add_.Tensor(arg9_1, mul_9);  arg9_1 = mul_9 = None
        mul_10: f32[128] = torch.ops.aten.mul.Tensor(arg183_1, -0.01);  arg183_1 = None
        add__10: f32[128] = torch.ops.aten.add_.Tensor(arg10_1, mul_10);  arg10_1 = mul_10 = None
        mul_11: f32[128] = torch.ops.aten.mul.Tensor(arg184_1, -0.01);  arg184_1 = None
        add__11: f32[128] = torch.ops.aten.add_.Tensor(arg11_1, mul_11);  arg11_1 = mul_11 = None
        mul_12: f32[192, 128, 1, 1] = torch.ops.aten.mul.Tensor(arg185_1, -0.01);  arg185_1 = None
        add__12: f32[192, 128, 1, 1] = torch.ops.aten.add_.Tensor(arg12_1, mul_12);  arg12_1 = mul_12 = None
        mul_13: f32[192] = torch.ops.aten.mul.Tensor(arg186_1, -0.01);  arg186_1 = None
        add__13: f32[192] = torch.ops.aten.add_.Tensor(arg13_1, mul_13);  arg13_1 = mul_13 = None
        mul_14: f32[192] = torch.ops.aten.mul.Tensor(arg187_1, -0.01);  arg187_1 = None
        add__14: f32[192] = torch.ops.aten.add_.Tensor(arg14_1, mul_14);  arg14_1 = mul_14 = None
        mul_15: f32[192, 128, 3, 3] = torch.ops.aten.mul.Tensor(arg188_1, -0.01);  arg188_1 = None
        add__15: f32[192, 128, 3, 3] = torch.ops.aten.add_.Tensor(arg15_1, mul_15);  arg15_1 = mul_15 = None
        mul_16: f32[192] = torch.ops.aten.mul.Tensor(arg189_1, -0.01);  arg189_1 = None
        add__16: f32[192] = torch.ops.aten.add_.Tensor(arg16_1, mul_16);  arg16_1 = mul_16 = None
        mul_17: f32[192] = torch.ops.aten.mul.Tensor(arg190_1, -0.01);  arg190_1 = None
        add__17: f32[192] = torch.ops.aten.add_.Tensor(arg17_1, mul_17);  arg17_1 = mul_17 = None
        mul_18: f32[192, 192, 3, 3] = torch.ops.aten.mul.Tensor(arg191_1, -0.01);  arg191_1 = None
        add__18: f32[192, 192, 3, 3] = torch.ops.aten.add_.Tensor(arg18_1, mul_18);  arg18_1 = mul_18 = None
        mul_19: f32[192] = torch.ops.aten.mul.Tensor(arg192_1, -0.01);  arg192_1 = None
        add__19: f32[192] = torch.ops.aten.add_.Tensor(arg19_1, mul_19);  arg19_1 = mul_19 = None
        mul_20: f32[192] = torch.ops.aten.mul.Tensor(arg193_1, -0.01);  arg193_1 = None
        add__20: f32[192] = torch.ops.aten.add_.Tensor(arg20_1, mul_20);  arg20_1 = mul_20 = None
        mul_21: f32[192, 192, 3, 3] = torch.ops.aten.mul.Tensor(arg194_1, -0.01);  arg194_1 = None
        add__21: f32[192, 192, 3, 3] = torch.ops.aten.add_.Tensor(arg21_1, mul_21);  arg21_1 = mul_21 = None
        mul_22: f32[192] = torch.ops.aten.mul.Tensor(arg195_1, -0.01);  arg195_1 = None
        add__22: f32[192] = torch.ops.aten.add_.Tensor(arg22_1, mul_22);  arg22_1 = mul_22 = None
        mul_23: f32[192] = torch.ops.aten.mul.Tensor(arg196_1, -0.01);  arg196_1 = None
        add__23: f32[192] = torch.ops.aten.add_.Tensor(arg23_1, mul_23);  arg23_1 = mul_23 = None
        mul_24: f32[192, 192, 3, 3] = torch.ops.aten.mul.Tensor(arg197_1, -0.01);  arg197_1 = None
        add__24: f32[192, 192, 3, 3] = torch.ops.aten.add_.Tensor(arg24_1, mul_24);  arg24_1 = mul_24 = None
        mul_25: f32[192] = torch.ops.aten.mul.Tensor(arg198_1, -0.01);  arg198_1 = None
        add__25: f32[192] = torch.ops.aten.add_.Tensor(arg25_1, mul_25);  arg25_1 = mul_25 = None
        mul_26: f32[192] = torch.ops.aten.mul.Tensor(arg199_1, -0.01);  arg199_1 = None
        add__26: f32[192] = torch.ops.aten.add_.Tensor(arg26_1, mul_26);  arg26_1 = mul_26 = None
        mul_27: f32[640, 192, 1, 1] = torch.ops.aten.mul.Tensor(arg200_1, -0.01);  arg200_1 = None
        add__27: f32[640, 192, 1, 1] = torch.ops.aten.add_.Tensor(arg27_1, mul_27);  arg27_1 = mul_27 = None
        mul_28: f32[640] = torch.ops.aten.mul.Tensor(arg201_1, -0.01);  arg201_1 = None
        add__28: f32[640] = torch.ops.aten.add_.Tensor(arg28_1, mul_28);  arg28_1 = mul_28 = None
        mul_29: f32[640] = torch.ops.aten.mul.Tensor(arg202_1, -0.01);  arg202_1 = None
        add__29: f32[640] = torch.ops.aten.add_.Tensor(arg29_1, mul_29);  arg29_1 = mul_29 = None
        mul_30: f32[160, 192, 1, 1] = torch.ops.aten.mul.Tensor(arg203_1, -0.01);  arg203_1 = None
        add__30: f32[160, 192, 1, 1] = torch.ops.aten.add_.Tensor(arg30_1, mul_30);  arg30_1 = mul_30 = None
        mul_31: f32[160] = torch.ops.aten.mul.Tensor(arg204_1, -0.01);  arg204_1 = None
        add__31: f32[160] = torch.ops.aten.add_.Tensor(arg31_1, mul_31);  arg31_1 = mul_31 = None
        mul_32: f32[160] = torch.ops.aten.mul.Tensor(arg205_1, -0.01);  arg205_1 = None
        add__32: f32[160] = torch.ops.aten.add_.Tensor(arg32_1, mul_32);  arg32_1 = mul_32 = None
        mul_33: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg206_1, -0.01);  arg206_1 = None
        add__33: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg33_1, mul_33);  arg33_1 = mul_33 = None
        mul_34: f32[160] = torch.ops.aten.mul.Tensor(arg207_1, -0.01);  arg207_1 = None
        add__34: f32[160] = torch.ops.aten.add_.Tensor(arg34_1, mul_34);  arg34_1 = mul_34 = None
        mul_35: f32[160] = torch.ops.aten.mul.Tensor(arg208_1, -0.01);  arg208_1 = None
        add__35: f32[160] = torch.ops.aten.add_.Tensor(arg35_1, mul_35);  arg35_1 = mul_35 = None
        mul_36: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg209_1, -0.01);  arg209_1 = None
        add__36: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg36_1, mul_36);  arg36_1 = mul_36 = None
        mul_37: f32[640] = torch.ops.aten.mul.Tensor(arg210_1, -0.01);  arg210_1 = None
        add__37: f32[640] = torch.ops.aten.add_.Tensor(arg37_1, mul_37);  arg37_1 = mul_37 = None
        mul_38: f32[640] = torch.ops.aten.mul.Tensor(arg211_1, -0.01);  arg211_1 = None
        add__38: f32[640] = torch.ops.aten.add_.Tensor(arg38_1, mul_38);  arg38_1 = mul_38 = None
        mul_39: f32[160, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg212_1, -0.01);  arg212_1 = None
        add__39: f32[160, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg39_1, mul_39);  arg39_1 = mul_39 = None
        mul_40: f32[160] = torch.ops.aten.mul.Tensor(arg213_1, -0.01);  arg213_1 = None
        add__40: f32[160] = torch.ops.aten.add_.Tensor(arg40_1, mul_40);  arg40_1 = mul_40 = None
        mul_41: f32[160] = torch.ops.aten.mul.Tensor(arg214_1, -0.01);  arg214_1 = None
        add__41: f32[160] = torch.ops.aten.add_.Tensor(arg41_1, mul_41);  arg41_1 = mul_41 = None
        mul_42: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg215_1, -0.01);  arg215_1 = None
        add__42: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg42_1, mul_42);  arg42_1 = mul_42 = None
        mul_43: f32[160] = torch.ops.aten.mul.Tensor(arg216_1, -0.01);  arg216_1 = None
        add__43: f32[160] = torch.ops.aten.add_.Tensor(arg43_1, mul_43);  arg43_1 = mul_43 = None
        mul_44: f32[160] = torch.ops.aten.mul.Tensor(arg217_1, -0.01);  arg217_1 = None
        add__44: f32[160] = torch.ops.aten.add_.Tensor(arg44_1, mul_44);  arg44_1 = mul_44 = None
        mul_45: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg218_1, -0.01);  arg218_1 = None
        add__45: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg45_1, mul_45);  arg45_1 = mul_45 = None
        mul_46: f32[640] = torch.ops.aten.mul.Tensor(arg219_1, -0.01);  arg219_1 = None
        add__46: f32[640] = torch.ops.aten.add_.Tensor(arg46_1, mul_46);  arg46_1 = mul_46 = None
        mul_47: f32[640] = torch.ops.aten.mul.Tensor(arg220_1, -0.01);  arg220_1 = None
        add__47: f32[640] = torch.ops.aten.add_.Tensor(arg47_1, mul_47);  arg47_1 = mul_47 = None
        mul_48: f32[160, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg221_1, -0.01);  arg221_1 = None
        add__48: f32[160, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg48_1, mul_48);  arg48_1 = mul_48 = None
        mul_49: f32[160] = torch.ops.aten.mul.Tensor(arg222_1, -0.01);  arg222_1 = None
        add__49: f32[160] = torch.ops.aten.add_.Tensor(arg49_1, mul_49);  arg49_1 = mul_49 = None
        mul_50: f32[160] = torch.ops.aten.mul.Tensor(arg223_1, -0.01);  arg223_1 = None
        add__50: f32[160] = torch.ops.aten.add_.Tensor(arg50_1, mul_50);  arg50_1 = mul_50 = None
        mul_51: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg224_1, -0.01);  arg224_1 = None
        add__51: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg51_1, mul_51);  arg51_1 = mul_51 = None
        mul_52: f32[160] = torch.ops.aten.mul.Tensor(arg225_1, -0.01);  arg225_1 = None
        add__52: f32[160] = torch.ops.aten.add_.Tensor(arg52_1, mul_52);  arg52_1 = mul_52 = None
        mul_53: f32[160] = torch.ops.aten.mul.Tensor(arg226_1, -0.01);  arg226_1 = None
        add__53: f32[160] = torch.ops.aten.add_.Tensor(arg53_1, mul_53);  arg53_1 = mul_53 = None
        mul_54: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg227_1, -0.01);  arg227_1 = None
        add__54: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg54_1, mul_54);  arg54_1 = mul_54 = None
        mul_55: f32[640] = torch.ops.aten.mul.Tensor(arg228_1, -0.01);  arg228_1 = None
        add__55: f32[640] = torch.ops.aten.add_.Tensor(arg55_1, mul_55);  arg55_1 = mul_55 = None
        mul_56: f32[640] = torch.ops.aten.mul.Tensor(arg229_1, -0.01);  arg229_1 = None
        add__56: f32[640] = torch.ops.aten.add_.Tensor(arg56_1, mul_56);  arg56_1 = mul_56 = None
        mul_57: f32[160, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg230_1, -0.01);  arg230_1 = None
        add__57: f32[160, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg57_1, mul_57);  arg57_1 = mul_57 = None
        mul_58: f32[160] = torch.ops.aten.mul.Tensor(arg231_1, -0.01);  arg231_1 = None
        add__58: f32[160] = torch.ops.aten.add_.Tensor(arg58_1, mul_58);  arg58_1 = mul_58 = None
        mul_59: f32[160] = torch.ops.aten.mul.Tensor(arg232_1, -0.01);  arg232_1 = None
        add__59: f32[160] = torch.ops.aten.add_.Tensor(arg59_1, mul_59);  arg59_1 = mul_59 = None
        mul_60: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg233_1, -0.01);  arg233_1 = None
        add__60: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg60_1, mul_60);  arg60_1 = mul_60 = None
        mul_61: f32[160] = torch.ops.aten.mul.Tensor(arg234_1, -0.01);  arg234_1 = None
        add__61: f32[160] = torch.ops.aten.add_.Tensor(arg61_1, mul_61);  arg61_1 = mul_61 = None
        mul_62: f32[160] = torch.ops.aten.mul.Tensor(arg235_1, -0.01);  arg235_1 = None
        add__62: f32[160] = torch.ops.aten.add_.Tensor(arg62_1, mul_62);  arg62_1 = mul_62 = None
        mul_63: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg236_1, -0.01);  arg236_1 = None
        add__63: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg63_1, mul_63);  arg63_1 = mul_63 = None
        mul_64: f32[640] = torch.ops.aten.mul.Tensor(arg237_1, -0.01);  arg237_1 = None
        add__64: f32[640] = torch.ops.aten.add_.Tensor(arg64_1, mul_64);  arg64_1 = mul_64 = None
        mul_65: f32[640] = torch.ops.aten.mul.Tensor(arg238_1, -0.01);  arg238_1 = None
        add__65: f32[640] = torch.ops.aten.add_.Tensor(arg65_1, mul_65);  arg65_1 = mul_65 = None
        mul_66: f32[160, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg239_1, -0.01);  arg239_1 = None
        add__66: f32[160, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg66_1, mul_66);  arg66_1 = mul_66 = None
        mul_67: f32[160] = torch.ops.aten.mul.Tensor(arg240_1, -0.01);  arg240_1 = None
        add__67: f32[160] = torch.ops.aten.add_.Tensor(arg67_1, mul_67);  arg67_1 = mul_67 = None
        mul_68: f32[160] = torch.ops.aten.mul.Tensor(arg241_1, -0.01);  arg241_1 = None
        add__68: f32[160] = torch.ops.aten.add_.Tensor(arg68_1, mul_68);  arg68_1 = mul_68 = None
        mul_69: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg242_1, -0.01);  arg242_1 = None
        add__69: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg69_1, mul_69);  arg69_1 = mul_69 = None
        mul_70: f32[160] = torch.ops.aten.mul.Tensor(arg243_1, -0.01);  arg243_1 = None
        add__70: f32[160] = torch.ops.aten.add_.Tensor(arg70_1, mul_70);  arg70_1 = mul_70 = None
        mul_71: f32[160] = torch.ops.aten.mul.Tensor(arg244_1, -0.01);  arg244_1 = None
        add__71: f32[160] = torch.ops.aten.add_.Tensor(arg71_1, mul_71);  arg71_1 = mul_71 = None
        mul_72: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg245_1, -0.01);  arg245_1 = None
        add__72: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg72_1, mul_72);  arg72_1 = mul_72 = None
        mul_73: f32[640] = torch.ops.aten.mul.Tensor(arg246_1, -0.01);  arg246_1 = None
        add__73: f32[640] = torch.ops.aten.add_.Tensor(arg73_1, mul_73);  arg73_1 = mul_73 = None
        mul_74: f32[640] = torch.ops.aten.mul.Tensor(arg247_1, -0.01);  arg247_1 = None
        add__74: f32[640] = torch.ops.aten.add_.Tensor(arg74_1, mul_74);  arg74_1 = mul_74 = None
        mul_75: f32[160, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg248_1, -0.01);  arg248_1 = None
        add__75: f32[160, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg75_1, mul_75);  arg75_1 = mul_75 = None
        mul_76: f32[160] = torch.ops.aten.mul.Tensor(arg249_1, -0.01);  arg249_1 = None
        add__76: f32[160] = torch.ops.aten.add_.Tensor(arg76_1, mul_76);  arg76_1 = mul_76 = None
        mul_77: f32[160] = torch.ops.aten.mul.Tensor(arg250_1, -0.01);  arg250_1 = None
        add__77: f32[160] = torch.ops.aten.add_.Tensor(arg77_1, mul_77);  arg77_1 = mul_77 = None
        mul_78: f32[160, 160, 3, 3] = torch.ops.aten.mul.Tensor(arg251_1, -0.01);  arg251_1 = None
        add__78: f32[160, 160, 3, 3] = torch.ops.aten.add_.Tensor(arg78_1, mul_78);  arg78_1 = mul_78 = None
        mul_79: f32[160] = torch.ops.aten.mul.Tensor(arg252_1, -0.01);  arg252_1 = None
        add__79: f32[160] = torch.ops.aten.add_.Tensor(arg79_1, mul_79);  arg79_1 = mul_79 = None
        mul_80: f32[160] = torch.ops.aten.mul.Tensor(arg253_1, -0.01);  arg253_1 = None
        add__80: f32[160] = torch.ops.aten.add_.Tensor(arg80_1, mul_80);  arg80_1 = mul_80 = None
        mul_81: f32[640, 160, 1, 1] = torch.ops.aten.mul.Tensor(arg254_1, -0.01);  arg254_1 = None
        add__81: f32[640, 160, 1, 1] = torch.ops.aten.add_.Tensor(arg81_1, mul_81);  arg81_1 = mul_81 = None
        mul_82: f32[640] = torch.ops.aten.mul.Tensor(arg255_1, -0.01);  arg255_1 = None
        add__82: f32[640] = torch.ops.aten.add_.Tensor(arg82_1, mul_82);  arg82_1 = mul_82 = None
        mul_83: f32[640] = torch.ops.aten.mul.Tensor(arg256_1, -0.01);  arg256_1 = None
        add__83: f32[640] = torch.ops.aten.add_.Tensor(arg83_1, mul_83);  arg83_1 = mul_83 = None
        mul_84: f32[640, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg257_1, -0.01);  arg257_1 = None
        add__84: f32[640, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg84_1, mul_84);  arg84_1 = mul_84 = None
        mul_85: f32[640] = torch.ops.aten.mul.Tensor(arg258_1, -0.01);  arg258_1 = None
        add__85: f32[640] = torch.ops.aten.add_.Tensor(arg85_1, mul_85);  arg85_1 = mul_85 = None
        mul_86: f32[640] = torch.ops.aten.mul.Tensor(arg259_1, -0.01);  arg259_1 = None
        add__86: f32[640] = torch.ops.aten.add_.Tensor(arg86_1, mul_86);  arg86_1 = mul_86 = None
        mul_87: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg260_1, -0.01);  arg260_1 = None
        add__87: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg87_1, mul_87);  arg87_1 = mul_87 = None
        mul_88: f32[1920] = torch.ops.aten.mul.Tensor(arg261_1, -0.01);  arg261_1 = None
        add__88: f32[1920] = torch.ops.aten.add_.Tensor(arg88_1, mul_88);  arg88_1 = mul_88 = None
        mul_89: f32[1920] = torch.ops.aten.mul.Tensor(arg262_1, -0.01);  arg262_1 = None
        add__89: f32[1920] = torch.ops.aten.add_.Tensor(arg89_1, mul_89);  arg89_1 = mul_89 = None
        mul_90: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg263_1, -0.01);  arg263_1 = None
        add__90: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg90_1, mul_90);  arg90_1 = mul_90 = None
        mul_91: f32[1920] = torch.ops.aten.mul.Tensor(arg264_1, -0.01);  arg264_1 = None
        add__91: f32[1920] = torch.ops.aten.add_.Tensor(arg91_1, mul_91);  arg91_1 = mul_91 = None
        mul_92: f32[1920] = torch.ops.aten.mul.Tensor(arg265_1, -0.01);  arg265_1 = None
        add__92: f32[1920] = torch.ops.aten.add_.Tensor(arg92_1, mul_92);  arg92_1 = mul_92 = None
        mul_93: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg266_1, -0.01);  arg266_1 = None
        add__93: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg93_1, mul_93);  arg93_1 = mul_93 = None
        mul_94: f32[640] = torch.ops.aten.mul.Tensor(arg267_1, -0.01);  arg267_1 = None
        add__94: f32[640] = torch.ops.aten.add_.Tensor(arg94_1, mul_94);  arg94_1 = mul_94 = None
        mul_95: f32[640] = torch.ops.aten.mul.Tensor(arg268_1, -0.01);  arg268_1 = None
        add__95: f32[640] = torch.ops.aten.add_.Tensor(arg95_1, mul_95);  arg95_1 = mul_95 = None
        mul_96: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg269_1, -0.01);  arg269_1 = None
        add__96: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg96_1, mul_96);  arg96_1 = mul_96 = None
        mul_97: f32[1920] = torch.ops.aten.mul.Tensor(arg270_1, -0.01);  arg270_1 = None
        add__97: f32[1920] = torch.ops.aten.add_.Tensor(arg97_1, mul_97);  arg97_1 = mul_97 = None
        mul_98: f32[1920] = torch.ops.aten.mul.Tensor(arg271_1, -0.01);  arg271_1 = None
        add__98: f32[1920] = torch.ops.aten.add_.Tensor(arg98_1, mul_98);  arg98_1 = mul_98 = None
        mul_99: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg272_1, -0.01);  arg272_1 = None
        add__99: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg99_1, mul_99);  arg99_1 = mul_99 = None
        mul_100: f32[1920] = torch.ops.aten.mul.Tensor(arg273_1, -0.01);  arg273_1 = None
        add__100: f32[1920] = torch.ops.aten.add_.Tensor(arg100_1, mul_100);  arg100_1 = mul_100 = None
        mul_101: f32[1920] = torch.ops.aten.mul.Tensor(arg274_1, -0.01);  arg274_1 = None
        add__101: f32[1920] = torch.ops.aten.add_.Tensor(arg101_1, mul_101);  arg101_1 = mul_101 = None
        mul_102: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg275_1, -0.01);  arg275_1 = None
        add__102: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg102_1, mul_102);  arg102_1 = mul_102 = None
        mul_103: f32[640] = torch.ops.aten.mul.Tensor(arg276_1, -0.01);  arg276_1 = None
        add__103: f32[640] = torch.ops.aten.add_.Tensor(arg103_1, mul_103);  arg103_1 = mul_103 = None
        mul_104: f32[640] = torch.ops.aten.mul.Tensor(arg277_1, -0.01);  arg277_1 = None
        add__104: f32[640] = torch.ops.aten.add_.Tensor(arg104_1, mul_104);  arg104_1 = mul_104 = None
        mul_105: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg278_1, -0.01);  arg278_1 = None
        add__105: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg105_1, mul_105);  arg105_1 = mul_105 = None
        mul_106: f32[1920] = torch.ops.aten.mul.Tensor(arg279_1, -0.01);  arg279_1 = None
        add__106: f32[1920] = torch.ops.aten.add_.Tensor(arg106_1, mul_106);  arg106_1 = mul_106 = None
        mul_107: f32[1920] = torch.ops.aten.mul.Tensor(arg280_1, -0.01);  arg280_1 = None
        add__107: f32[1920] = torch.ops.aten.add_.Tensor(arg107_1, mul_107);  arg107_1 = mul_107 = None
        mul_108: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg281_1, -0.01);  arg281_1 = None
        add__108: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg108_1, mul_108);  arg108_1 = mul_108 = None
        mul_109: f32[1920] = torch.ops.aten.mul.Tensor(arg282_1, -0.01);  arg282_1 = None
        add__109: f32[1920] = torch.ops.aten.add_.Tensor(arg109_1, mul_109);  arg109_1 = mul_109 = None
        mul_110: f32[1920] = torch.ops.aten.mul.Tensor(arg283_1, -0.01);  arg283_1 = None
        add__110: f32[1920] = torch.ops.aten.add_.Tensor(arg110_1, mul_110);  arg110_1 = mul_110 = None
        mul_111: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg284_1, -0.01);  arg284_1 = None
        add__111: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg111_1, mul_111);  arg111_1 = mul_111 = None
        mul_112: f32[640] = torch.ops.aten.mul.Tensor(arg285_1, -0.01);  arg285_1 = None
        add__112: f32[640] = torch.ops.aten.add_.Tensor(arg112_1, mul_112);  arg112_1 = mul_112 = None
        mul_113: f32[640] = torch.ops.aten.mul.Tensor(arg286_1, -0.01);  arg286_1 = None
        add__113: f32[640] = torch.ops.aten.add_.Tensor(arg113_1, mul_113);  arg113_1 = mul_113 = None
        mul_114: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg287_1, -0.01);  arg287_1 = None
        add__114: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg114_1, mul_114);  arg114_1 = mul_114 = None
        mul_115: f32[1920] = torch.ops.aten.mul.Tensor(arg288_1, -0.01);  arg288_1 = None
        add__115: f32[1920] = torch.ops.aten.add_.Tensor(arg115_1, mul_115);  arg115_1 = mul_115 = None
        mul_116: f32[1920] = torch.ops.aten.mul.Tensor(arg289_1, -0.01);  arg289_1 = None
        add__116: f32[1920] = torch.ops.aten.add_.Tensor(arg116_1, mul_116);  arg116_1 = mul_116 = None
        mul_117: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg290_1, -0.01);  arg290_1 = None
        add__117: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg117_1, mul_117);  arg117_1 = mul_117 = None
        mul_118: f32[1920] = torch.ops.aten.mul.Tensor(arg291_1, -0.01);  arg291_1 = None
        add__118: f32[1920] = torch.ops.aten.add_.Tensor(arg118_1, mul_118);  arg118_1 = mul_118 = None
        mul_119: f32[1920] = torch.ops.aten.mul.Tensor(arg292_1, -0.01);  arg292_1 = None
        add__119: f32[1920] = torch.ops.aten.add_.Tensor(arg119_1, mul_119);  arg119_1 = mul_119 = None
        mul_120: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg293_1, -0.01);  arg293_1 = None
        add__120: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg120_1, mul_120);  arg120_1 = mul_120 = None
        mul_121: f32[640] = torch.ops.aten.mul.Tensor(arg294_1, -0.01);  arg294_1 = None
        add__121: f32[640] = torch.ops.aten.add_.Tensor(arg121_1, mul_121);  arg121_1 = mul_121 = None
        mul_122: f32[640] = torch.ops.aten.mul.Tensor(arg295_1, -0.01);  arg295_1 = None
        add__122: f32[640] = torch.ops.aten.add_.Tensor(arg122_1, mul_122);  arg122_1 = mul_122 = None
        mul_123: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg296_1, -0.01);  arg296_1 = None
        add__123: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg123_1, mul_123);  arg123_1 = mul_123 = None
        mul_124: f32[1920] = torch.ops.aten.mul.Tensor(arg297_1, -0.01);  arg297_1 = None
        add__124: f32[1920] = torch.ops.aten.add_.Tensor(arg124_1, mul_124);  arg124_1 = mul_124 = None
        mul_125: f32[1920] = torch.ops.aten.mul.Tensor(arg298_1, -0.01);  arg298_1 = None
        add__125: f32[1920] = torch.ops.aten.add_.Tensor(arg125_1, mul_125);  arg125_1 = mul_125 = None
        mul_126: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg299_1, -0.01);  arg299_1 = None
        add__126: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg126_1, mul_126);  arg126_1 = mul_126 = None
        mul_127: f32[1920] = torch.ops.aten.mul.Tensor(arg300_1, -0.01);  arg300_1 = None
        add__127: f32[1920] = torch.ops.aten.add_.Tensor(arg127_1, mul_127);  arg127_1 = mul_127 = None
        mul_128: f32[1920] = torch.ops.aten.mul.Tensor(arg301_1, -0.01);  arg301_1 = None
        add__128: f32[1920] = torch.ops.aten.add_.Tensor(arg128_1, mul_128);  arg128_1 = mul_128 = None
        mul_129: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg302_1, -0.01);  arg302_1 = None
        add__129: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg129_1, mul_129);  arg129_1 = mul_129 = None
        mul_130: f32[640] = torch.ops.aten.mul.Tensor(arg303_1, -0.01);  arg303_1 = None
        add__130: f32[640] = torch.ops.aten.add_.Tensor(arg130_1, mul_130);  arg130_1 = mul_130 = None
        mul_131: f32[640] = torch.ops.aten.mul.Tensor(arg304_1, -0.01);  arg304_1 = None
        add__131: f32[640] = torch.ops.aten.add_.Tensor(arg131_1, mul_131);  arg131_1 = mul_131 = None
        mul_132: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg305_1, -0.01);  arg305_1 = None
        add__132: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg132_1, mul_132);  arg132_1 = mul_132 = None
        mul_133: f32[1920] = torch.ops.aten.mul.Tensor(arg306_1, -0.01);  arg306_1 = None
        add__133: f32[1920] = torch.ops.aten.add_.Tensor(arg133_1, mul_133);  arg133_1 = mul_133 = None
        mul_134: f32[1920] = torch.ops.aten.mul.Tensor(arg307_1, -0.01);  arg307_1 = None
        add__134: f32[1920] = torch.ops.aten.add_.Tensor(arg134_1, mul_134);  arg134_1 = mul_134 = None
        mul_135: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg308_1, -0.01);  arg308_1 = None
        add__135: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg135_1, mul_135);  arg135_1 = mul_135 = None
        mul_136: f32[1920] = torch.ops.aten.mul.Tensor(arg309_1, -0.01);  arg309_1 = None
        add__136: f32[1920] = torch.ops.aten.add_.Tensor(arg136_1, mul_136);  arg136_1 = mul_136 = None
        mul_137: f32[1920] = torch.ops.aten.mul.Tensor(arg310_1, -0.01);  arg310_1 = None
        add__137: f32[1920] = torch.ops.aten.add_.Tensor(arg137_1, mul_137);  arg137_1 = mul_137 = None
        mul_138: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg311_1, -0.01);  arg311_1 = None
        add__138: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg138_1, mul_138);  arg138_1 = mul_138 = None
        mul_139: f32[640] = torch.ops.aten.mul.Tensor(arg312_1, -0.01);  arg312_1 = None
        add__139: f32[640] = torch.ops.aten.add_.Tensor(arg139_1, mul_139);  arg139_1 = mul_139 = None
        mul_140: f32[640] = torch.ops.aten.mul.Tensor(arg313_1, -0.01);  arg313_1 = None
        add__140: f32[640] = torch.ops.aten.add_.Tensor(arg140_1, mul_140);  arg140_1 = mul_140 = None
        mul_141: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg314_1, -0.01);  arg314_1 = None
        add__141: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg141_1, mul_141);  arg141_1 = mul_141 = None
        mul_142: f32[1920] = torch.ops.aten.mul.Tensor(arg315_1, -0.01);  arg315_1 = None
        add__142: f32[1920] = torch.ops.aten.add_.Tensor(arg142_1, mul_142);  arg142_1 = mul_142 = None
        mul_143: f32[1920] = torch.ops.aten.mul.Tensor(arg316_1, -0.01);  arg316_1 = None
        add__143: f32[1920] = torch.ops.aten.add_.Tensor(arg143_1, mul_143);  arg143_1 = mul_143 = None
        mul_144: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg317_1, -0.01);  arg317_1 = None
        add__144: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg144_1, mul_144);  arg144_1 = mul_144 = None
        mul_145: f32[1920] = torch.ops.aten.mul.Tensor(arg318_1, -0.01);  arg318_1 = None
        add__145: f32[1920] = torch.ops.aten.add_.Tensor(arg145_1, mul_145);  arg145_1 = mul_145 = None
        mul_146: f32[1920] = torch.ops.aten.mul.Tensor(arg319_1, -0.01);  arg319_1 = None
        add__146: f32[1920] = torch.ops.aten.add_.Tensor(arg146_1, mul_146);  arg146_1 = mul_146 = None
        mul_147: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg320_1, -0.01);  arg320_1 = None
        add__147: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg147_1, mul_147);  arg147_1 = mul_147 = None
        mul_148: f32[640] = torch.ops.aten.mul.Tensor(arg321_1, -0.01);  arg321_1 = None
        add__148: f32[640] = torch.ops.aten.add_.Tensor(arg148_1, mul_148);  arg148_1 = mul_148 = None
        mul_149: f32[640] = torch.ops.aten.mul.Tensor(arg322_1, -0.01);  arg322_1 = None
        add__149: f32[640] = torch.ops.aten.add_.Tensor(arg149_1, mul_149);  arg149_1 = mul_149 = None
        mul_150: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg323_1, -0.01);  arg323_1 = None
        add__150: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg150_1, mul_150);  arg150_1 = mul_150 = None
        mul_151: f32[1920] = torch.ops.aten.mul.Tensor(arg324_1, -0.01);  arg324_1 = None
        add__151: f32[1920] = torch.ops.aten.add_.Tensor(arg151_1, mul_151);  arg151_1 = mul_151 = None
        mul_152: f32[1920] = torch.ops.aten.mul.Tensor(arg325_1, -0.01);  arg325_1 = None
        add__152: f32[1920] = torch.ops.aten.add_.Tensor(arg152_1, mul_152);  arg152_1 = mul_152 = None
        mul_153: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg326_1, -0.01);  arg326_1 = None
        add__153: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg153_1, mul_153);  arg153_1 = mul_153 = None
        mul_154: f32[1920] = torch.ops.aten.mul.Tensor(arg327_1, -0.01);  arg327_1 = None
        add__154: f32[1920] = torch.ops.aten.add_.Tensor(arg154_1, mul_154);  arg154_1 = mul_154 = None
        mul_155: f32[1920] = torch.ops.aten.mul.Tensor(arg328_1, -0.01);  arg328_1 = None
        add__155: f32[1920] = torch.ops.aten.add_.Tensor(arg155_1, mul_155);  arg155_1 = mul_155 = None
        mul_156: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg329_1, -0.01);  arg329_1 = None
        add__156: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg156_1, mul_156);  arg156_1 = mul_156 = None
        mul_157: f32[640] = torch.ops.aten.mul.Tensor(arg330_1, -0.01);  arg330_1 = None
        add__157: f32[640] = torch.ops.aten.add_.Tensor(arg157_1, mul_157);  arg157_1 = mul_157 = None
        mul_158: f32[640] = torch.ops.aten.mul.Tensor(arg331_1, -0.01);  arg331_1 = None
        add__158: f32[640] = torch.ops.aten.add_.Tensor(arg158_1, mul_158);  arg158_1 = mul_158 = None
        mul_159: f32[1920, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg332_1, -0.01);  arg332_1 = None
        add__159: f32[1920, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg159_1, mul_159);  arg159_1 = mul_159 = None
        mul_160: f32[1920] = torch.ops.aten.mul.Tensor(arg333_1, -0.01);  arg333_1 = None
        add__160: f32[1920] = torch.ops.aten.add_.Tensor(arg160_1, mul_160);  arg160_1 = mul_160 = None
        mul_161: f32[1920] = torch.ops.aten.mul.Tensor(arg334_1, -0.01);  arg334_1 = None
        add__161: f32[1920] = torch.ops.aten.add_.Tensor(arg161_1, mul_161);  arg161_1 = mul_161 = None
        mul_162: f32[1920, 1, 3, 3] = torch.ops.aten.mul.Tensor(arg335_1, -0.01);  arg335_1 = None
        add__162: f32[1920, 1, 3, 3] = torch.ops.aten.add_.Tensor(arg162_1, mul_162);  arg162_1 = mul_162 = None
        mul_163: f32[1920] = torch.ops.aten.mul.Tensor(arg336_1, -0.01);  arg336_1 = None
        add__163: f32[1920] = torch.ops.aten.add_.Tensor(arg163_1, mul_163);  arg163_1 = mul_163 = None
        mul_164: f32[1920] = torch.ops.aten.mul.Tensor(arg337_1, -0.01);  arg337_1 = None
        add__164: f32[1920] = torch.ops.aten.add_.Tensor(arg164_1, mul_164);  arg164_1 = mul_164 = None
        mul_165: f32[640, 1920, 1, 1] = torch.ops.aten.mul.Tensor(arg338_1, -0.01);  arg338_1 = None
        add__165: f32[640, 1920, 1, 1] = torch.ops.aten.add_.Tensor(arg165_1, mul_165);  arg165_1 = mul_165 = None
        mul_166: f32[640] = torch.ops.aten.mul.Tensor(arg339_1, -0.01);  arg339_1 = None
        add__166: f32[640] = torch.ops.aten.add_.Tensor(arg166_1, mul_166);  arg166_1 = mul_166 = None
        mul_167: f32[640] = torch.ops.aten.mul.Tensor(arg340_1, -0.01);  arg340_1 = None
        add__167: f32[640] = torch.ops.aten.add_.Tensor(arg167_1, mul_167);  arg167_1 = mul_167 = None
        mul_168: f32[2560, 640, 1, 1] = torch.ops.aten.mul.Tensor(arg341_1, -0.01);  arg341_1 = None
        add__168: f32[2560, 640, 1, 1] = torch.ops.aten.add_.Tensor(arg168_1, mul_168);  arg168_1 = mul_168 = None
        mul_169: f32[2560] = torch.ops.aten.mul.Tensor(arg342_1, -0.01);  arg342_1 = None
        add__169: f32[2560] = torch.ops.aten.add_.Tensor(arg169_1, mul_169);  arg169_1 = mul_169 = None
        mul_170: f32[2560] = torch.ops.aten.mul.Tensor(arg343_1, -0.01);  arg343_1 = None
        add__170: f32[2560] = torch.ops.aten.add_.Tensor(arg170_1, mul_170);  arg170_1 = mul_170 = None
        mul_171: f32[1000, 2560] = torch.ops.aten.mul.Tensor(arg344_1, -0.01);  arg344_1 = None
        add__171: f32[1000, 2560] = torch.ops.aten.add_.Tensor(arg171_1, mul_171);  arg171_1 = mul_171 = None
        mul_172: f32[1000] = torch.ops.aten.mul.Tensor(arg345_1, -0.01);  arg345_1 = None
        add__172: f32[1000] = torch.ops.aten.add_.Tensor(arg172_1, mul_172);  arg172_1 = mul_172 = None
        return ()
        
