buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep(name='buf0', index=c0, size=(512,))]
buf0.unmet_dependencies = []
buf0.met_dependencies = []
buf0.group.device = cuda:0
buf0.group.iteration = (512, 1)
buf0.sizes = ([512], [])
class buf0_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf0', get_index, constant, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep(name='buf1', index=(tmp0), size=())]
buf1.unmet_dependencies = [StarDep(name='buf0')]
buf1.met_dependencies = [MemoryDep(name='unsqueeze_3', index=0, size=())]
buf1.group.device = cuda:0
buf1.group.iteration = (1, 1)
buf1.sizes = ([], [])
buf1.mutations = ['buf0']
class buf1_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = indirect0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('unsqueeze_3', get_index)
        set_indirect0 = self.set_indirect0(load)
        constant = ops.constant(-1.0, torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, constant, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=0, size=()),
        MemoryDep(name='buf2', index=0, size=(512,))]
buf2.unmet_dependencies = [MemoryDep(name='buf1', index=c0, size=(512,))]
buf2.met_dependencies = 
    [   MemoryDep(name='ne_2', index=0, size=(512,)),
        MemoryDep(name='tangents_1', index=0, size=(512,)),
        MemoryDep(name='unsqueeze_3', index=0, size=(512,))]
buf2.group.device = cuda:0
buf2.group.iteration = (1, 512)
buf2.sizes = ([], [512])
class buf2_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('unsqueeze_3', get_index_1)
        constant = ops.constant(512, torch.int64)
        ne = ops.ne(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('tangents_1', get_index_2)
        constant_1 = ops.constant(2, torch.float32)
        div = ops.div(load_2, constant_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('ne_2', get_index_3)
        to_dtype = ops.to_dtype(load_3, torch.int64)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32)
        div_1 = ops.div(div, to_dtype_1)
        constant_2 = ops.constant(0, torch.float32)
        where = ops.where(ne, div_1, constant_2)
        mul = ops.mul(load, where)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep(name='buf3', index=c0, size=(512,))]
buf3.unmet_dependencies = []
buf3.met_dependencies = []
buf3.group.device = cuda:0
buf3.group.iteration = (512, 1)
buf3.sizes = ([512], [])
class buf3_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf3', get_index, constant, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=(tmp0), size=())]
buf4.unmet_dependencies = [StarDep(name='buf3')]
buf4.met_dependencies = [MemoryDep(name='unsqueeze_2', index=0, size=())]
buf4.group.device = cuda:0
buf4.group.iteration = (1, 1)
buf4.sizes = ([], [])
buf4.mutations = ['buf3']
class buf4_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = indirect0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('unsqueeze_2', get_index)
        set_indirect0 = self.set_indirect0(load)
        constant = ops.constant(-1.0, torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, constant, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = 
    [   MemoryDep(name='buf5', index=0, size=()),
        MemoryDep(name='buf5', index=0, size=(512,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(512,))]
buf5.met_dependencies = 
    [   MemoryDep(name='ne', index=0, size=(512,)),
        MemoryDep(name='tangents_1', index=0, size=(512,)),
        MemoryDep(name='unsqueeze_2', index=0, size=(512,))]
buf5.group.device = cuda:0
buf5.group.iteration = (1, 512)
buf5.sizes = ([], [512])
class buf5_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('unsqueeze_2', get_index_1)
        constant = ops.constant(512, torch.int64)
        ne = ops.ne(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('tangents_1', get_index_2)
        constant_1 = ops.constant(2, torch.float32)
        div = ops.div(load_2, constant_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('ne', get_index_3)
        to_dtype = ops.to_dtype(load_3, torch.int64)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32)
        div_1 = ops.div(div, to_dtype_1)
        constant_2 = ops.constant(0, torch.float32)
        where = ops.where(ne, div_1, constant_2)
        mul = ops.mul(load, where)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf5', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=2*c0, size=(512,))]
buf6.unmet_dependencies = 
    [   MemoryDep(name='buf4', index=c0, size=(512,)),
        MemoryDep(name='buf5', index=0, size=(512,))]
buf6.met_dependencies = 
    [   MemoryDep(name='ne', index=0, size=(512,)),
        MemoryDep(name='sub_39', index=c0, size=(512,)),
        MemoryDep(name='tangents_1', index=0, size=(512,)),
        MemoryDep(name='tangents_2', index=c0, size=(512,)),
        MemoryDep(name='unsqueeze_2', index=0, size=(512,))]
buf6.group.device = cuda:0
buf6.group.iteration = (512, 1)
buf6.sizes = ([512], [])
buf6.aliases = ['buf8']
class buf6_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    index2 = 2*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_2', get_index_2)
        constant = ops.constant(512, torch.int64)
        ne = ops.ne(load_2, constant)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('tangents_1', get_index_3)
        constant_1 = ops.constant(2, torch.float32)
        div = ops.div(load_3, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('ne', get_index_4)
        to_dtype = ops.to_dtype(load_4, torch.int64)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32)
        div_1 = ops.div(div, to_dtype_1)
        constant_2 = ops.constant(0, torch.float32)
        where = ops.where(ne, div_1, constant_2)
        mul = ops.mul(load_1, where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('sub_39', get_index_5)
        exp = ops.exp(load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf5', get_index_6)
        mul_1 = ops.mul(exp, load_6)
        sub = ops.sub(mul, mul_1)
        add = ops.add(load, sub)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf6', get_index_7, add, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep(name='buf7', index=2*c0, size=(512,))]
buf7.unmet_dependencies = 
    [   MemoryDep(name='buf1', index=c0, size=(512,)),
        MemoryDep(name='buf2', index=0, size=(512,))]
buf7.met_dependencies = 
    [   MemoryDep(name='ne_2', index=0, size=(512,)),
        MemoryDep(name='sub_41', index=c0, size=(512,)),
        MemoryDep(name='tangents_1', index=0, size=(512,)),
        MemoryDep(name='tangents_3', index=c0, size=(512,)),
        MemoryDep(name='unsqueeze_3', index=0, size=(512,))]
buf7.group.device = cuda:0
buf7.group.iteration = (512, 1)
buf7.sizes = ([512], [])
buf7.aliases = ['buf8']
class buf7_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    index2 = 2*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_3', get_index_2)
        constant = ops.constant(512, torch.int64)
        ne = ops.ne(load_2, constant)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('tangents_1', get_index_3)
        constant_1 = ops.constant(2, torch.float32)
        div = ops.div(load_3, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('ne_2', get_index_4)
        to_dtype = ops.to_dtype(load_4, torch.int64)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32)
        div_1 = ops.div(div, to_dtype_1)
        constant_2 = ops.constant(0, torch.float32)
        where = ops.where(ne, div_1, constant_2)
        mul = ops.mul(load_1, where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('sub_41', get_index_5)
        exp = ops.exp(load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf2', get_index_6)
        mul_1 = ops.mul(exp, load_6)
        sub = ops.sub(mul, mul_1)
        add = ops.add(load, sub)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf7', get_index_7, add, None)
        return store


buf8: NopKernelSchedulerNode(ConcatKernel)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf6'), StarDep(name='buf7')]
buf8.met_dependencies = []


buf9: ExternKernelSchedulerNode(ExternKernelOut)
buf9.writes = [StarDep(name='buf9')]
buf9.unmet_dependencies = [StarDep(name='buf8')]
buf9.met_dependencies = [StarDep(name='permute_134')]
buf9.node.kernel = extern_kernels.mm


buf10: ExternKernelSchedulerNode(ExternKernelOut)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf8')]
buf10.met_dependencies = [StarDep(name='view_254')]
buf10.node.kernel = extern_kernels.mm


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(8, 128)),
        MemoryDep(name='buf11', index=c0, size=(8,))]
buf11.unmet_dependencies = [MemoryDep(name='buf8', index=256*c0 + c1 + 2*c2, size=(4, 2, 128))]
buf11.met_dependencies = []
buf11.group.device = cuda:0
buf11.group.iteration = (8, 128)
buf11.sizes = ([4, 2], [128])
class buf11_loop_body:
    var_ranges = {z0: 4, z1: 2, z2: 128}
    index0 = 256*z0 + z1 + 2*z2
    index1 = 2*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(2, 4)),
        MemoryDep(name='buf12', index=c0, size=(2,))]
buf12.unmet_dependencies = [MemoryDep(name='buf11', index=c0 + 2*c1, size=(2, 4))]
buf12.met_dependencies = []
buf12.group.device = cuda:0
buf12.group.iteration = (2, 4)
buf12.sizes = ([2], [4])
class buf12_loop_body:
    var_ranges = {z0: 2, z1: 4}
    index0 = z0 + 2*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = 
    [   MemoryDep(name='buf13', index=c0, size=(512, 4096)),
        MemoryDep(name='buf13', index=c0, size=(512,))]
buf13.unmet_dependencies = [MemoryDep(name='buf9', index=c0, size=(2097152,))]
buf13.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf13.group.device = cuda:0
buf13.group.iteration = (512, 4096)
buf13.sizes = ([512], [4096])
class buf13_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf13', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = 
    [   MemoryDep(name='buf14', index=c0, size=(512, 4096)),
        MemoryDep(name='buf14', index=c0, size=(512,))]
buf14.unmet_dependencies = [MemoryDep(name='buf9', index=c0, size=(2097152,))]
buf14.met_dependencies = 
    [   MemoryDep(name='mul_97', index=c0, size=(2097152,)),
        MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf14.group.device = cuda:0
buf14.group.iteration = (512, 4096)
buf14.sizes = ([512], [4096])
class buf14_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_97', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf14', torch.float32, torch.float32, 'sum', get_index_3, mul_1)
        return reduction


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep(name='buf15', index=c0, size=(2097152,))]
buf15.unmet_dependencies = 
    [   MemoryDep(name='buf13', index=c0, size=(512, 4096)),
        MemoryDep(name='buf14', index=c0, size=(512, 4096)),
        MemoryDep(name='buf9', index=c0, size=(2097152,))]
buf15.met_dependencies = 
    [   MemoryDep(name='div_30', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_97', index=c0, size=(2097152,)),
        MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf15.group.device = cuda:0
buf15.group.iteration = (2097152, 1)
buf15.sizes = ([512, 4096], [])
class buf15_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf9', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_22', get_index_2)
        mul = ops.mul(load_1, load_2)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf13', get_index_3)
        sub = ops.sub(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('mul_97', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf14', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf15', get_index_6, mul_3, None)
        return store


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = 
    [   MemoryDep(name='buf16', index=c0, size=(4096, 512)),
        MemoryDep(name='buf16', index=c0, size=(4096,))]
buf16.unmet_dependencies = [MemoryDep(name='buf9', index=c0 + 4096*c1, size=(4096, 512))]
buf16.met_dependencies = [MemoryDep(name='mul_97', index=c0 + 4096*c1, size=(4096, 512))]
buf16.group.device = cuda:0
buf16.group.iteration = (4096, 512)
buf16.sizes = ([4096], [512])
class buf16_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_97', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf16', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = 
    [   MemoryDep(name='buf17', index=c0, size=(4096, 512)),
        MemoryDep(name='buf17', index=c0, size=(4096,))]
buf17.unmet_dependencies = [MemoryDep(name='buf9', index=c0 + 4096*c1, size=(4096, 512))]
buf17.met_dependencies = []
buf17.group.device = cuda:0
buf17.group.iteration = (4096, 512)
buf17.sizes = ([4096], [512])
class buf17_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf17', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf18: ExternKernelSchedulerNode(ExternKernelOut)
buf18.writes = [StarDep(name='buf18')]
buf18.unmet_dependencies = [StarDep(name='buf15')]
buf18.met_dependencies = [StarDep(name='permute_138')]
buf18.node.kernel = extern_kernels.mm


buf19: ExternKernelSchedulerNode(ExternKernelOut)
buf19.writes = [StarDep(name='buf19')]
buf19.unmet_dependencies = [StarDep(name='buf15')]
buf19.met_dependencies = [StarDep(name='view_252')]
buf19.node.kernel = extern_kernels.mm


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = 
    [   MemoryDep(name='buf20', index=c0, size=(16384, 128)),
        MemoryDep(name='buf20', index=c0, size=(16384,))]
buf20.unmet_dependencies = [MemoryDep(name='buf15', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf20.met_dependencies = []
buf20.group.device = cuda:0
buf20.group.iteration = (16384, 128)
buf20.sizes = ([4, 4096], [128])
class buf20_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf20', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = 
    [   MemoryDep(name='buf21', index=c0, size=(4096, 4)),
        MemoryDep(name='buf21', index=c0, size=(4096,))]
buf21.unmet_dependencies = [MemoryDep(name='buf20', index=c0 + 4096*c1, size=(4096, 4))]
buf21.met_dependencies = []
buf21.group.device = cuda:0
buf21.group.iteration = (4096, 4)
buf21.sizes = ([4096], [4])
class buf21_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf21', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = [MemoryDep(name='buf22', index=c0, size=(8388608,))]
buf22.unmet_dependencies = [MemoryDep(name='buf18', index=c0, size=(8388608,))]
buf22.met_dependencies = 
    [   MemoryDep(name='addmm_71', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_11', index=c0, size=(8388608,))]
buf22.group.device = cuda:0
buf22.group.iteration = (8388608, 1)
buf22.sizes = ([8388608], [])
class buf22_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_71', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_11', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_11', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf18', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_71', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_11', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_11', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_71', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf18', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_11', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf22', get_index_11, add_2, None)
        return store


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep(name='buf23', index=c0, size=(8388608,))]
buf23.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(8388608,))]
buf23.met_dependencies = []
buf23.group.device = cuda:0
buf23.group.iteration = (8388608, 1)
buf23.sizes = ([8388608], [])
class buf23_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf23', get_index_1, load, None)
        return store


buf24: ExternKernelSchedulerNode(ExternKernelOut)
buf24.writes = [StarDep(name='buf24')]
buf24.unmet_dependencies = [StarDep(name='buf23')]
buf24.met_dependencies = [StarDep(name='permute_142')]
buf24.node.kernel = extern_kernels.mm


buf25: ExternKernelSchedulerNode(ExternKernelOut)
buf25.writes = [StarDep(name='buf25')]
buf25.unmet_dependencies = [StarDep(name='buf23')]
buf25.met_dependencies = [StarDep(name='view_250')]
buf25.node.kernel = extern_kernels.mm


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = 
    [   MemoryDep(name='buf26', index=c0, size=(16384, 512)),
        MemoryDep(name='buf26', index=c0, size=(16384,))]
buf26.unmet_dependencies = [MemoryDep(name='buf23', index=c0 + 16384*c1, size=(16384, 512))]
buf26.met_dependencies = []
buf26.group.device = cuda:0
buf26.group.iteration = (16384, 512)
buf26.sizes = ([16384], [512])
class buf26_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf26', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = 
    [   MemoryDep(name='buf27', index=c0, size=(512, 4096)),
        MemoryDep(name='buf27', index=c0, size=(512,))]
buf27.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0, size=(2097152,)),
        MemoryDep(name='buf24', index=c0, size=(2097152,))]
buf27.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf27.group.device = cuda:0
buf27.group.iteration = (512, 4096)
buf27.sizes = ([512], [4096])
class buf27_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf27', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = 
    [   MemoryDep(name='buf28', index=c0, size=(512, 4096)),
        MemoryDep(name='buf28', index=c0, size=(512,))]
buf28.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0, size=(2097152,)),
        MemoryDep(name='buf24', index=c0, size=(2097152,))]
buf28.met_dependencies = 
    [   MemoryDep(name='mul_91', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf28.group.device = cuda:0
buf28.group.iteration = (512, 4096)
buf28.sizes = ([512], [4096])
class buf28_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_91', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf28', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = [MemoryDep(name='buf29', index=c0, size=(2097152,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0, size=(2097152,)),
        MemoryDep(name='buf24', index=c0, size=(2097152,)),
        MemoryDep(name='buf27', index=c0, size=(512, 4096)),
        MemoryDep(name='buf28', index=c0, size=(512, 4096))]
buf29.met_dependencies = 
    [   MemoryDep(name='div_31', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_91', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf29.group.device = cuda:0
buf29.group.iteration = (2097152, 1)
buf29.sizes = ([512, 4096], [])
class buf29_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf27', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_91', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf28', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf29', get_index_7, mul_3, None)
        return store


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = 
    [   MemoryDep(name='buf30', index=c0, size=(4096, 512)),
        MemoryDep(name='buf30', index=c0, size=(4096,))]
buf30.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf24', index=c0 + 4096*c1, size=(4096, 512))]
buf30.met_dependencies = [MemoryDep(name='mul_91', index=c0 + 4096*c1, size=(4096, 512))]
buf30.group.device = cuda:0
buf30.group.iteration = (4096, 512)
buf30.sizes = ([4096], [512])
class buf30_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_91', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf30', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = 
    [   MemoryDep(name='buf31', index=c0, size=(4096, 512)),
        MemoryDep(name='buf31', index=c0, size=(4096,))]
buf31.unmet_dependencies = 
    [   MemoryDep(name='buf15', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf24', index=c0 + 4096*c1, size=(4096, 512))]
buf31.met_dependencies = []
buf31.group.device = cuda:0
buf31.group.iteration = (4096, 512)
buf31.sizes = ([4096], [512])
class buf31_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf31', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf32: ExternKernelSchedulerNode(ExternKernelOut)
buf32.writes = [StarDep(name='buf32')]
buf32.unmet_dependencies = [StarDep(name='buf29')]
buf32.met_dependencies = [StarDep(name='permute_146')]
buf32.node.kernel = extern_kernels.mm


buf33: ExternKernelSchedulerNode(ExternKernelOut)
buf33.writes = [StarDep(name='buf33')]
buf33.unmet_dependencies = [StarDep(name='buf29')]
buf33.met_dependencies = [StarDep(name='view_248')]
buf33.node.kernel = extern_kernels.mm


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(16384, 128)),
        MemoryDep(name='buf34', index=c0, size=(16384,))]
buf34.unmet_dependencies = [MemoryDep(name='buf29', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf34.met_dependencies = []
buf34.group.device = cuda:0
buf34.group.iteration = (16384, 128)
buf34.sizes = ([4, 4096], [128])
class buf34_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = 
    [   MemoryDep(name='buf35', index=c0, size=(4096, 4)),
        MemoryDep(name='buf35', index=c0, size=(4096,))]
buf35.unmet_dependencies = [MemoryDep(name='buf34', index=c0 + 4096*c1, size=(4096, 4))]
buf35.met_dependencies = []
buf35.group.device = cuda:0
buf35.group.iteration = (4096, 4)
buf35.sizes = ([4096], [4])
class buf35_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf35', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf36: ExternKernelSchedulerNode(ExternKernelOut)
buf36.writes = [StarDep(name='buf36')]
buf36.unmet_dependencies = [StarDep(name='buf32')]
buf36.met_dependencies = [StarDep(name='permute_151')]
buf36.node.kernel = extern_kernels.bmm


buf37: ExternKernelSchedulerNode(ExternKernelOut)
buf37.writes = [StarDep(name='buf37')]
buf37.unmet_dependencies = [StarDep(name='buf32')]
buf37.met_dependencies = [StarDep(name='permute_152')]
buf37.node.kernel = extern_kernels.bmm


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = 
    [   MemoryDep(name='buf38', index=c0, size=(32768, 512)),
        MemoryDep(name='buf38', index=c0, size=(32768,))]
buf38.unmet_dependencies = [MemoryDep(name='buf37', index=c0, size=(16777216,))]
buf38.met_dependencies = [MemoryDep(name='div_23', index=c0, size=(16777216,))]
buf38.group.device = cuda:0
buf38.group.iteration = (32768, 512)
buf38.sizes = ([32768], [512])
class buf38_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_23', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf38', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(16777216,))]
buf39.unmet_dependencies = 
    [   MemoryDep(name='buf37', index=c0, size=(16777216,)),
        MemoryDep(name='buf38', index=c0, size=(32768, 512))]
buf39.met_dependencies = [MemoryDep(name='div_23', index=c0, size=(16777216,))]
buf39.group.device = cuda:0
buf39.group.iteration = (16777216, 1)
buf39.sizes = ([32768, 512], [])
class buf39_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_23', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf38', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, div, None)
        return store


buf40: ExternKernelSchedulerNode(ExternKernelOut)
buf40.writes = [StarDep(name='buf40')]
buf40.unmet_dependencies = [StarDep(name='buf39')]
buf40.met_dependencies = [StarDep(name='permute_153')]
buf40.node.kernel = extern_kernels.bmm


buf41: ExternKernelSchedulerNode(ExternKernelOut)
buf41.writes = [StarDep(name='buf41')]
buf41.unmet_dependencies = [StarDep(name='buf39')]
buf41.met_dependencies = [StarDep(name='permute_154')]
buf41.node.kernel = extern_kernels.bmm


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = [MemoryDep(name='buf42', index=c0, size=(2097152,))]
buf42.unmet_dependencies = [   MemoryDep(name='buf36', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf42.met_dependencies = []
buf42.group.device = cuda:0
buf42.group.iteration = (2097152, 1)
buf42.sizes = ([512, 4096], [])
class buf42_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf42', get_index_1, load, None)
        return store


buf43: ExternKernelSchedulerNode(ExternKernelOut)
buf43.writes = [StarDep(name='buf43')]
buf43.unmet_dependencies = [StarDep(name='buf42')]
buf43.met_dependencies = [StarDep(name='permute_159')]
buf43.node.kernel = extern_kernels.mm


buf44: ExternKernelSchedulerNode(ExternKernelOut)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf42')]
buf44.met_dependencies = [StarDep(name='view_233')]
buf44.node.kernel = extern_kernels.mm


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = 
    [   MemoryDep(name='buf45', index=c0, size=(16384, 128)),
        MemoryDep(name='buf45', index=c0, size=(16384,))]
buf45.unmet_dependencies = [MemoryDep(name='buf42', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf45.met_dependencies = []
buf45.group.device = cuda:0
buf45.group.iteration = (16384, 128)
buf45.sizes = ([4, 4096], [128])
class buf45_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf45', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = 
    [   MemoryDep(name='buf46', index=c0, size=(4096, 4)),
        MemoryDep(name='buf46', index=c0, size=(4096,))]
buf46.unmet_dependencies = [MemoryDep(name='buf45', index=c0 + 4096*c1, size=(4096, 4))]
buf46.met_dependencies = []
buf46.group.device = cuda:0
buf46.group.iteration = (4096, 4)
buf46.sizes = ([4096], [4])
class buf46_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf46', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(2097152,))]
buf47.unmet_dependencies = [MemoryDep(name='buf40', index=c0, size=(2097152,))]
buf47.met_dependencies = []
buf47.group.device = cuda:0
buf47.group.iteration = (2097152, 1)
buf47.sizes = ([2097152], [])
class buf47_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf47', get_index_1, load, None)
        return store


buf48: ExternKernelSchedulerNode(ExternKernelOut)
buf48.writes = [StarDep(name='buf48')]
buf48.unmet_dependencies = [StarDep(name='buf47')]
buf48.met_dependencies = [StarDep(name='permute_163')]
buf48.node.kernel = extern_kernels.mm


buf49: ExternKernelSchedulerNode(ExternKernelOut)
buf49.writes = [StarDep(name='buf49')]
buf49.unmet_dependencies = [StarDep(name='buf47')]
buf49.met_dependencies = [StarDep(name='view_233')]
buf49.node.kernel = extern_kernels.mm


buf50: SchedulerNode(ComputedBuffer)
buf50.writes = 
    [   MemoryDep(name='buf50', index=c0, size=(4096, 512)),
        MemoryDep(name='buf50', index=c0, size=(4096,))]
buf50.unmet_dependencies = [MemoryDep(name='buf47', index=c0, size=(2097152,))]
buf50.met_dependencies = []
buf50.group.device = cuda:0
buf50.group.iteration = (4096, 512)
buf50.sizes = ([4096], [512])
class buf50_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf50', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = [MemoryDep(name='buf51', index=c0, size=(2097152,))]
buf51.unmet_dependencies = [   MemoryDep(name='buf41', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf51.met_dependencies = []
buf51.group.device = cuda:0
buf51.group.iteration = (2097152, 1)
buf51.sizes = ([512, 4096], [])
class buf51_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf51', get_index_1, load, None)
        return store


buf52: ExternKernelSchedulerNode(ExternKernelOut)
buf52.writes = [StarDep(name='buf52')]
buf52.unmet_dependencies = [StarDep(name='buf51')]
buf52.met_dependencies = [StarDep(name='permute_167')]
buf52.node.kernel = extern_kernels.mm


buf53: ExternKernelSchedulerNode(ExternKernelOut)
buf53.writes = [StarDep(name='buf53')]
buf53.unmet_dependencies = [StarDep(name='buf51')]
buf53.met_dependencies = [StarDep(name='view_233')]
buf53.node.kernel = extern_kernels.mm


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = 
    [   MemoryDep(name='buf54', index=c0, size=(16384, 128)),
        MemoryDep(name='buf54', index=c0, size=(16384,))]
buf54.unmet_dependencies = [MemoryDep(name='buf51', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf54.met_dependencies = []
buf54.group.device = cuda:0
buf54.group.iteration = (16384, 128)
buf54.sizes = ([4, 4096], [128])
class buf54_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf54', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = 
    [   MemoryDep(name='buf55', index=c0, size=(4096, 4)),
        MemoryDep(name='buf55', index=c0, size=(4096,))]
buf55.unmet_dependencies = [MemoryDep(name='buf54', index=c0 + 4096*c1, size=(4096, 4))]
buf55.met_dependencies = []
buf55.group.device = cuda:0
buf55.group.iteration = (4096, 4)
buf55.sizes = ([4096], [4])
class buf55_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf55', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = [MemoryDep(name='buf56', index=c0, size=(2097152,))]
buf56.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(2097152,)),
        MemoryDep(name='buf43', index=c0, size=(2097152,)),
        MemoryDep(name='buf48', index=c0, size=(2097152,)),
        MemoryDep(name='buf52', index=c0, size=(2097152,))]
buf56.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf56.group.device = cuda:0
buf56.group.iteration = (2097152, 1)
buf56.sizes = ([512, 4096], [])
class buf56_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf52', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, mul, None)
        return store


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = 
    [   MemoryDep(name='buf57', index=c0, size=(512, 4096)),
        MemoryDep(name='buf57', index=c0, size=(512,))]
buf57.unmet_dependencies = [MemoryDep(name='buf56', index=c0, size=(2097152,))]
buf57.met_dependencies = []
buf57.group.device = cuda:0
buf57.group.iteration = (512, 4096)
buf57.sizes = ([512], [4096])
class buf57_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf57', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = 
    [   MemoryDep(name='buf58', index=c0, size=(512, 4096)),
        MemoryDep(name='buf58', index=c0, size=(512,))]
buf58.unmet_dependencies = [MemoryDep(name='buf56', index=c0, size=(2097152,))]
buf58.met_dependencies = [MemoryDep(name='mul_89', index=c0, size=(2097152,))]
buf58.group.device = cuda:0
buf58.group.iteration = (512, 4096)
buf58.sizes = ([512], [4096])
class buf58_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_89', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf58', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep(name='buf59', index=c0, size=(2097152,))]
buf59.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=c0, size=(2097152,)),
        MemoryDep(name='buf57', index=c0, size=(512, 4096)),
        MemoryDep(name='buf58', index=c0, size=(512, 4096))]
buf59.met_dependencies = 
    [   MemoryDep(name='div_33', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_89', index=c0, size=(2097152,))]
buf59.group.device = cuda:0
buf59.group.iteration = (2097152, 1)
buf59.sizes = ([512, 4096], [])
class buf59_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_89', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf58', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf59', get_index_5, mul_2, None)
        return store


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = 
    [   MemoryDep(name='buf60', index=c0, size=(4096, 512)),
        MemoryDep(name='buf60', index=c0, size=(4096,))]
buf60.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf43', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf48', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf52', index=c0 + 4096*c1, size=(4096, 512))]
buf60.met_dependencies = [MemoryDep(name='mul_89', index=c0 + 4096*c1, size=(4096, 512))]
buf60.group.device = cuda:0
buf60.group.iteration = (4096, 512)
buf60.sizes = ([4096], [512])
class buf60_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf52', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_89', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf60', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = 
    [   MemoryDep(name='buf61', index=c0, size=(4096, 512)),
        MemoryDep(name='buf61', index=c0, size=(4096,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf43', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf48', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf52', index=c0 + 4096*c1, size=(4096, 512))]
buf61.met_dependencies = []
buf61.group.device = cuda:0
buf61.group.iteration = (4096, 512)
buf61.sizes = ([4096], [512])
class buf61_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf52', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf61', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf62: ExternKernelSchedulerNode(ExternKernelOut)
buf62.writes = [StarDep(name='buf62')]
buf62.unmet_dependencies = [StarDep(name='buf59')]
buf62.met_dependencies = [StarDep(name='permute_138')]
buf62.node.kernel = extern_kernels.mm


buf63: ExternKernelSchedulerNode(ExternKernelOut)
buf63.writes = [StarDep(name='buf63')]
buf63.unmet_dependencies = [StarDep(name='buf59')]
buf63.met_dependencies = [StarDep(name='view_231')]
buf63.node.kernel = extern_kernels.mm


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = 
    [   MemoryDep(name='buf64', index=c0, size=(16384, 128)),
        MemoryDep(name='buf64', index=c0, size=(16384,))]
buf64.unmet_dependencies = [MemoryDep(name='buf59', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf64.met_dependencies = []
buf64.group.device = cuda:0
buf64.group.iteration = (16384, 128)
buf64.sizes = ([4, 4096], [128])
class buf64_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf64', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = 
    [   MemoryDep(name='buf65', index=c0, size=(4096, 4)),
        MemoryDep(name='buf65', index=c0, size=(4096,))]
buf65.unmet_dependencies = [MemoryDep(name='buf64', index=c0 + 4096*c1, size=(4096, 4))]
buf65.met_dependencies = []
buf65.group.device = cuda:0
buf65.group.iteration = (4096, 4)
buf65.sizes = ([4096], [4])
class buf65_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf65', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = [MemoryDep(name='buf66', index=c0, size=(8388608,))]
buf66.unmet_dependencies = [MemoryDep(name='buf62', index=c0, size=(8388608,))]
buf66.met_dependencies = 
    [   MemoryDep(name='addmm_65', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_10', index=c0, size=(8388608,))]
buf66.group.device = cuda:0
buf66.group.iteration = (8388608, 1)
buf66.sizes = ([8388608], [])
class buf66_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_65', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_10', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_10', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf62', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_65', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_10', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_10', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_65', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf62', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_10', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf66', get_index_11, add_2, None)
        return store


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep(name='buf67', index=c0, size=(8388608,))]
buf67.unmet_dependencies = [MemoryDep(name='buf66', index=c0, size=(8388608,))]
buf67.met_dependencies = []
buf67.group.device = cuda:0
buf67.group.iteration = (8388608, 1)
buf67.sizes = ([8388608], [])
class buf67_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf67', get_index_1, load, None)
        return store


buf68: ExternKernelSchedulerNode(ExternKernelOut)
buf68.writes = [StarDep(name='buf68')]
buf68.unmet_dependencies = [StarDep(name='buf67')]
buf68.met_dependencies = [StarDep(name='permute_142')]
buf68.node.kernel = extern_kernels.mm


buf69: ExternKernelSchedulerNode(ExternKernelOut)
buf69.writes = [StarDep(name='buf69')]
buf69.unmet_dependencies = [StarDep(name='buf67')]
buf69.met_dependencies = [StarDep(name='view_229')]
buf69.node.kernel = extern_kernels.mm


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = 
    [   MemoryDep(name='buf70', index=c0, size=(16384, 512)),
        MemoryDep(name='buf70', index=c0, size=(16384,))]
buf70.unmet_dependencies = [MemoryDep(name='buf67', index=c0 + 16384*c1, size=(16384, 512))]
buf70.met_dependencies = []
buf70.group.device = cuda:0
buf70.group.iteration = (16384, 512)
buf70.sizes = ([16384], [512])
class buf70_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf70', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = 
    [   MemoryDep(name='buf71', index=c0, size=(512, 4096)),
        MemoryDep(name='buf71', index=c0, size=(512,))]
buf71.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0, size=(2097152,)),
        MemoryDep(name='buf68', index=c0, size=(2097152,))]
buf71.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf71.group.device = cuda:0
buf71.group.iteration = (512, 4096)
buf71.sizes = ([512], [4096])
class buf71_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf71', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = 
    [   MemoryDep(name='buf72', index=c0, size=(512, 4096)),
        MemoryDep(name='buf72', index=c0, size=(512,))]
buf72.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0, size=(2097152,)),
        MemoryDep(name='buf68', index=c0, size=(2097152,))]
buf72.met_dependencies = 
    [   MemoryDep(name='mul_83', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf72.group.device = cuda:0
buf72.group.iteration = (512, 4096)
buf72.sizes = ([512], [4096])
class buf72_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_83', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf72', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep(name='buf73', index=c0, size=(2097152,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0, size=(2097152,)),
        MemoryDep(name='buf68', index=c0, size=(2097152,)),
        MemoryDep(name='buf71', index=c0, size=(512, 4096)),
        MemoryDep(name='buf72', index=c0, size=(512, 4096))]
buf73.met_dependencies = 
    [   MemoryDep(name='div_34', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_83', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf73.group.device = cuda:0
buf73.group.iteration = (2097152, 1)
buf73.sizes = ([512, 4096], [])
class buf73_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf71', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_83', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf72', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf73', get_index_7, mul_3, None)
        return store


buf74: SchedulerNode(ComputedBuffer)
buf74.writes = 
    [   MemoryDep(name='buf74', index=c0, size=(4096, 512)),
        MemoryDep(name='buf74', index=c0, size=(4096,))]
buf74.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf68', index=c0 + 4096*c1, size=(4096, 512))]
buf74.met_dependencies = [MemoryDep(name='mul_83', index=c0 + 4096*c1, size=(4096, 512))]
buf74.group.device = cuda:0
buf74.group.iteration = (4096, 512)
buf74.sizes = ([4096], [512])
class buf74_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_83', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf74', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = 
    [   MemoryDep(name='buf75', index=c0, size=(4096, 512)),
        MemoryDep(name='buf75', index=c0, size=(4096,))]
buf75.unmet_dependencies = 
    [   MemoryDep(name='buf59', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf68', index=c0 + 4096*c1, size=(4096, 512))]
buf75.met_dependencies = []
buf75.group.device = cuda:0
buf75.group.iteration = (4096, 512)
buf75.sizes = ([4096], [512])
class buf75_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf75', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf76: ExternKernelSchedulerNode(ExternKernelOut)
buf76.writes = [StarDep(name='buf76')]
buf76.unmet_dependencies = [StarDep(name='buf73')]
buf76.met_dependencies = [StarDep(name='permute_146')]
buf76.node.kernel = extern_kernels.mm


buf77: ExternKernelSchedulerNode(ExternKernelOut)
buf77.writes = [StarDep(name='buf77')]
buf77.unmet_dependencies = [StarDep(name='buf73')]
buf77.met_dependencies = [StarDep(name='view_227')]
buf77.node.kernel = extern_kernels.mm


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = 
    [   MemoryDep(name='buf78', index=c0, size=(16384, 128)),
        MemoryDep(name='buf78', index=c0, size=(16384,))]
buf78.unmet_dependencies = [MemoryDep(name='buf73', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf78.met_dependencies = []
buf78.group.device = cuda:0
buf78.group.iteration = (16384, 128)
buf78.sizes = ([4, 4096], [128])
class buf78_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf78', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = 
    [   MemoryDep(name='buf79', index=c0, size=(4096, 4)),
        MemoryDep(name='buf79', index=c0, size=(4096,))]
buf79.unmet_dependencies = [MemoryDep(name='buf78', index=c0 + 4096*c1, size=(4096, 4))]
buf79.met_dependencies = []
buf79.group.device = cuda:0
buf79.group.iteration = (4096, 4)
buf79.sizes = ([4096], [4])
class buf79_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf79', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf80: ExternKernelSchedulerNode(ExternKernelOut)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf76')]
buf80.met_dependencies = [StarDep(name='permute_184')]
buf80.node.kernel = extern_kernels.bmm


buf81: ExternKernelSchedulerNode(ExternKernelOut)
buf81.writes = [StarDep(name='buf81')]
buf81.unmet_dependencies = [StarDep(name='buf76')]
buf81.met_dependencies = [StarDep(name='permute_185')]
buf81.node.kernel = extern_kernels.bmm


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = 
    [   MemoryDep(name='buf82', index=c0, size=(32768, 512)),
        MemoryDep(name='buf82', index=c0, size=(32768,))]
buf82.unmet_dependencies = [MemoryDep(name='buf81', index=c0, size=(16777216,))]
buf82.met_dependencies = [MemoryDep(name='div_21', index=c0, size=(16777216,))]
buf82.group.device = cuda:0
buf82.group.iteration = (32768, 512)
buf82.sizes = ([32768], [512])
class buf82_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_21', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf82', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = [MemoryDep(name='buf83', index=c0, size=(16777216,))]
buf83.unmet_dependencies = 
    [   MemoryDep(name='buf81', index=c0, size=(16777216,)),
        MemoryDep(name='buf82', index=c0, size=(32768, 512))]
buf83.met_dependencies = [MemoryDep(name='div_21', index=c0, size=(16777216,))]
buf83.group.device = cuda:0
buf83.group.iteration = (16777216, 1)
buf83.sizes = ([32768, 512], [])
class buf83_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_21', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf82', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf83', get_index_4, div, None)
        return store


buf84: ExternKernelSchedulerNode(ExternKernelOut)
buf84.writes = [StarDep(name='buf84')]
buf84.unmet_dependencies = [StarDep(name='buf83')]
buf84.met_dependencies = [StarDep(name='permute_186')]
buf84.node.kernel = extern_kernels.bmm


buf85: ExternKernelSchedulerNode(ExternKernelOut)
buf85.writes = [StarDep(name='buf85')]
buf85.unmet_dependencies = [StarDep(name='buf83')]
buf85.met_dependencies = [StarDep(name='permute_187')]
buf85.node.kernel = extern_kernels.bmm


buf86: SchedulerNode(ComputedBuffer)
buf86.writes = [MemoryDep(name='buf86', index=c0, size=(2097152,))]
buf86.unmet_dependencies = [   MemoryDep(name='buf80', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf86.met_dependencies = []
buf86.group.device = cuda:0
buf86.group.iteration = (2097152, 1)
buf86.sizes = ([512, 4096], [])
class buf86_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, load, None)
        return store


buf87: ExternKernelSchedulerNode(ExternKernelOut)
buf87.writes = [StarDep(name='buf87')]
buf87.unmet_dependencies = [StarDep(name='buf86')]
buf87.met_dependencies = [StarDep(name='permute_159')]
buf87.node.kernel = extern_kernels.mm


buf88: ExternKernelSchedulerNode(ExternKernelOut)
buf88.writes = [StarDep(name='buf88')]
buf88.unmet_dependencies = [StarDep(name='buf86')]
buf88.met_dependencies = [StarDep(name='view_212')]
buf88.node.kernel = extern_kernels.mm


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(16384, 128)),
        MemoryDep(name='buf89', index=c0, size=(16384,))]
buf89.unmet_dependencies = [MemoryDep(name='buf86', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf89.met_dependencies = []
buf89.group.device = cuda:0
buf89.group.iteration = (16384, 128)
buf89.sizes = ([4, 4096], [128])
class buf89_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = 
    [   MemoryDep(name='buf90', index=c0, size=(4096, 4)),
        MemoryDep(name='buf90', index=c0, size=(4096,))]
buf90.unmet_dependencies = [MemoryDep(name='buf89', index=c0 + 4096*c1, size=(4096, 4))]
buf90.met_dependencies = []
buf90.group.device = cuda:0
buf90.group.iteration = (4096, 4)
buf90.sizes = ([4096], [4])
class buf90_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf90', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep(name='buf91', index=c0, size=(2097152,))]
buf91.unmet_dependencies = [MemoryDep(name='buf84', index=c0, size=(2097152,))]
buf91.met_dependencies = []
buf91.group.device = cuda:0
buf91.group.iteration = (2097152, 1)
buf91.sizes = ([2097152], [])
class buf91_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf91', get_index_1, load, None)
        return store


buf92: ExternKernelSchedulerNode(ExternKernelOut)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf91')]
buf92.met_dependencies = [StarDep(name='permute_163')]
buf92.node.kernel = extern_kernels.mm


buf93: ExternKernelSchedulerNode(ExternKernelOut)
buf93.writes = [StarDep(name='buf93')]
buf93.unmet_dependencies = [StarDep(name='buf91')]
buf93.met_dependencies = [StarDep(name='view_212')]
buf93.node.kernel = extern_kernels.mm


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = 
    [   MemoryDep(name='buf94', index=c0, size=(4096, 512)),
        MemoryDep(name='buf94', index=c0, size=(4096,))]
buf94.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(2097152,))]
buf94.met_dependencies = []
buf94.group.device = cuda:0
buf94.group.iteration = (4096, 512)
buf94.sizes = ([4096], [512])
class buf94_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf94', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(2097152,))]
buf95.unmet_dependencies = [   MemoryDep(name='buf85', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf95.met_dependencies = []
buf95.group.device = cuda:0
buf95.group.iteration = (2097152, 1)
buf95.sizes = ([512, 4096], [])
class buf95_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf95', get_index_1, load, None)
        return store


buf96: ExternKernelSchedulerNode(ExternKernelOut)
buf96.writes = [StarDep(name='buf96')]
buf96.unmet_dependencies = [StarDep(name='buf95')]
buf96.met_dependencies = [StarDep(name='permute_167')]
buf96.node.kernel = extern_kernels.mm


buf97: ExternKernelSchedulerNode(ExternKernelOut)
buf97.writes = [StarDep(name='buf97')]
buf97.unmet_dependencies = [StarDep(name='buf95')]
buf97.met_dependencies = [StarDep(name='view_212')]
buf97.node.kernel = extern_kernels.mm


buf98: SchedulerNode(ComputedBuffer)
buf98.writes = 
    [   MemoryDep(name='buf98', index=c0, size=(16384, 128)),
        MemoryDep(name='buf98', index=c0, size=(16384,))]
buf98.unmet_dependencies = [MemoryDep(name='buf95', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf98.met_dependencies = []
buf98.group.device = cuda:0
buf98.group.iteration = (16384, 128)
buf98.sizes = ([4, 4096], [128])
class buf98_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf98', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = 
    [   MemoryDep(name='buf99', index=c0, size=(4096, 4)),
        MemoryDep(name='buf99', index=c0, size=(4096,))]
buf99.unmet_dependencies = [MemoryDep(name='buf98', index=c0 + 4096*c1, size=(4096, 4))]
buf99.met_dependencies = []
buf99.group.device = cuda:0
buf99.group.iteration = (4096, 4)
buf99.sizes = ([4096], [4])
class buf99_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf99', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = [MemoryDep(name='buf100', index=c0, size=(2097152,))]
buf100.unmet_dependencies = 
    [   MemoryDep(name='buf73', index=c0, size=(2097152,)),
        MemoryDep(name='buf87', index=c0, size=(2097152,)),
        MemoryDep(name='buf92', index=c0, size=(2097152,)),
        MemoryDep(name='buf96', index=c0, size=(2097152,))]
buf100.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf100.group.device = cuda:0
buf100.group.iteration = (2097152, 1)
buf100.sizes = ([512, 4096], [])
class buf100_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf96', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf100', get_index_5, mul, None)
        return store


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = 
    [   MemoryDep(name='buf101', index=c0, size=(512, 4096)),
        MemoryDep(name='buf101', index=c0, size=(512,))]
buf101.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(2097152,))]
buf101.met_dependencies = []
buf101.group.device = cuda:0
buf101.group.iteration = (512, 4096)
buf101.sizes = ([512], [4096])
class buf101_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf101', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = 
    [   MemoryDep(name='buf102', index=c0, size=(512, 4096)),
        MemoryDep(name='buf102', index=c0, size=(512,))]
buf102.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(2097152,))]
buf102.met_dependencies = [MemoryDep(name='mul_81', index=c0, size=(2097152,))]
buf102.group.device = cuda:0
buf102.group.iteration = (512, 4096)
buf102.sizes = ([512], [4096])
class buf102_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_81', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf102', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = [MemoryDep(name='buf103', index=c0, size=(2097152,))]
buf103.unmet_dependencies = 
    [   MemoryDep(name='buf100', index=c0, size=(2097152,)),
        MemoryDep(name='buf101', index=c0, size=(512, 4096)),
        MemoryDep(name='buf102', index=c0, size=(512, 4096))]
buf103.met_dependencies = 
    [   MemoryDep(name='div_36', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_81', index=c0, size=(2097152,))]
buf103.group.device = cuda:0
buf103.group.iteration = (2097152, 1)
buf103.sizes = ([512, 4096], [])
class buf103_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf100', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_81', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf102', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf103', get_index_5, mul_2, None)
        return store


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = 
    [   MemoryDep(name='buf104', index=c0, size=(4096, 512)),
        MemoryDep(name='buf104', index=c0, size=(4096,))]
buf104.unmet_dependencies = 
    [   MemoryDep(name='buf73', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf87', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf92', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf96', index=c0 + 4096*c1, size=(4096, 512))]
buf104.met_dependencies = [MemoryDep(name='mul_81', index=c0 + 4096*c1, size=(4096, 512))]
buf104.group.device = cuda:0
buf104.group.iteration = (4096, 512)
buf104.sizes = ([4096], [512])
class buf104_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf96', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_81', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf104', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = 
    [   MemoryDep(name='buf105', index=c0, size=(4096, 512)),
        MemoryDep(name='buf105', index=c0, size=(4096,))]
buf105.unmet_dependencies = 
    [   MemoryDep(name='buf73', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf87', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf92', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf96', index=c0 + 4096*c1, size=(4096, 512))]
buf105.met_dependencies = []
buf105.group.device = cuda:0
buf105.group.iteration = (4096, 512)
buf105.sizes = ([4096], [512])
class buf105_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf96', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf105', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf106: ExternKernelSchedulerNode(ExternKernelOut)
buf106.writes = [StarDep(name='buf106')]
buf106.unmet_dependencies = [StarDep(name='buf103')]
buf106.met_dependencies = [StarDep(name='permute_138')]
buf106.node.kernel = extern_kernels.mm


buf107: ExternKernelSchedulerNode(ExternKernelOut)
buf107.writes = [StarDep(name='buf107')]
buf107.unmet_dependencies = [StarDep(name='buf103')]
buf107.met_dependencies = [StarDep(name='view_210')]
buf107.node.kernel = extern_kernels.mm


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = 
    [   MemoryDep(name='buf108', index=c0, size=(16384, 128)),
        MemoryDep(name='buf108', index=c0, size=(16384,))]
buf108.unmet_dependencies = [MemoryDep(name='buf103', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf108.met_dependencies = []
buf108.group.device = cuda:0
buf108.group.iteration = (16384, 128)
buf108.sizes = ([4, 4096], [128])
class buf108_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf108', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = 
    [   MemoryDep(name='buf109', index=c0, size=(4096, 4)),
        MemoryDep(name='buf109', index=c0, size=(4096,))]
buf109.unmet_dependencies = [MemoryDep(name='buf108', index=c0 + 4096*c1, size=(4096, 4))]
buf109.met_dependencies = []
buf109.group.device = cuda:0
buf109.group.iteration = (4096, 4)
buf109.sizes = ([4096], [4])
class buf109_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf109', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf110: SchedulerNode(ComputedBuffer)
buf110.writes = [MemoryDep(name='buf110', index=c0, size=(8388608,))]
buf110.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(8388608,))]
buf110.met_dependencies = 
    [   MemoryDep(name='addmm_59', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_9', index=c0, size=(8388608,))]
buf110.group.device = cuda:0
buf110.group.iteration = (8388608, 1)
buf110.sizes = ([8388608], [])
class buf110_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_59', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_9', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_9', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf106', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_59', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_9', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_9', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_59', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf106', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_9', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf110', get_index_11, add_2, None)
        return store


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep(name='buf111', index=c0, size=(8388608,))]
buf111.unmet_dependencies = [MemoryDep(name='buf110', index=c0, size=(8388608,))]
buf111.met_dependencies = []
buf111.group.device = cuda:0
buf111.group.iteration = (8388608, 1)
buf111.sizes = ([8388608], [])
class buf111_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf111', get_index_1, load, None)
        return store


buf112: ExternKernelSchedulerNode(ExternKernelOut)
buf112.writes = [StarDep(name='buf112')]
buf112.unmet_dependencies = [StarDep(name='buf111')]
buf112.met_dependencies = [StarDep(name='permute_142')]
buf112.node.kernel = extern_kernels.mm


buf113: ExternKernelSchedulerNode(ExternKernelOut)
buf113.writes = [StarDep(name='buf113')]
buf113.unmet_dependencies = [StarDep(name='buf111')]
buf113.met_dependencies = [StarDep(name='view_208')]
buf113.node.kernel = extern_kernels.mm


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = 
    [   MemoryDep(name='buf114', index=c0, size=(16384, 512)),
        MemoryDep(name='buf114', index=c0, size=(16384,))]
buf114.unmet_dependencies = [MemoryDep(name='buf111', index=c0 + 16384*c1, size=(16384, 512))]
buf114.met_dependencies = []
buf114.group.device = cuda:0
buf114.group.iteration = (16384, 512)
buf114.sizes = ([16384], [512])
class buf114_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf114', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = 
    [   MemoryDep(name='buf115', index=c0, size=(512, 4096)),
        MemoryDep(name='buf115', index=c0, size=(512,))]
buf115.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,))]
buf115.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf115.group.device = cuda:0
buf115.group.iteration = (512, 4096)
buf115.sizes = ([512], [4096])
class buf115_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf115', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = 
    [   MemoryDep(name='buf116', index=c0, size=(512, 4096)),
        MemoryDep(name='buf116', index=c0, size=(512,))]
buf116.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,))]
buf116.met_dependencies = 
    [   MemoryDep(name='mul_75', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf116.group.device = cuda:0
buf116.group.iteration = (512, 4096)
buf116.sizes = ([512], [4096])
class buf116_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_75', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf116', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(2097152,))]
buf117.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,)),
        MemoryDep(name='buf115', index=c0, size=(512, 4096)),
        MemoryDep(name='buf116', index=c0, size=(512, 4096))]
buf117.met_dependencies = 
    [   MemoryDep(name='div_37', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_75', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf117.group.device = cuda:0
buf117.group.iteration = (2097152, 1)
buf117.sizes = ([512, 4096], [])
class buf117_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf103', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf112', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf115', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_75', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf116', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf117', get_index_7, mul_3, None)
        return store


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = 
    [   MemoryDep(name='buf118', index=c0, size=(4096, 512)),
        MemoryDep(name='buf118', index=c0, size=(4096,))]
buf118.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf112', index=c0 + 4096*c1, size=(4096, 512))]
buf118.met_dependencies = [MemoryDep(name='mul_75', index=c0 + 4096*c1, size=(4096, 512))]
buf118.group.device = cuda:0
buf118.group.iteration = (4096, 512)
buf118.sizes = ([4096], [512])
class buf118_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_75', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf118', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = 
    [   MemoryDep(name='buf119', index=c0, size=(4096, 512)),
        MemoryDep(name='buf119', index=c0, size=(4096,))]
buf119.unmet_dependencies = 
    [   MemoryDep(name='buf103', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf112', index=c0 + 4096*c1, size=(4096, 512))]
buf119.met_dependencies = []
buf119.group.device = cuda:0
buf119.group.iteration = (4096, 512)
buf119.sizes = ([4096], [512])
class buf119_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf119', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf120: ExternKernelSchedulerNode(ExternKernelOut)
buf120.writes = [StarDep(name='buf120')]
buf120.unmet_dependencies = [StarDep(name='buf117')]
buf120.met_dependencies = [StarDep(name='permute_146')]
buf120.node.kernel = extern_kernels.mm


buf121: ExternKernelSchedulerNode(ExternKernelOut)
buf121.writes = [StarDep(name='buf121')]
buf121.unmet_dependencies = [StarDep(name='buf117')]
buf121.met_dependencies = [StarDep(name='view_206')]
buf121.node.kernel = extern_kernels.mm


buf122: SchedulerNode(ComputedBuffer)
buf122.writes = 
    [   MemoryDep(name='buf122', index=c0, size=(16384, 128)),
        MemoryDep(name='buf122', index=c0, size=(16384,))]
buf122.unmet_dependencies = [MemoryDep(name='buf117', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf122.met_dependencies = []
buf122.group.device = cuda:0
buf122.group.iteration = (16384, 128)
buf122.sizes = ([4, 4096], [128])
class buf122_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf122', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = 
    [   MemoryDep(name='buf123', index=c0, size=(4096, 4)),
        MemoryDep(name='buf123', index=c0, size=(4096,))]
buf123.unmet_dependencies = [MemoryDep(name='buf122', index=c0 + 4096*c1, size=(4096, 4))]
buf123.met_dependencies = []
buf123.group.device = cuda:0
buf123.group.iteration = (4096, 4)
buf123.sizes = ([4096], [4])
class buf123_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf123', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf124: ExternKernelSchedulerNode(ExternKernelOut)
buf124.writes = [StarDep(name='buf124')]
buf124.unmet_dependencies = [StarDep(name='buf120')]
buf124.met_dependencies = [StarDep(name='permute_217')]
buf124.node.kernel = extern_kernels.bmm


buf125: ExternKernelSchedulerNode(ExternKernelOut)
buf125.writes = [StarDep(name='buf125')]
buf125.unmet_dependencies = [StarDep(name='buf120')]
buf125.met_dependencies = [StarDep(name='permute_218')]
buf125.node.kernel = extern_kernels.bmm


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = 
    [   MemoryDep(name='buf126', index=c0, size=(32768, 512)),
        MemoryDep(name='buf126', index=c0, size=(32768,))]
buf126.unmet_dependencies = [MemoryDep(name='buf125', index=c0, size=(16777216,))]
buf126.met_dependencies = [MemoryDep(name='div_19', index=c0, size=(16777216,))]
buf126.group.device = cuda:0
buf126.group.iteration = (32768, 512)
buf126.sizes = ([32768], [512])
class buf126_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_19', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf126', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(16777216,))]
buf127.unmet_dependencies = 
    [   MemoryDep(name='buf125', index=c0, size=(16777216,)),
        MemoryDep(name='buf126', index=c0, size=(32768, 512))]
buf127.met_dependencies = [MemoryDep(name='div_19', index=c0, size=(16777216,))]
buf127.group.device = cuda:0
buf127.group.iteration = (16777216, 1)
buf127.sizes = ([32768, 512], [])
class buf127_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_19', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_19', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf126', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf127', get_index_4, div, None)
        return store


buf128: ExternKernelSchedulerNode(ExternKernelOut)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf127')]
buf128.met_dependencies = [StarDep(name='permute_219')]
buf128.node.kernel = extern_kernels.bmm


buf129: ExternKernelSchedulerNode(ExternKernelOut)
buf129.writes = [StarDep(name='buf129')]
buf129.unmet_dependencies = [StarDep(name='buf127')]
buf129.met_dependencies = [StarDep(name='permute_220')]
buf129.node.kernel = extern_kernels.bmm


buf130: SchedulerNode(ComputedBuffer)
buf130.writes = [MemoryDep(name='buf130', index=c0, size=(2097152,))]
buf130.unmet_dependencies = [   MemoryDep(name='buf124', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf130.met_dependencies = []
buf130.group.device = cuda:0
buf130.group.iteration = (2097152, 1)
buf130.sizes = ([512, 4096], [])
class buf130_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf130', get_index_1, load, None)
        return store


buf131: ExternKernelSchedulerNode(ExternKernelOut)
buf131.writes = [StarDep(name='buf131')]
buf131.unmet_dependencies = [StarDep(name='buf130')]
buf131.met_dependencies = [StarDep(name='permute_159')]
buf131.node.kernel = extern_kernels.mm


buf132: ExternKernelSchedulerNode(ExternKernelOut)
buf132.writes = [StarDep(name='buf132')]
buf132.unmet_dependencies = [StarDep(name='buf130')]
buf132.met_dependencies = [StarDep(name='view_191')]
buf132.node.kernel = extern_kernels.mm


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = 
    [   MemoryDep(name='buf133', index=c0, size=(16384, 128)),
        MemoryDep(name='buf133', index=c0, size=(16384,))]
buf133.unmet_dependencies = [MemoryDep(name='buf130', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf133.met_dependencies = []
buf133.group.device = cuda:0
buf133.group.iteration = (16384, 128)
buf133.sizes = ([4, 4096], [128])
class buf133_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf133', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = 
    [   MemoryDep(name='buf134', index=c0, size=(4096, 4)),
        MemoryDep(name='buf134', index=c0, size=(4096,))]
buf134.unmet_dependencies = [MemoryDep(name='buf133', index=c0 + 4096*c1, size=(4096, 4))]
buf134.met_dependencies = []
buf134.group.device = cuda:0
buf134.group.iteration = (4096, 4)
buf134.sizes = ([4096], [4])
class buf134_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf134', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(2097152,))]
buf135.unmet_dependencies = [MemoryDep(name='buf128', index=c0, size=(2097152,))]
buf135.met_dependencies = []
buf135.group.device = cuda:0
buf135.group.iteration = (2097152, 1)
buf135.sizes = ([2097152], [])
class buf135_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf135', get_index_1, load, None)
        return store


buf136: ExternKernelSchedulerNode(ExternKernelOut)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf135')]
buf136.met_dependencies = [StarDep(name='permute_163')]
buf136.node.kernel = extern_kernels.mm


buf137: ExternKernelSchedulerNode(ExternKernelOut)
buf137.writes = [StarDep(name='buf137')]
buf137.unmet_dependencies = [StarDep(name='buf135')]
buf137.met_dependencies = [StarDep(name='view_191')]
buf137.node.kernel = extern_kernels.mm


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = 
    [   MemoryDep(name='buf138', index=c0, size=(4096, 512)),
        MemoryDep(name='buf138', index=c0, size=(4096,))]
buf138.unmet_dependencies = [MemoryDep(name='buf135', index=c0, size=(2097152,))]
buf138.met_dependencies = []
buf138.group.device = cuda:0
buf138.group.iteration = (4096, 512)
buf138.sizes = ([4096], [512])
class buf138_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf138', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep(name='buf139', index=c0, size=(2097152,))]
buf139.unmet_dependencies = [   MemoryDep(name='buf129', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf139.met_dependencies = []
buf139.group.device = cuda:0
buf139.group.iteration = (2097152, 1)
buf139.sizes = ([512, 4096], [])
class buf139_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf139', get_index_1, load, None)
        return store


buf140: ExternKernelSchedulerNode(ExternKernelOut)
buf140.writes = [StarDep(name='buf140')]
buf140.unmet_dependencies = [StarDep(name='buf139')]
buf140.met_dependencies = [StarDep(name='permute_167')]
buf140.node.kernel = extern_kernels.mm


buf141: ExternKernelSchedulerNode(ExternKernelOut)
buf141.writes = [StarDep(name='buf141')]
buf141.unmet_dependencies = [StarDep(name='buf139')]
buf141.met_dependencies = [StarDep(name='view_191')]
buf141.node.kernel = extern_kernels.mm


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = 
    [   MemoryDep(name='buf142', index=c0, size=(16384, 128)),
        MemoryDep(name='buf142', index=c0, size=(16384,))]
buf142.unmet_dependencies = [MemoryDep(name='buf139', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf142.met_dependencies = []
buf142.group.device = cuda:0
buf142.group.iteration = (16384, 128)
buf142.sizes = ([4, 4096], [128])
class buf142_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf142', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = 
    [   MemoryDep(name='buf143', index=c0, size=(4096, 4)),
        MemoryDep(name='buf143', index=c0, size=(4096,))]
buf143.unmet_dependencies = [MemoryDep(name='buf142', index=c0 + 4096*c1, size=(4096, 4))]
buf143.met_dependencies = []
buf143.group.device = cuda:0
buf143.group.iteration = (4096, 4)
buf143.sizes = ([4096], [4])
class buf143_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf143', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = [MemoryDep(name='buf144', index=c0, size=(2097152,))]
buf144.unmet_dependencies = 
    [   MemoryDep(name='buf117', index=c0, size=(2097152,)),
        MemoryDep(name='buf131', index=c0, size=(2097152,)),
        MemoryDep(name='buf136', index=c0, size=(2097152,)),
        MemoryDep(name='buf140', index=c0, size=(2097152,))]
buf144.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf144.group.device = cuda:0
buf144.group.iteration = (2097152, 1)
buf144.sizes = ([512, 4096], [])
class buf144_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf140', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf144', get_index_5, mul, None)
        return store


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = 
    [   MemoryDep(name='buf145', index=c0, size=(512, 4096)),
        MemoryDep(name='buf145', index=c0, size=(512,))]
buf145.unmet_dependencies = [MemoryDep(name='buf144', index=c0, size=(2097152,))]
buf145.met_dependencies = []
buf145.group.device = cuda:0
buf145.group.iteration = (512, 4096)
buf145.sizes = ([512], [4096])
class buf145_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf145', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf146: SchedulerNode(ComputedBuffer)
buf146.writes = 
    [   MemoryDep(name='buf146', index=c0, size=(512, 4096)),
        MemoryDep(name='buf146', index=c0, size=(512,))]
buf146.unmet_dependencies = [MemoryDep(name='buf144', index=c0, size=(2097152,))]
buf146.met_dependencies = [MemoryDep(name='mul_73', index=c0, size=(2097152,))]
buf146.group.device = cuda:0
buf146.group.iteration = (512, 4096)
buf146.sizes = ([512], [4096])
class buf146_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_73', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf146', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = [MemoryDep(name='buf147', index=c0, size=(2097152,))]
buf147.unmet_dependencies = 
    [   MemoryDep(name='buf144', index=c0, size=(2097152,)),
        MemoryDep(name='buf145', index=c0, size=(512, 4096)),
        MemoryDep(name='buf146', index=c0, size=(512, 4096))]
buf147.met_dependencies = 
    [   MemoryDep(name='div_39', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_73', index=c0, size=(2097152,))]
buf147.group.device = cuda:0
buf147.group.iteration = (2097152, 1)
buf147.sizes = ([512, 4096], [])
class buf147_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_73', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf146', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf147', get_index_5, mul_2, None)
        return store


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(4096, 512)),
        MemoryDep(name='buf148', index=c0, size=(4096,))]
buf148.unmet_dependencies = 
    [   MemoryDep(name='buf117', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf131', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf136', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf140', index=c0 + 4096*c1, size=(4096, 512))]
buf148.met_dependencies = [MemoryDep(name='mul_73', index=c0 + 4096*c1, size=(4096, 512))]
buf148.group.device = cuda:0
buf148.group.iteration = (4096, 512)
buf148.sizes = ([4096], [512])
class buf148_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf140', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_73', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = 
    [   MemoryDep(name='buf149', index=c0, size=(4096, 512)),
        MemoryDep(name='buf149', index=c0, size=(4096,))]
buf149.unmet_dependencies = 
    [   MemoryDep(name='buf117', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf131', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf136', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf140', index=c0 + 4096*c1, size=(4096, 512))]
buf149.met_dependencies = []
buf149.group.device = cuda:0
buf149.group.iteration = (4096, 512)
buf149.sizes = ([4096], [512])
class buf149_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf140', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf149', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf150: ExternKernelSchedulerNode(ExternKernelOut)
buf150.writes = [StarDep(name='buf150')]
buf150.unmet_dependencies = [StarDep(name='buf147')]
buf150.met_dependencies = [StarDep(name='permute_138')]
buf150.node.kernel = extern_kernels.mm


buf151: ExternKernelSchedulerNode(ExternKernelOut)
buf151.writes = [StarDep(name='buf151')]
buf151.unmet_dependencies = [StarDep(name='buf147')]
buf151.met_dependencies = [StarDep(name='view_189')]
buf151.node.kernel = extern_kernels.mm


buf152: SchedulerNode(ComputedBuffer)
buf152.writes = 
    [   MemoryDep(name='buf152', index=c0, size=(16384, 128)),
        MemoryDep(name='buf152', index=c0, size=(16384,))]
buf152.unmet_dependencies = [MemoryDep(name='buf147', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf152.met_dependencies = []
buf152.group.device = cuda:0
buf152.group.iteration = (16384, 128)
buf152.sizes = ([4, 4096], [128])
class buf152_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf152', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf153: SchedulerNode(ComputedBuffer)
buf153.writes = 
    [   MemoryDep(name='buf153', index=c0, size=(4096, 4)),
        MemoryDep(name='buf153', index=c0, size=(4096,))]
buf153.unmet_dependencies = [MemoryDep(name='buf152', index=c0 + 4096*c1, size=(4096, 4))]
buf153.met_dependencies = []
buf153.group.device = cuda:0
buf153.group.iteration = (4096, 4)
buf153.sizes = ([4096], [4])
class buf153_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf153', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = [MemoryDep(name='buf154', index=c0, size=(8388608,))]
buf154.unmet_dependencies = [MemoryDep(name='buf150', index=c0, size=(8388608,))]
buf154.met_dependencies = 
    [   MemoryDep(name='addmm_53', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_8', index=c0, size=(8388608,))]
buf154.group.device = cuda:0
buf154.group.iteration = (8388608, 1)
buf154.sizes = ([8388608], [])
class buf154_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_53', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_8', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_8', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf150', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_53', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_8', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_8', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_53', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf150', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_8', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf154', get_index_11, add_2, None)
        return store


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = [MemoryDep(name='buf155', index=c0, size=(8388608,))]
buf155.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(8388608,))]
buf155.met_dependencies = []
buf155.group.device = cuda:0
buf155.group.iteration = (8388608, 1)
buf155.sizes = ([8388608], [])
class buf155_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf155', get_index_1, load, None)
        return store


buf156: ExternKernelSchedulerNode(ExternKernelOut)
buf156.writes = [StarDep(name='buf156')]
buf156.unmet_dependencies = [StarDep(name='buf155')]
buf156.met_dependencies = [StarDep(name='permute_142')]
buf156.node.kernel = extern_kernels.mm


buf157: ExternKernelSchedulerNode(ExternKernelOut)
buf157.writes = [StarDep(name='buf157')]
buf157.unmet_dependencies = [StarDep(name='buf155')]
buf157.met_dependencies = [StarDep(name='view_187')]
buf157.node.kernel = extern_kernels.mm


buf158: SchedulerNode(ComputedBuffer)
buf158.writes = 
    [   MemoryDep(name='buf158', index=c0, size=(16384, 512)),
        MemoryDep(name='buf158', index=c0, size=(16384,))]
buf158.unmet_dependencies = [MemoryDep(name='buf155', index=c0 + 16384*c1, size=(16384, 512))]
buf158.met_dependencies = []
buf158.group.device = cuda:0
buf158.group.iteration = (16384, 512)
buf158.sizes = ([16384], [512])
class buf158_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf158', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = 
    [   MemoryDep(name='buf159', index=c0, size=(512, 4096)),
        MemoryDep(name='buf159', index=c0, size=(512,))]
buf159.unmet_dependencies = 
    [   MemoryDep(name='buf147', index=c0, size=(2097152,)),
        MemoryDep(name='buf156', index=c0, size=(2097152,))]
buf159.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf159.group.device = cuda:0
buf159.group.iteration = (512, 4096)
buf159.sizes = ([512], [4096])
class buf159_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf159', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf160: SchedulerNode(ComputedBuffer)
buf160.writes = 
    [   MemoryDep(name='buf160', index=c0, size=(512, 4096)),
        MemoryDep(name='buf160', index=c0, size=(512,))]
buf160.unmet_dependencies = 
    [   MemoryDep(name='buf147', index=c0, size=(2097152,)),
        MemoryDep(name='buf156', index=c0, size=(2097152,))]
buf160.met_dependencies = 
    [   MemoryDep(name='mul_67', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf160.group.device = cuda:0
buf160.group.iteration = (512, 4096)
buf160.sizes = ([512], [4096])
class buf160_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_67', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf160', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = [MemoryDep(name='buf161', index=c0, size=(2097152,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf147', index=c0, size=(2097152,)),
        MemoryDep(name='buf156', index=c0, size=(2097152,)),
        MemoryDep(name='buf159', index=c0, size=(512, 4096)),
        MemoryDep(name='buf160', index=c0, size=(512, 4096))]
buf161.met_dependencies = 
    [   MemoryDep(name='div_40', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_67', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf161.group.device = cuda:0
buf161.group.iteration = (2097152, 1)
buf161.sizes = ([512, 4096], [])
class buf161_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf159', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_67', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf160', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf161', get_index_7, mul_3, None)
        return store


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = 
    [   MemoryDep(name='buf162', index=c0, size=(4096, 512)),
        MemoryDep(name='buf162', index=c0, size=(4096,))]
buf162.unmet_dependencies = 
    [   MemoryDep(name='buf147', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf156', index=c0 + 4096*c1, size=(4096, 512))]
buf162.met_dependencies = [MemoryDep(name='mul_67', index=c0 + 4096*c1, size=(4096, 512))]
buf162.group.device = cuda:0
buf162.group.iteration = (4096, 512)
buf162.sizes = ([4096], [512])
class buf162_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_67', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf162', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = 
    [   MemoryDep(name='buf163', index=c0, size=(4096, 512)),
        MemoryDep(name='buf163', index=c0, size=(4096,))]
buf163.unmet_dependencies = 
    [   MemoryDep(name='buf147', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf156', index=c0 + 4096*c1, size=(4096, 512))]
buf163.met_dependencies = []
buf163.group.device = cuda:0
buf163.group.iteration = (4096, 512)
buf163.sizes = ([4096], [512])
class buf163_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf163', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf164: ExternKernelSchedulerNode(ExternKernelOut)
buf164.writes = [StarDep(name='buf164')]
buf164.unmet_dependencies = [StarDep(name='buf161')]
buf164.met_dependencies = [StarDep(name='permute_146')]
buf164.node.kernel = extern_kernels.mm


buf165: ExternKernelSchedulerNode(ExternKernelOut)
buf165.writes = [StarDep(name='buf165')]
buf165.unmet_dependencies = [StarDep(name='buf161')]
buf165.met_dependencies = [StarDep(name='view_185')]
buf165.node.kernel = extern_kernels.mm


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = 
    [   MemoryDep(name='buf166', index=c0, size=(16384, 128)),
        MemoryDep(name='buf166', index=c0, size=(16384,))]
buf166.unmet_dependencies = [MemoryDep(name='buf161', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf166.met_dependencies = []
buf166.group.device = cuda:0
buf166.group.iteration = (16384, 128)
buf166.sizes = ([4, 4096], [128])
class buf166_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf166', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = 
    [   MemoryDep(name='buf167', index=c0, size=(4096, 4)),
        MemoryDep(name='buf167', index=c0, size=(4096,))]
buf167.unmet_dependencies = [MemoryDep(name='buf166', index=c0 + 4096*c1, size=(4096, 4))]
buf167.met_dependencies = []
buf167.group.device = cuda:0
buf167.group.iteration = (4096, 4)
buf167.sizes = ([4096], [4])
class buf167_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf167', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf168: ExternKernelSchedulerNode(ExternKernelOut)
buf168.writes = [StarDep(name='buf168')]
buf168.unmet_dependencies = [StarDep(name='buf164')]
buf168.met_dependencies = [StarDep(name='permute_250')]
buf168.node.kernel = extern_kernels.bmm


buf169: ExternKernelSchedulerNode(ExternKernelOut)
buf169.writes = [StarDep(name='buf169')]
buf169.unmet_dependencies = [StarDep(name='buf164')]
buf169.met_dependencies = [StarDep(name='permute_251')]
buf169.node.kernel = extern_kernels.bmm


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = 
    [   MemoryDep(name='buf170', index=c0, size=(32768, 512)),
        MemoryDep(name='buf170', index=c0, size=(32768,))]
buf170.unmet_dependencies = [MemoryDep(name='buf169', index=c0, size=(16777216,))]
buf170.met_dependencies = [MemoryDep(name='div_17', index=c0, size=(16777216,))]
buf170.group.device = cuda:0
buf170.group.iteration = (32768, 512)
buf170.sizes = ([32768], [512])
class buf170_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_17', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf170', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = [MemoryDep(name='buf171', index=c0, size=(16777216,))]
buf171.unmet_dependencies = 
    [   MemoryDep(name='buf169', index=c0, size=(16777216,)),
        MemoryDep(name='buf170', index=c0, size=(32768, 512))]
buf171.met_dependencies = [MemoryDep(name='div_17', index=c0, size=(16777216,))]
buf171.group.device = cuda:0
buf171.group.iteration = (16777216, 1)
buf171.sizes = ([32768, 512], [])
class buf171_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_17', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_17', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf170', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf171', get_index_4, div, None)
        return store


buf172: ExternKernelSchedulerNode(ExternKernelOut)
buf172.writes = [StarDep(name='buf172')]
buf172.unmet_dependencies = [StarDep(name='buf171')]
buf172.met_dependencies = [StarDep(name='permute_252')]
buf172.node.kernel = extern_kernels.bmm


buf173: ExternKernelSchedulerNode(ExternKernelOut)
buf173.writes = [StarDep(name='buf173')]
buf173.unmet_dependencies = [StarDep(name='buf171')]
buf173.met_dependencies = [StarDep(name='permute_253')]
buf173.node.kernel = extern_kernels.bmm


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = [MemoryDep(name='buf174', index=c0, size=(2097152,))]
buf174.unmet_dependencies = [   MemoryDep(name='buf168', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf174.met_dependencies = []
buf174.group.device = cuda:0
buf174.group.iteration = (2097152, 1)
buf174.sizes = ([512, 4096], [])
class buf174_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store


buf175: ExternKernelSchedulerNode(ExternKernelOut)
buf175.writes = [StarDep(name='buf175')]
buf175.unmet_dependencies = [StarDep(name='buf174')]
buf175.met_dependencies = [StarDep(name='permute_159')]
buf175.node.kernel = extern_kernels.mm


buf176: ExternKernelSchedulerNode(ExternKernelOut)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf174')]
buf176.met_dependencies = [StarDep(name='view_170')]
buf176.node.kernel = extern_kernels.mm


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = 
    [   MemoryDep(name='buf177', index=c0, size=(16384, 128)),
        MemoryDep(name='buf177', index=c0, size=(16384,))]
buf177.unmet_dependencies = [MemoryDep(name='buf174', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf177.met_dependencies = []
buf177.group.device = cuda:0
buf177.group.iteration = (16384, 128)
buf177.sizes = ([4, 4096], [128])
class buf177_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf177', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = 
    [   MemoryDep(name='buf178', index=c0, size=(4096, 4)),
        MemoryDep(name='buf178', index=c0, size=(4096,))]
buf178.unmet_dependencies = [MemoryDep(name='buf177', index=c0 + 4096*c1, size=(4096, 4))]
buf178.met_dependencies = []
buf178.group.device = cuda:0
buf178.group.iteration = (4096, 4)
buf178.sizes = ([4096], [4])
class buf178_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf178', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = [MemoryDep(name='buf179', index=c0, size=(2097152,))]
buf179.unmet_dependencies = [MemoryDep(name='buf172', index=c0, size=(2097152,))]
buf179.met_dependencies = []
buf179.group.device = cuda:0
buf179.group.iteration = (2097152, 1)
buf179.sizes = ([2097152], [])
class buf179_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf179', get_index_1, load, None)
        return store


buf180: ExternKernelSchedulerNode(ExternKernelOut)
buf180.writes = [StarDep(name='buf180')]
buf180.unmet_dependencies = [StarDep(name='buf179')]
buf180.met_dependencies = [StarDep(name='permute_163')]
buf180.node.kernel = extern_kernels.mm


buf181: ExternKernelSchedulerNode(ExternKernelOut)
buf181.writes = [StarDep(name='buf181')]
buf181.unmet_dependencies = [StarDep(name='buf179')]
buf181.met_dependencies = [StarDep(name='view_170')]
buf181.node.kernel = extern_kernels.mm


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = 
    [   MemoryDep(name='buf182', index=c0, size=(4096, 512)),
        MemoryDep(name='buf182', index=c0, size=(4096,))]
buf182.unmet_dependencies = [MemoryDep(name='buf179', index=c0, size=(2097152,))]
buf182.met_dependencies = []
buf182.group.device = cuda:0
buf182.group.iteration = (4096, 512)
buf182.sizes = ([4096], [512])
class buf182_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf182', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = [MemoryDep(name='buf183', index=c0, size=(2097152,))]
buf183.unmet_dependencies = [   MemoryDep(name='buf173', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf183.met_dependencies = []
buf183.group.device = cuda:0
buf183.group.iteration = (2097152, 1)
buf183.sizes = ([512, 4096], [])
class buf183_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


buf184: ExternKernelSchedulerNode(ExternKernelOut)
buf184.writes = [StarDep(name='buf184')]
buf184.unmet_dependencies = [StarDep(name='buf183')]
buf184.met_dependencies = [StarDep(name='permute_167')]
buf184.node.kernel = extern_kernels.mm


buf185: ExternKernelSchedulerNode(ExternKernelOut)
buf185.writes = [StarDep(name='buf185')]
buf185.unmet_dependencies = [StarDep(name='buf183')]
buf185.met_dependencies = [StarDep(name='view_170')]
buf185.node.kernel = extern_kernels.mm


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = 
    [   MemoryDep(name='buf186', index=c0, size=(16384, 128)),
        MemoryDep(name='buf186', index=c0, size=(16384,))]
buf186.unmet_dependencies = [MemoryDep(name='buf183', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf186.met_dependencies = []
buf186.group.device = cuda:0
buf186.group.iteration = (16384, 128)
buf186.sizes = ([4, 4096], [128])
class buf186_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf186', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = 
    [   MemoryDep(name='buf187', index=c0, size=(4096, 4)),
        MemoryDep(name='buf187', index=c0, size=(4096,))]
buf187.unmet_dependencies = [MemoryDep(name='buf186', index=c0 + 4096*c1, size=(4096, 4))]
buf187.met_dependencies = []
buf187.group.device = cuda:0
buf187.group.iteration = (4096, 4)
buf187.sizes = ([4096], [4])
class buf187_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf187', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf188: SchedulerNode(ComputedBuffer)
buf188.writes = [MemoryDep(name='buf188', index=c0, size=(2097152,))]
buf188.unmet_dependencies = 
    [   MemoryDep(name='buf161', index=c0, size=(2097152,)),
        MemoryDep(name='buf175', index=c0, size=(2097152,)),
        MemoryDep(name='buf180', index=c0, size=(2097152,)),
        MemoryDep(name='buf184', index=c0, size=(2097152,))]
buf188.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf188.group.device = cuda:0
buf188.group.iteration = (2097152, 1)
buf188.sizes = ([512, 4096], [])
class buf188_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, mul, None)
        return store


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = 
    [   MemoryDep(name='buf189', index=c0, size=(512, 4096)),
        MemoryDep(name='buf189', index=c0, size=(512,))]
buf189.unmet_dependencies = [MemoryDep(name='buf188', index=c0, size=(2097152,))]
buf189.met_dependencies = []
buf189.group.device = cuda:0
buf189.group.iteration = (512, 4096)
buf189.sizes = ([512], [4096])
class buf189_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf189', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = 
    [   MemoryDep(name='buf190', index=c0, size=(512, 4096)),
        MemoryDep(name='buf190', index=c0, size=(512,))]
buf190.unmet_dependencies = [MemoryDep(name='buf188', index=c0, size=(2097152,))]
buf190.met_dependencies = [MemoryDep(name='mul_65', index=c0, size=(2097152,))]
buf190.group.device = cuda:0
buf190.group.iteration = (512, 4096)
buf190.sizes = ([512], [4096])
class buf190_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_65', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf190', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(2097152,))]
buf191.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(2097152,)),
        MemoryDep(name='buf189', index=c0, size=(512, 4096)),
        MemoryDep(name='buf190', index=c0, size=(512, 4096))]
buf191.met_dependencies = 
    [   MemoryDep(name='div_42', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_65', index=c0, size=(2097152,))]
buf191.group.device = cuda:0
buf191.group.iteration = (2097152, 1)
buf191.sizes = ([512, 4096], [])
class buf191_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_65', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf190', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf191', get_index_5, mul_2, None)
        return store


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = 
    [   MemoryDep(name='buf192', index=c0, size=(4096, 512)),
        MemoryDep(name='buf192', index=c0, size=(4096,))]
buf192.unmet_dependencies = 
    [   MemoryDep(name='buf161', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf175', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf180', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf184', index=c0 + 4096*c1, size=(4096, 512))]
buf192.met_dependencies = [MemoryDep(name='mul_65', index=c0 + 4096*c1, size=(4096, 512))]
buf192.group.device = cuda:0
buf192.group.iteration = (4096, 512)
buf192.sizes = ([4096], [512])
class buf192_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_65', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf192', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = 
    [   MemoryDep(name='buf193', index=c0, size=(4096, 512)),
        MemoryDep(name='buf193', index=c0, size=(4096,))]
buf193.unmet_dependencies = 
    [   MemoryDep(name='buf161', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf175', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf180', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf184', index=c0 + 4096*c1, size=(4096, 512))]
buf193.met_dependencies = []
buf193.group.device = cuda:0
buf193.group.iteration = (4096, 512)
buf193.sizes = ([4096], [512])
class buf193_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf193', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf194: ExternKernelSchedulerNode(ExternKernelOut)
buf194.writes = [StarDep(name='buf194')]
buf194.unmet_dependencies = [StarDep(name='buf191')]
buf194.met_dependencies = [StarDep(name='permute_138')]
buf194.node.kernel = extern_kernels.mm


buf195: ExternKernelSchedulerNode(ExternKernelOut)
buf195.writes = [StarDep(name='buf195')]
buf195.unmet_dependencies = [StarDep(name='buf191')]
buf195.met_dependencies = [StarDep(name='view_168')]
buf195.node.kernel = extern_kernels.mm


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = 
    [   MemoryDep(name='buf196', index=c0, size=(16384, 128)),
        MemoryDep(name='buf196', index=c0, size=(16384,))]
buf196.unmet_dependencies = [MemoryDep(name='buf191', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf196.met_dependencies = []
buf196.group.device = cuda:0
buf196.group.iteration = (16384, 128)
buf196.sizes = ([4, 4096], [128])
class buf196_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf196', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = 
    [   MemoryDep(name='buf197', index=c0, size=(4096, 4)),
        MemoryDep(name='buf197', index=c0, size=(4096,))]
buf197.unmet_dependencies = [MemoryDep(name='buf196', index=c0 + 4096*c1, size=(4096, 4))]
buf197.met_dependencies = []
buf197.group.device = cuda:0
buf197.group.iteration = (4096, 4)
buf197.sizes = ([4096], [4])
class buf197_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf197', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = [MemoryDep(name='buf198', index=c0, size=(8388608,))]
buf198.unmet_dependencies = [MemoryDep(name='buf194', index=c0, size=(8388608,))]
buf198.met_dependencies = 
    [   MemoryDep(name='addmm_47', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_7', index=c0, size=(8388608,))]
buf198.group.device = cuda:0
buf198.group.iteration = (8388608, 1)
buf198.sizes = ([8388608], [])
class buf198_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_47', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_7', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_7', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf194', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_47', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_7', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_7', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_47', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf194', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_7', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf198', get_index_11, add_2, None)
        return store


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(8388608,))]
buf199.unmet_dependencies = [MemoryDep(name='buf198', index=c0, size=(8388608,))]
buf199.met_dependencies = []
buf199.group.device = cuda:0
buf199.group.iteration = (8388608, 1)
buf199.sizes = ([8388608], [])
class buf199_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf199', get_index_1, load, None)
        return store


buf200: ExternKernelSchedulerNode(ExternKernelOut)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf199')]
buf200.met_dependencies = [StarDep(name='permute_142')]
buf200.node.kernel = extern_kernels.mm


buf201: ExternKernelSchedulerNode(ExternKernelOut)
buf201.writes = [StarDep(name='buf201')]
buf201.unmet_dependencies = [StarDep(name='buf199')]
buf201.met_dependencies = [StarDep(name='view_166')]
buf201.node.kernel = extern_kernels.mm


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = 
    [   MemoryDep(name='buf202', index=c0, size=(16384, 512)),
        MemoryDep(name='buf202', index=c0, size=(16384,))]
buf202.unmet_dependencies = [MemoryDep(name='buf199', index=c0 + 16384*c1, size=(16384, 512))]
buf202.met_dependencies = []
buf202.group.device = cuda:0
buf202.group.iteration = (16384, 512)
buf202.sizes = ([16384], [512])
class buf202_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf202', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(512, 4096)),
        MemoryDep(name='buf203', index=c0, size=(512,))]
buf203.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0, size=(2097152,)),
        MemoryDep(name='buf200', index=c0, size=(2097152,))]
buf203.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf203.group.device = cuda:0
buf203.group.iteration = (512, 4096)
buf203.sizes = ([512], [4096])
class buf203_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf203', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = 
    [   MemoryDep(name='buf204', index=c0, size=(512, 4096)),
        MemoryDep(name='buf204', index=c0, size=(512,))]
buf204.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0, size=(2097152,)),
        MemoryDep(name='buf200', index=c0, size=(2097152,))]
buf204.met_dependencies = 
    [   MemoryDep(name='mul_59', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf204.group.device = cuda:0
buf204.group.iteration = (512, 4096)
buf204.sizes = ([512], [4096])
class buf204_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_59', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf204', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(2097152,))]
buf205.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0, size=(2097152,)),
        MemoryDep(name='buf200', index=c0, size=(2097152,)),
        MemoryDep(name='buf203', index=c0, size=(512, 4096)),
        MemoryDep(name='buf204', index=c0, size=(512, 4096))]
buf205.met_dependencies = 
    [   MemoryDep(name='div_43', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_59', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf205.group.device = cuda:0
buf205.group.iteration = (2097152, 1)
buf205.sizes = ([512, 4096], [])
class buf205_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf200', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf203', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_59', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf204', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf205', get_index_7, mul_3, None)
        return store


buf206: SchedulerNode(ComputedBuffer)
buf206.writes = 
    [   MemoryDep(name='buf206', index=c0, size=(4096, 512)),
        MemoryDep(name='buf206', index=c0, size=(4096,))]
buf206.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf200', index=c0 + 4096*c1, size=(4096, 512))]
buf206.met_dependencies = [MemoryDep(name='mul_59', index=c0 + 4096*c1, size=(4096, 512))]
buf206.group.device = cuda:0
buf206.group.iteration = (4096, 512)
buf206.sizes = ([4096], [512])
class buf206_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_59', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf206', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf207: SchedulerNode(ComputedBuffer)
buf207.writes = 
    [   MemoryDep(name='buf207', index=c0, size=(4096, 512)),
        MemoryDep(name='buf207', index=c0, size=(4096,))]
buf207.unmet_dependencies = 
    [   MemoryDep(name='buf191', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf200', index=c0 + 4096*c1, size=(4096, 512))]
buf207.met_dependencies = []
buf207.group.device = cuda:0
buf207.group.iteration = (4096, 512)
buf207.sizes = ([4096], [512])
class buf207_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf207', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf208: ExternKernelSchedulerNode(ExternKernelOut)
buf208.writes = [StarDep(name='buf208')]
buf208.unmet_dependencies = [StarDep(name='buf205')]
buf208.met_dependencies = [StarDep(name='permute_146')]
buf208.node.kernel = extern_kernels.mm


buf209: ExternKernelSchedulerNode(ExternKernelOut)
buf209.writes = [StarDep(name='buf209')]
buf209.unmet_dependencies = [StarDep(name='buf205')]
buf209.met_dependencies = [StarDep(name='view_164')]
buf209.node.kernel = extern_kernels.mm


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = 
    [   MemoryDep(name='buf210', index=c0, size=(16384, 128)),
        MemoryDep(name='buf210', index=c0, size=(16384,))]
buf210.unmet_dependencies = [MemoryDep(name='buf205', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf210.met_dependencies = []
buf210.group.device = cuda:0
buf210.group.iteration = (16384, 128)
buf210.sizes = ([4, 4096], [128])
class buf210_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf210', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = 
    [   MemoryDep(name='buf211', index=c0, size=(4096, 4)),
        MemoryDep(name='buf211', index=c0, size=(4096,))]
buf211.unmet_dependencies = [MemoryDep(name='buf210', index=c0 + 4096*c1, size=(4096, 4))]
buf211.met_dependencies = []
buf211.group.device = cuda:0
buf211.group.iteration = (4096, 4)
buf211.sizes = ([4096], [4])
class buf211_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf211', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf212: ExternKernelSchedulerNode(ExternKernelOut)
buf212.writes = [StarDep(name='buf212')]
buf212.unmet_dependencies = [StarDep(name='buf208')]
buf212.met_dependencies = [StarDep(name='permute_283')]
buf212.node.kernel = extern_kernels.bmm


buf213: ExternKernelSchedulerNode(ExternKernelOut)
buf213.writes = [StarDep(name='buf213')]
buf213.unmet_dependencies = [StarDep(name='buf208')]
buf213.met_dependencies = [StarDep(name='permute_284')]
buf213.node.kernel = extern_kernels.bmm


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = 
    [   MemoryDep(name='buf214', index=c0, size=(32768, 512)),
        MemoryDep(name='buf214', index=c0, size=(32768,))]
buf214.unmet_dependencies = [MemoryDep(name='buf213', index=c0, size=(16777216,))]
buf214.met_dependencies = [MemoryDep(name='div_15', index=c0, size=(16777216,))]
buf214.group.device = cuda:0
buf214.group.iteration = (32768, 512)
buf214.sizes = ([32768], [512])
class buf214_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_15', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf214', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = [MemoryDep(name='buf215', index=c0, size=(16777216,))]
buf215.unmet_dependencies = 
    [   MemoryDep(name='buf213', index=c0, size=(16777216,)),
        MemoryDep(name='buf214', index=c0, size=(32768, 512))]
buf215.met_dependencies = [MemoryDep(name='div_15', index=c0, size=(16777216,))]
buf215.group.device = cuda:0
buf215.group.iteration = (16777216, 1)
buf215.sizes = ([32768, 512], [])
class buf215_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_15', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf214', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf215', get_index_4, div, None)
        return store


buf216: ExternKernelSchedulerNode(ExternKernelOut)
buf216.writes = [StarDep(name='buf216')]
buf216.unmet_dependencies = [StarDep(name='buf215')]
buf216.met_dependencies = [StarDep(name='permute_285')]
buf216.node.kernel = extern_kernels.bmm


buf217: ExternKernelSchedulerNode(ExternKernelOut)
buf217.writes = [StarDep(name='buf217')]
buf217.unmet_dependencies = [StarDep(name='buf215')]
buf217.met_dependencies = [StarDep(name='permute_286')]
buf217.node.kernel = extern_kernels.bmm


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = [MemoryDep(name='buf218', index=c0, size=(2097152,))]
buf218.unmet_dependencies = [   MemoryDep(name='buf212', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf218.met_dependencies = []
buf218.group.device = cuda:0
buf218.group.iteration = (2097152, 1)
buf218.sizes = ([512, 4096], [])
class buf218_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf218', get_index_1, load, None)
        return store


buf219: ExternKernelSchedulerNode(ExternKernelOut)
buf219.writes = [StarDep(name='buf219')]
buf219.unmet_dependencies = [StarDep(name='buf218')]
buf219.met_dependencies = [StarDep(name='permute_159')]
buf219.node.kernel = extern_kernels.mm


buf220: ExternKernelSchedulerNode(ExternKernelOut)
buf220.writes = [StarDep(name='buf220')]
buf220.unmet_dependencies = [StarDep(name='buf218')]
buf220.met_dependencies = [StarDep(name='view_149')]
buf220.node.kernel = extern_kernels.mm


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = 
    [   MemoryDep(name='buf221', index=c0, size=(16384, 128)),
        MemoryDep(name='buf221', index=c0, size=(16384,))]
buf221.unmet_dependencies = [MemoryDep(name='buf218', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf221.met_dependencies = []
buf221.group.device = cuda:0
buf221.group.iteration = (16384, 128)
buf221.sizes = ([4, 4096], [128])
class buf221_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf221', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = 
    [   MemoryDep(name='buf222', index=c0, size=(4096, 4)),
        MemoryDep(name='buf222', index=c0, size=(4096,))]
buf222.unmet_dependencies = [MemoryDep(name='buf221', index=c0 + 4096*c1, size=(4096, 4))]
buf222.met_dependencies = []
buf222.group.device = cuda:0
buf222.group.iteration = (4096, 4)
buf222.sizes = ([4096], [4])
class buf222_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf222', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(2097152,))]
buf223.unmet_dependencies = [MemoryDep(name='buf216', index=c0, size=(2097152,))]
buf223.met_dependencies = []
buf223.group.device = cuda:0
buf223.group.iteration = (2097152, 1)
buf223.sizes = ([2097152], [])
class buf223_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf223', get_index_1, load, None)
        return store


buf224: ExternKernelSchedulerNode(ExternKernelOut)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf223')]
buf224.met_dependencies = [StarDep(name='permute_163')]
buf224.node.kernel = extern_kernels.mm


buf225: ExternKernelSchedulerNode(ExternKernelOut)
buf225.writes = [StarDep(name='buf225')]
buf225.unmet_dependencies = [StarDep(name='buf223')]
buf225.met_dependencies = [StarDep(name='view_149')]
buf225.node.kernel = extern_kernels.mm


buf226: SchedulerNode(ComputedBuffer)
buf226.writes = 
    [   MemoryDep(name='buf226', index=c0, size=(4096, 512)),
        MemoryDep(name='buf226', index=c0, size=(4096,))]
buf226.unmet_dependencies = [MemoryDep(name='buf223', index=c0, size=(2097152,))]
buf226.met_dependencies = []
buf226.group.device = cuda:0
buf226.group.iteration = (4096, 512)
buf226.sizes = ([4096], [512])
class buf226_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf226', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = [MemoryDep(name='buf227', index=c0, size=(2097152,))]
buf227.unmet_dependencies = [   MemoryDep(name='buf217', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf227.met_dependencies = []
buf227.group.device = cuda:0
buf227.group.iteration = (2097152, 1)
buf227.sizes = ([512, 4096], [])
class buf227_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store


buf228: ExternKernelSchedulerNode(ExternKernelOut)
buf228.writes = [StarDep(name='buf228')]
buf228.unmet_dependencies = [StarDep(name='buf227')]
buf228.met_dependencies = [StarDep(name='permute_167')]
buf228.node.kernel = extern_kernels.mm


buf229: ExternKernelSchedulerNode(ExternKernelOut)
buf229.writes = [StarDep(name='buf229')]
buf229.unmet_dependencies = [StarDep(name='buf227')]
buf229.met_dependencies = [StarDep(name='view_149')]
buf229.node.kernel = extern_kernels.mm


buf230: SchedulerNode(ComputedBuffer)
buf230.writes = 
    [   MemoryDep(name='buf230', index=c0, size=(16384, 128)),
        MemoryDep(name='buf230', index=c0, size=(16384,))]
buf230.unmet_dependencies = [MemoryDep(name='buf227', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf230.met_dependencies = []
buf230.group.device = cuda:0
buf230.group.iteration = (16384, 128)
buf230.sizes = ([4, 4096], [128])
class buf230_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf230', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = 
    [   MemoryDep(name='buf231', index=c0, size=(4096, 4)),
        MemoryDep(name='buf231', index=c0, size=(4096,))]
buf231.unmet_dependencies = [MemoryDep(name='buf230', index=c0 + 4096*c1, size=(4096, 4))]
buf231.met_dependencies = []
buf231.group.device = cuda:0
buf231.group.iteration = (4096, 4)
buf231.sizes = ([4096], [4])
class buf231_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf231', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = [MemoryDep(name='buf232', index=c0, size=(2097152,))]
buf232.unmet_dependencies = 
    [   MemoryDep(name='buf205', index=c0, size=(2097152,)),
        MemoryDep(name='buf219', index=c0, size=(2097152,)),
        MemoryDep(name='buf224', index=c0, size=(2097152,)),
        MemoryDep(name='buf228', index=c0, size=(2097152,))]
buf232.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf232.group.device = cuda:0
buf232.group.iteration = (2097152, 1)
buf232.sizes = ([512, 4096], [])
class buf232_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf232', get_index_5, mul, None)
        return store


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = 
    [   MemoryDep(name='buf233', index=c0, size=(512, 4096)),
        MemoryDep(name='buf233', index=c0, size=(512,))]
buf233.unmet_dependencies = [MemoryDep(name='buf232', index=c0, size=(2097152,))]
buf233.met_dependencies = []
buf233.group.device = cuda:0
buf233.group.iteration = (512, 4096)
buf233.sizes = ([512], [4096])
class buf233_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf233', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = 
    [   MemoryDep(name='buf234', index=c0, size=(512, 4096)),
        MemoryDep(name='buf234', index=c0, size=(512,))]
buf234.unmet_dependencies = [MemoryDep(name='buf232', index=c0, size=(2097152,))]
buf234.met_dependencies = [MemoryDep(name='mul_57', index=c0, size=(2097152,))]
buf234.group.device = cuda:0
buf234.group.iteration = (512, 4096)
buf234.sizes = ([512], [4096])
class buf234_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_57', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf234', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = [MemoryDep(name='buf235', index=c0, size=(2097152,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf232', index=c0, size=(2097152,)),
        MemoryDep(name='buf233', index=c0, size=(512, 4096)),
        MemoryDep(name='buf234', index=c0, size=(512, 4096))]
buf235.met_dependencies = 
    [   MemoryDep(name='div_45', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_57', index=c0, size=(2097152,))]
buf235.group.device = cuda:0
buf235.group.iteration = (2097152, 1)
buf235.sizes = ([512, 4096], [])
class buf235_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf233', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_57', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf234', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf235', get_index_5, mul_2, None)
        return store


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = 
    [   MemoryDep(name='buf236', index=c0, size=(4096, 512)),
        MemoryDep(name='buf236', index=c0, size=(4096,))]
buf236.unmet_dependencies = 
    [   MemoryDep(name='buf205', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf219', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf224', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf228', index=c0 + 4096*c1, size=(4096, 512))]
buf236.met_dependencies = [MemoryDep(name='mul_57', index=c0 + 4096*c1, size=(4096, 512))]
buf236.group.device = cuda:0
buf236.group.iteration = (4096, 512)
buf236.sizes = ([4096], [512])
class buf236_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_57', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf236', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = 
    [   MemoryDep(name='buf237', index=c0, size=(4096, 512)),
        MemoryDep(name='buf237', index=c0, size=(4096,))]
buf237.unmet_dependencies = 
    [   MemoryDep(name='buf205', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf219', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf224', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf228', index=c0 + 4096*c1, size=(4096, 512))]
buf237.met_dependencies = []
buf237.group.device = cuda:0
buf237.group.iteration = (4096, 512)
buf237.sizes = ([4096], [512])
class buf237_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf237', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf238: ExternKernelSchedulerNode(ExternKernelOut)
buf238.writes = [StarDep(name='buf238')]
buf238.unmet_dependencies = [StarDep(name='buf235')]
buf238.met_dependencies = [StarDep(name='permute_138')]
buf238.node.kernel = extern_kernels.mm


buf239: ExternKernelSchedulerNode(ExternKernelOut)
buf239.writes = [StarDep(name='buf239')]
buf239.unmet_dependencies = [StarDep(name='buf235')]
buf239.met_dependencies = [StarDep(name='view_147')]
buf239.node.kernel = extern_kernels.mm


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = 
    [   MemoryDep(name='buf240', index=c0, size=(16384, 128)),
        MemoryDep(name='buf240', index=c0, size=(16384,))]
buf240.unmet_dependencies = [MemoryDep(name='buf235', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf240.met_dependencies = []
buf240.group.device = cuda:0
buf240.group.iteration = (16384, 128)
buf240.sizes = ([4, 4096], [128])
class buf240_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf240', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = 
    [   MemoryDep(name='buf241', index=c0, size=(4096, 4)),
        MemoryDep(name='buf241', index=c0, size=(4096,))]
buf241.unmet_dependencies = [MemoryDep(name='buf240', index=c0 + 4096*c1, size=(4096, 4))]
buf241.met_dependencies = []
buf241.group.device = cuda:0
buf241.group.iteration = (4096, 4)
buf241.sizes = ([4096], [4])
class buf241_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf241', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = [MemoryDep(name='buf242', index=c0, size=(8388608,))]
buf242.unmet_dependencies = [MemoryDep(name='buf238', index=c0, size=(8388608,))]
buf242.met_dependencies = 
    [   MemoryDep(name='addmm_41', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_6', index=c0, size=(8388608,))]
buf242.group.device = cuda:0
buf242.group.iteration = (8388608, 1)
buf242.sizes = ([8388608], [])
class buf242_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_41', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_6', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_6', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf238', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_41', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_6', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_6', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_41', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf238', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_6', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf242', get_index_11, add_2, None)
        return store


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = [MemoryDep(name='buf243', index=c0, size=(8388608,))]
buf243.unmet_dependencies = [MemoryDep(name='buf242', index=c0, size=(8388608,))]
buf243.met_dependencies = []
buf243.group.device = cuda:0
buf243.group.iteration = (8388608, 1)
buf243.sizes = ([8388608], [])
class buf243_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf243', get_index_1, load, None)
        return store


buf244: ExternKernelSchedulerNode(ExternKernelOut)
buf244.writes = [StarDep(name='buf244')]
buf244.unmet_dependencies = [StarDep(name='buf243')]
buf244.met_dependencies = [StarDep(name='permute_142')]
buf244.node.kernel = extern_kernels.mm


buf245: ExternKernelSchedulerNode(ExternKernelOut)
buf245.writes = [StarDep(name='buf245')]
buf245.unmet_dependencies = [StarDep(name='buf243')]
buf245.met_dependencies = [StarDep(name='view_145')]
buf245.node.kernel = extern_kernels.mm


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = 
    [   MemoryDep(name='buf246', index=c0, size=(16384, 512)),
        MemoryDep(name='buf246', index=c0, size=(16384,))]
buf246.unmet_dependencies = [MemoryDep(name='buf243', index=c0 + 16384*c1, size=(16384, 512))]
buf246.met_dependencies = []
buf246.group.device = cuda:0
buf246.group.iteration = (16384, 512)
buf246.sizes = ([16384], [512])
class buf246_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf246', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = 
    [   MemoryDep(name='buf247', index=c0, size=(512, 4096)),
        MemoryDep(name='buf247', index=c0, size=(512,))]
buf247.unmet_dependencies = 
    [   MemoryDep(name='buf235', index=c0, size=(2097152,)),
        MemoryDep(name='buf244', index=c0, size=(2097152,))]
buf247.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf247.group.device = cuda:0
buf247.group.iteration = (512, 4096)
buf247.sizes = ([512], [4096])
class buf247_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf247', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf248: SchedulerNode(ComputedBuffer)
buf248.writes = 
    [   MemoryDep(name='buf248', index=c0, size=(512, 4096)),
        MemoryDep(name='buf248', index=c0, size=(512,))]
buf248.unmet_dependencies = 
    [   MemoryDep(name='buf235', index=c0, size=(2097152,)),
        MemoryDep(name='buf244', index=c0, size=(2097152,))]
buf248.met_dependencies = 
    [   MemoryDep(name='mul_51', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf248.group.device = cuda:0
buf248.group.iteration = (512, 4096)
buf248.sizes = ([512], [4096])
class buf248_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_51', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf248', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = [MemoryDep(name='buf249', index=c0, size=(2097152,))]
buf249.unmet_dependencies = 
    [   MemoryDep(name='buf235', index=c0, size=(2097152,)),
        MemoryDep(name='buf244', index=c0, size=(2097152,)),
        MemoryDep(name='buf247', index=c0, size=(512, 4096)),
        MemoryDep(name='buf248', index=c0, size=(512, 4096))]
buf249.met_dependencies = 
    [   MemoryDep(name='div_46', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_51', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf249.group.device = cuda:0
buf249.group.iteration = (2097152, 1)
buf249.sizes = ([512, 4096], [])
class buf249_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_51', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf248', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf249', get_index_7, mul_3, None)
        return store


buf250: SchedulerNode(ComputedBuffer)
buf250.writes = 
    [   MemoryDep(name='buf250', index=c0, size=(4096, 512)),
        MemoryDep(name='buf250', index=c0, size=(4096,))]
buf250.unmet_dependencies = 
    [   MemoryDep(name='buf235', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf244', index=c0 + 4096*c1, size=(4096, 512))]
buf250.met_dependencies = [MemoryDep(name='mul_51', index=c0 + 4096*c1, size=(4096, 512))]
buf250.group.device = cuda:0
buf250.group.iteration = (4096, 512)
buf250.sizes = ([4096], [512])
class buf250_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_51', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf250', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(4096, 512)),
        MemoryDep(name='buf251', index=c0, size=(4096,))]
buf251.unmet_dependencies = 
    [   MemoryDep(name='buf235', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf244', index=c0 + 4096*c1, size=(4096, 512))]
buf251.met_dependencies = []
buf251.group.device = cuda:0
buf251.group.iteration = (4096, 512)
buf251.sizes = ([4096], [512])
class buf251_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf252: ExternKernelSchedulerNode(ExternKernelOut)
buf252.writes = [StarDep(name='buf252')]
buf252.unmet_dependencies = [StarDep(name='buf249')]
buf252.met_dependencies = [StarDep(name='permute_146')]
buf252.node.kernel = extern_kernels.mm


buf253: ExternKernelSchedulerNode(ExternKernelOut)
buf253.writes = [StarDep(name='buf253')]
buf253.unmet_dependencies = [StarDep(name='buf249')]
buf253.met_dependencies = [StarDep(name='view_143')]
buf253.node.kernel = extern_kernels.mm


buf254: SchedulerNode(ComputedBuffer)
buf254.writes = 
    [   MemoryDep(name='buf254', index=c0, size=(16384, 128)),
        MemoryDep(name='buf254', index=c0, size=(16384,))]
buf254.unmet_dependencies = [MemoryDep(name='buf249', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf254.met_dependencies = []
buf254.group.device = cuda:0
buf254.group.iteration = (16384, 128)
buf254.sizes = ([4, 4096], [128])
class buf254_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf254', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf255: SchedulerNode(ComputedBuffer)
buf255.writes = 
    [   MemoryDep(name='buf255', index=c0, size=(4096, 4)),
        MemoryDep(name='buf255', index=c0, size=(4096,))]
buf255.unmet_dependencies = [MemoryDep(name='buf254', index=c0 + 4096*c1, size=(4096, 4))]
buf255.met_dependencies = []
buf255.group.device = cuda:0
buf255.group.iteration = (4096, 4)
buf255.sizes = ([4096], [4])
class buf255_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf255', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf256: ExternKernelSchedulerNode(ExternKernelOut)
buf256.writes = [StarDep(name='buf256')]
buf256.unmet_dependencies = [StarDep(name='buf252')]
buf256.met_dependencies = [StarDep(name='permute_316')]
buf256.node.kernel = extern_kernels.bmm


buf257: ExternKernelSchedulerNode(ExternKernelOut)
buf257.writes = [StarDep(name='buf257')]
buf257.unmet_dependencies = [StarDep(name='buf252')]
buf257.met_dependencies = [StarDep(name='permute_317')]
buf257.node.kernel = extern_kernels.bmm


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = 
    [   MemoryDep(name='buf258', index=c0, size=(32768, 512)),
        MemoryDep(name='buf258', index=c0, size=(32768,))]
buf258.unmet_dependencies = [MemoryDep(name='buf257', index=c0, size=(16777216,))]
buf258.met_dependencies = [MemoryDep(name='div_13', index=c0, size=(16777216,))]
buf258.group.device = cuda:0
buf258.group.iteration = (32768, 512)
buf258.sizes = ([32768], [512])
class buf258_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_13', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf258', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = [MemoryDep(name='buf259', index=c0, size=(16777216,))]
buf259.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=c0, size=(16777216,)),
        MemoryDep(name='buf258', index=c0, size=(32768, 512))]
buf259.met_dependencies = [MemoryDep(name='div_13', index=c0, size=(16777216,))]
buf259.group.device = cuda:0
buf259.group.iteration = (16777216, 1)
buf259.sizes = ([32768, 512], [])
class buf259_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_13', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_13', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf258', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf259', get_index_4, div, None)
        return store


buf260: ExternKernelSchedulerNode(ExternKernelOut)
buf260.writes = [StarDep(name='buf260')]
buf260.unmet_dependencies = [StarDep(name='buf259')]
buf260.met_dependencies = [StarDep(name='permute_318')]
buf260.node.kernel = extern_kernels.bmm


buf261: ExternKernelSchedulerNode(ExternKernelOut)
buf261.writes = [StarDep(name='buf261')]
buf261.unmet_dependencies = [StarDep(name='buf259')]
buf261.met_dependencies = [StarDep(name='permute_319')]
buf261.node.kernel = extern_kernels.bmm


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = [MemoryDep(name='buf262', index=c0, size=(2097152,))]
buf262.unmet_dependencies = [   MemoryDep(name='buf256', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf262.met_dependencies = []
buf262.group.device = cuda:0
buf262.group.iteration = (2097152, 1)
buf262.sizes = ([512, 4096], [])
class buf262_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store


buf263: ExternKernelSchedulerNode(ExternKernelOut)
buf263.writes = [StarDep(name='buf263')]
buf263.unmet_dependencies = [StarDep(name='buf262')]
buf263.met_dependencies = [StarDep(name='permute_159')]
buf263.node.kernel = extern_kernels.mm


buf264: ExternKernelSchedulerNode(ExternKernelOut)
buf264.writes = [StarDep(name='buf264')]
buf264.unmet_dependencies = [StarDep(name='buf262')]
buf264.met_dependencies = [StarDep(name='view_128')]
buf264.node.kernel = extern_kernels.mm


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = 
    [   MemoryDep(name='buf265', index=c0, size=(16384, 128)),
        MemoryDep(name='buf265', index=c0, size=(16384,))]
buf265.unmet_dependencies = [MemoryDep(name='buf262', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf265.met_dependencies = []
buf265.group.device = cuda:0
buf265.group.iteration = (16384, 128)
buf265.sizes = ([4, 4096], [128])
class buf265_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf265', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf266: SchedulerNode(ComputedBuffer)
buf266.writes = 
    [   MemoryDep(name='buf266', index=c0, size=(4096, 4)),
        MemoryDep(name='buf266', index=c0, size=(4096,))]
buf266.unmet_dependencies = [MemoryDep(name='buf265', index=c0 + 4096*c1, size=(4096, 4))]
buf266.met_dependencies = []
buf266.group.device = cuda:0
buf266.group.iteration = (4096, 4)
buf266.sizes = ([4096], [4])
class buf266_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf266', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = [MemoryDep(name='buf267', index=c0, size=(2097152,))]
buf267.unmet_dependencies = [MemoryDep(name='buf260', index=c0, size=(2097152,))]
buf267.met_dependencies = []
buf267.group.device = cuda:0
buf267.group.iteration = (2097152, 1)
buf267.sizes = ([2097152], [])
class buf267_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf267', get_index_1, load, None)
        return store


buf268: ExternKernelSchedulerNode(ExternKernelOut)
buf268.writes = [StarDep(name='buf268')]
buf268.unmet_dependencies = [StarDep(name='buf267')]
buf268.met_dependencies = [StarDep(name='permute_163')]
buf268.node.kernel = extern_kernels.mm


buf269: ExternKernelSchedulerNode(ExternKernelOut)
buf269.writes = [StarDep(name='buf269')]
buf269.unmet_dependencies = [StarDep(name='buf267')]
buf269.met_dependencies = [StarDep(name='view_128')]
buf269.node.kernel = extern_kernels.mm


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = 
    [   MemoryDep(name='buf270', index=c0, size=(4096, 512)),
        MemoryDep(name='buf270', index=c0, size=(4096,))]
buf270.unmet_dependencies = [MemoryDep(name='buf267', index=c0, size=(2097152,))]
buf270.met_dependencies = []
buf270.group.device = cuda:0
buf270.group.iteration = (4096, 512)
buf270.sizes = ([4096], [512])
class buf270_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf270', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf271: SchedulerNode(ComputedBuffer)
buf271.writes = [MemoryDep(name='buf271', index=c0, size=(2097152,))]
buf271.unmet_dependencies = [   MemoryDep(name='buf261', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf271.met_dependencies = []
buf271.group.device = cuda:0
buf271.group.iteration = (2097152, 1)
buf271.sizes = ([512, 4096], [])
class buf271_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


buf272: ExternKernelSchedulerNode(ExternKernelOut)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf271')]
buf272.met_dependencies = [StarDep(name='permute_167')]
buf272.node.kernel = extern_kernels.mm


buf273: ExternKernelSchedulerNode(ExternKernelOut)
buf273.writes = [StarDep(name='buf273')]
buf273.unmet_dependencies = [StarDep(name='buf271')]
buf273.met_dependencies = [StarDep(name='view_128')]
buf273.node.kernel = extern_kernels.mm


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = 
    [   MemoryDep(name='buf274', index=c0, size=(16384, 128)),
        MemoryDep(name='buf274', index=c0, size=(16384,))]
buf274.unmet_dependencies = [MemoryDep(name='buf271', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf274.met_dependencies = []
buf274.group.device = cuda:0
buf274.group.iteration = (16384, 128)
buf274.sizes = ([4, 4096], [128])
class buf274_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf274', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(4096, 4)),
        MemoryDep(name='buf275', index=c0, size=(4096,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=c0 + 4096*c1, size=(4096, 4))]
buf275.met_dependencies = []
buf275.group.device = cuda:0
buf275.group.iteration = (4096, 4)
buf275.sizes = ([4096], [4])
class buf275_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf275', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = [MemoryDep(name='buf276', index=c0, size=(2097152,))]
buf276.unmet_dependencies = 
    [   MemoryDep(name='buf249', index=c0, size=(2097152,)),
        MemoryDep(name='buf263', index=c0, size=(2097152,)),
        MemoryDep(name='buf268', index=c0, size=(2097152,)),
        MemoryDep(name='buf272', index=c0, size=(2097152,))]
buf276.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf276.group.device = cuda:0
buf276.group.iteration = (2097152, 1)
buf276.sizes = ([512, 4096], [])
class buf276_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf272', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, mul, None)
        return store


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = 
    [   MemoryDep(name='buf277', index=c0, size=(512, 4096)),
        MemoryDep(name='buf277', index=c0, size=(512,))]
buf277.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(2097152,))]
buf277.met_dependencies = []
buf277.group.device = cuda:0
buf277.group.iteration = (512, 4096)
buf277.sizes = ([512], [4096])
class buf277_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf277', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf278: SchedulerNode(ComputedBuffer)
buf278.writes = 
    [   MemoryDep(name='buf278', index=c0, size=(512, 4096)),
        MemoryDep(name='buf278', index=c0, size=(512,))]
buf278.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(2097152,))]
buf278.met_dependencies = [MemoryDep(name='mul_49', index=c0, size=(2097152,))]
buf278.group.device = cuda:0
buf278.group.iteration = (512, 4096)
buf278.sizes = ([512], [4096])
class buf278_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_49', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf278', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = [MemoryDep(name='buf279', index=c0, size=(2097152,))]
buf279.unmet_dependencies = 
    [   MemoryDep(name='buf276', index=c0, size=(2097152,)),
        MemoryDep(name='buf277', index=c0, size=(512, 4096)),
        MemoryDep(name='buf278', index=c0, size=(512, 4096))]
buf279.met_dependencies = 
    [   MemoryDep(name='div_48', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_49', index=c0, size=(2097152,))]
buf279.group.device = cuda:0
buf279.group.iteration = (2097152, 1)
buf279.sizes = ([512, 4096], [])
class buf279_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf276', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf277', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_49', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf278', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf279', get_index_5, mul_2, None)
        return store


buf280: SchedulerNode(ComputedBuffer)
buf280.writes = 
    [   MemoryDep(name='buf280', index=c0, size=(4096, 512)),
        MemoryDep(name='buf280', index=c0, size=(4096,))]
buf280.unmet_dependencies = 
    [   MemoryDep(name='buf249', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf263', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf268', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf272', index=c0 + 4096*c1, size=(4096, 512))]
buf280.met_dependencies = [MemoryDep(name='mul_49', index=c0 + 4096*c1, size=(4096, 512))]
buf280.group.device = cuda:0
buf280.group.iteration = (4096, 512)
buf280.sizes = ([4096], [512])
class buf280_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf272', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_49', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf280', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = 
    [   MemoryDep(name='buf281', index=c0, size=(4096, 512)),
        MemoryDep(name='buf281', index=c0, size=(4096,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf249', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf263', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf268', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf272', index=c0 + 4096*c1, size=(4096, 512))]
buf281.met_dependencies = []
buf281.group.device = cuda:0
buf281.group.iteration = (4096, 512)
buf281.sizes = ([4096], [512])
class buf281_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf272', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf281', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf282: ExternKernelSchedulerNode(ExternKernelOut)
buf282.writes = [StarDep(name='buf282')]
buf282.unmet_dependencies = [StarDep(name='buf279')]
buf282.met_dependencies = [StarDep(name='permute_138')]
buf282.node.kernel = extern_kernels.mm


buf283: ExternKernelSchedulerNode(ExternKernelOut)
buf283.writes = [StarDep(name='buf283')]
buf283.unmet_dependencies = [StarDep(name='buf279')]
buf283.met_dependencies = [StarDep(name='view_126')]
buf283.node.kernel = extern_kernels.mm


buf284: SchedulerNode(ComputedBuffer)
buf284.writes = 
    [   MemoryDep(name='buf284', index=c0, size=(16384, 128)),
        MemoryDep(name='buf284', index=c0, size=(16384,))]
buf284.unmet_dependencies = [MemoryDep(name='buf279', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf284.met_dependencies = []
buf284.group.device = cuda:0
buf284.group.iteration = (16384, 128)
buf284.sizes = ([4, 4096], [128])
class buf284_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf284', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf285: SchedulerNode(ComputedBuffer)
buf285.writes = 
    [   MemoryDep(name='buf285', index=c0, size=(4096, 4)),
        MemoryDep(name='buf285', index=c0, size=(4096,))]
buf285.unmet_dependencies = [MemoryDep(name='buf284', index=c0 + 4096*c1, size=(4096, 4))]
buf285.met_dependencies = []
buf285.group.device = cuda:0
buf285.group.iteration = (4096, 4)
buf285.sizes = ([4096], [4])
class buf285_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf285', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = [MemoryDep(name='buf286', index=c0, size=(8388608,))]
buf286.unmet_dependencies = [MemoryDep(name='buf282', index=c0, size=(8388608,))]
buf286.met_dependencies = 
    [   MemoryDep(name='addmm_35', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_5', index=c0, size=(8388608,))]
buf286.group.device = cuda:0
buf286.group.iteration = (8388608, 1)
buf286.sizes = ([8388608], [])
class buf286_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_35', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_5', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_5', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf282', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_35', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_5', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_5', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_35', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf282', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_5', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf286', get_index_11, add_2, None)
        return store


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = [MemoryDep(name='buf287', index=c0, size=(8388608,))]
buf287.unmet_dependencies = [MemoryDep(name='buf286', index=c0, size=(8388608,))]
buf287.met_dependencies = []
buf287.group.device = cuda:0
buf287.group.iteration = (8388608, 1)
buf287.sizes = ([8388608], [])
class buf287_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf287', get_index_1, load, None)
        return store


buf288: ExternKernelSchedulerNode(ExternKernelOut)
buf288.writes = [StarDep(name='buf288')]
buf288.unmet_dependencies = [StarDep(name='buf287')]
buf288.met_dependencies = [StarDep(name='permute_142')]
buf288.node.kernel = extern_kernels.mm


buf289: ExternKernelSchedulerNode(ExternKernelOut)
buf289.writes = [StarDep(name='buf289')]
buf289.unmet_dependencies = [StarDep(name='buf287')]
buf289.met_dependencies = [StarDep(name='view_124')]
buf289.node.kernel = extern_kernels.mm


buf290: SchedulerNode(ComputedBuffer)
buf290.writes = 
    [   MemoryDep(name='buf290', index=c0, size=(16384, 512)),
        MemoryDep(name='buf290', index=c0, size=(16384,))]
buf290.unmet_dependencies = [MemoryDep(name='buf287', index=c0 + 16384*c1, size=(16384, 512))]
buf290.met_dependencies = []
buf290.group.device = cuda:0
buf290.group.iteration = (16384, 512)
buf290.sizes = ([16384], [512])
class buf290_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf290', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = 
    [   MemoryDep(name='buf291', index=c0, size=(512, 4096)),
        MemoryDep(name='buf291', index=c0, size=(512,))]
buf291.unmet_dependencies = 
    [   MemoryDep(name='buf279', index=c0, size=(2097152,)),
        MemoryDep(name='buf288', index=c0, size=(2097152,))]
buf291.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf291.group.device = cuda:0
buf291.group.iteration = (512, 4096)
buf291.sizes = ([512], [4096])
class buf291_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf291', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = 
    [   MemoryDep(name='buf292', index=c0, size=(512, 4096)),
        MemoryDep(name='buf292', index=c0, size=(512,))]
buf292.unmet_dependencies = 
    [   MemoryDep(name='buf279', index=c0, size=(2097152,)),
        MemoryDep(name='buf288', index=c0, size=(2097152,))]
buf292.met_dependencies = 
    [   MemoryDep(name='mul_43', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf292.group.device = cuda:0
buf292.group.iteration = (512, 4096)
buf292.sizes = ([512], [4096])
class buf292_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_43', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf292', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = [MemoryDep(name='buf293', index=c0, size=(2097152,))]
buf293.unmet_dependencies = 
    [   MemoryDep(name='buf279', index=c0, size=(2097152,)),
        MemoryDep(name='buf288', index=c0, size=(2097152,)),
        MemoryDep(name='buf291', index=c0, size=(512, 4096)),
        MemoryDep(name='buf292', index=c0, size=(512, 4096))]
buf293.met_dependencies = 
    [   MemoryDep(name='div_49', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_43', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf293.group.device = cuda:0
buf293.group.iteration = (2097152, 1)
buf293.sizes = ([512, 4096], [])
class buf293_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf291', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_43', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf292', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf293', get_index_7, mul_3, None)
        return store


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = 
    [   MemoryDep(name='buf294', index=c0, size=(4096, 512)),
        MemoryDep(name='buf294', index=c0, size=(4096,))]
buf294.unmet_dependencies = 
    [   MemoryDep(name='buf279', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf288', index=c0 + 4096*c1, size=(4096, 512))]
buf294.met_dependencies = [MemoryDep(name='mul_43', index=c0 + 4096*c1, size=(4096, 512))]
buf294.group.device = cuda:0
buf294.group.iteration = (4096, 512)
buf294.sizes = ([4096], [512])
class buf294_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_43', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf294', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = 
    [   MemoryDep(name='buf295', index=c0, size=(4096, 512)),
        MemoryDep(name='buf295', index=c0, size=(4096,))]
buf295.unmet_dependencies = 
    [   MemoryDep(name='buf279', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf288', index=c0 + 4096*c1, size=(4096, 512))]
buf295.met_dependencies = []
buf295.group.device = cuda:0
buf295.group.iteration = (4096, 512)
buf295.sizes = ([4096], [512])
class buf295_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf295', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf296: ExternKernelSchedulerNode(ExternKernelOut)
buf296.writes = [StarDep(name='buf296')]
buf296.unmet_dependencies = [StarDep(name='buf293')]
buf296.met_dependencies = [StarDep(name='permute_146')]
buf296.node.kernel = extern_kernels.mm


buf297: ExternKernelSchedulerNode(ExternKernelOut)
buf297.writes = [StarDep(name='buf297')]
buf297.unmet_dependencies = [StarDep(name='buf293')]
buf297.met_dependencies = [StarDep(name='view_122')]
buf297.node.kernel = extern_kernels.mm


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = 
    [   MemoryDep(name='buf298', index=c0, size=(16384, 128)),
        MemoryDep(name='buf298', index=c0, size=(16384,))]
buf298.unmet_dependencies = [MemoryDep(name='buf293', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf298.met_dependencies = []
buf298.group.device = cuda:0
buf298.group.iteration = (16384, 128)
buf298.sizes = ([4, 4096], [128])
class buf298_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf298', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = 
    [   MemoryDep(name='buf299', index=c0, size=(4096, 4)),
        MemoryDep(name='buf299', index=c0, size=(4096,))]
buf299.unmet_dependencies = [MemoryDep(name='buf298', index=c0 + 4096*c1, size=(4096, 4))]
buf299.met_dependencies = []
buf299.group.device = cuda:0
buf299.group.iteration = (4096, 4)
buf299.sizes = ([4096], [4])
class buf299_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf299', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf300: ExternKernelSchedulerNode(ExternKernelOut)
buf300.writes = [StarDep(name='buf300')]
buf300.unmet_dependencies = [StarDep(name='buf296')]
buf300.met_dependencies = [StarDep(name='permute_349')]
buf300.node.kernel = extern_kernels.bmm


buf301: ExternKernelSchedulerNode(ExternKernelOut)
buf301.writes = [StarDep(name='buf301')]
buf301.unmet_dependencies = [StarDep(name='buf296')]
buf301.met_dependencies = [StarDep(name='permute_350')]
buf301.node.kernel = extern_kernels.bmm


buf302: SchedulerNode(ComputedBuffer)
buf302.writes = 
    [   MemoryDep(name='buf302', index=c0, size=(32768, 512)),
        MemoryDep(name='buf302', index=c0, size=(32768,))]
buf302.unmet_dependencies = [MemoryDep(name='buf301', index=c0, size=(16777216,))]
buf302.met_dependencies = [MemoryDep(name='div_11', index=c0, size=(16777216,))]
buf302.group.device = cuda:0
buf302.group.iteration = (32768, 512)
buf302.sizes = ([32768], [512])
class buf302_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_11', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf302', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = [MemoryDep(name='buf303', index=c0, size=(16777216,))]
buf303.unmet_dependencies = 
    [   MemoryDep(name='buf301', index=c0, size=(16777216,)),
        MemoryDep(name='buf302', index=c0, size=(32768, 512))]
buf303.met_dependencies = [MemoryDep(name='div_11', index=c0, size=(16777216,))]
buf303.group.device = cuda:0
buf303.group.iteration = (16777216, 1)
buf303.sizes = ([32768, 512], [])
class buf303_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_11', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_11', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf302', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf303', get_index_4, div, None)
        return store


buf304: ExternKernelSchedulerNode(ExternKernelOut)
buf304.writes = [StarDep(name='buf304')]
buf304.unmet_dependencies = [StarDep(name='buf303')]
buf304.met_dependencies = [StarDep(name='permute_351')]
buf304.node.kernel = extern_kernels.bmm


buf305: ExternKernelSchedulerNode(ExternKernelOut)
buf305.writes = [StarDep(name='buf305')]
buf305.unmet_dependencies = [StarDep(name='buf303')]
buf305.met_dependencies = [StarDep(name='permute_352')]
buf305.node.kernel = extern_kernels.bmm


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = [MemoryDep(name='buf306', index=c0, size=(2097152,))]
buf306.unmet_dependencies = [   MemoryDep(name='buf300', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf306.met_dependencies = []
buf306.group.device = cuda:0
buf306.group.iteration = (2097152, 1)
buf306.sizes = ([512, 4096], [])
class buf306_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf306', get_index_1, load, None)
        return store


buf307: ExternKernelSchedulerNode(ExternKernelOut)
buf307.writes = [StarDep(name='buf307')]
buf307.unmet_dependencies = [StarDep(name='buf306')]
buf307.met_dependencies = [StarDep(name='permute_159')]
buf307.node.kernel = extern_kernels.mm


buf308: ExternKernelSchedulerNode(ExternKernelOut)
buf308.writes = [StarDep(name='buf308')]
buf308.unmet_dependencies = [StarDep(name='buf306')]
buf308.met_dependencies = [StarDep(name='view_107')]
buf308.node.kernel = extern_kernels.mm


buf309: SchedulerNode(ComputedBuffer)
buf309.writes = 
    [   MemoryDep(name='buf309', index=c0, size=(16384, 128)),
        MemoryDep(name='buf309', index=c0, size=(16384,))]
buf309.unmet_dependencies = [MemoryDep(name='buf306', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf309.met_dependencies = []
buf309.group.device = cuda:0
buf309.group.iteration = (16384, 128)
buf309.sizes = ([4, 4096], [128])
class buf309_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf309', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = 
    [   MemoryDep(name='buf310', index=c0, size=(4096, 4)),
        MemoryDep(name='buf310', index=c0, size=(4096,))]
buf310.unmet_dependencies = [MemoryDep(name='buf309', index=c0 + 4096*c1, size=(4096, 4))]
buf310.met_dependencies = []
buf310.group.device = cuda:0
buf310.group.iteration = (4096, 4)
buf310.sizes = ([4096], [4])
class buf310_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf310', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = [MemoryDep(name='buf311', index=c0, size=(2097152,))]
buf311.unmet_dependencies = [MemoryDep(name='buf304', index=c0, size=(2097152,))]
buf311.met_dependencies = []
buf311.group.device = cuda:0
buf311.group.iteration = (2097152, 1)
buf311.sizes = ([2097152], [])
class buf311_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf311', get_index_1, load, None)
        return store


buf312: ExternKernelSchedulerNode(ExternKernelOut)
buf312.writes = [StarDep(name='buf312')]
buf312.unmet_dependencies = [StarDep(name='buf311')]
buf312.met_dependencies = [StarDep(name='permute_163')]
buf312.node.kernel = extern_kernels.mm


buf313: ExternKernelSchedulerNode(ExternKernelOut)
buf313.writes = [StarDep(name='buf313')]
buf313.unmet_dependencies = [StarDep(name='buf311')]
buf313.met_dependencies = [StarDep(name='view_107')]
buf313.node.kernel = extern_kernels.mm


buf314: SchedulerNode(ComputedBuffer)
buf314.writes = 
    [   MemoryDep(name='buf314', index=c0, size=(4096, 512)),
        MemoryDep(name='buf314', index=c0, size=(4096,))]
buf314.unmet_dependencies = [MemoryDep(name='buf311', index=c0, size=(2097152,))]
buf314.met_dependencies = []
buf314.group.device = cuda:0
buf314.group.iteration = (4096, 512)
buf314.sizes = ([4096], [512])
class buf314_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf314', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = [MemoryDep(name='buf315', index=c0, size=(2097152,))]
buf315.unmet_dependencies = [   MemoryDep(name='buf305', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf315.met_dependencies = []
buf315.group.device = cuda:0
buf315.group.iteration = (2097152, 1)
buf315.sizes = ([512, 4096], [])
class buf315_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf315', get_index_1, load, None)
        return store


buf316: ExternKernelSchedulerNode(ExternKernelOut)
buf316.writes = [StarDep(name='buf316')]
buf316.unmet_dependencies = [StarDep(name='buf315')]
buf316.met_dependencies = [StarDep(name='permute_167')]
buf316.node.kernel = extern_kernels.mm


buf317: ExternKernelSchedulerNode(ExternKernelOut)
buf317.writes = [StarDep(name='buf317')]
buf317.unmet_dependencies = [StarDep(name='buf315')]
buf317.met_dependencies = [StarDep(name='view_107')]
buf317.node.kernel = extern_kernels.mm


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = 
    [   MemoryDep(name='buf318', index=c0, size=(16384, 128)),
        MemoryDep(name='buf318', index=c0, size=(16384,))]
buf318.unmet_dependencies = [MemoryDep(name='buf315', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf318.met_dependencies = []
buf318.group.device = cuda:0
buf318.group.iteration = (16384, 128)
buf318.sizes = ([4, 4096], [128])
class buf318_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf318', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = 
    [   MemoryDep(name='buf319', index=c0, size=(4096, 4)),
        MemoryDep(name='buf319', index=c0, size=(4096,))]
buf319.unmet_dependencies = [MemoryDep(name='buf318', index=c0 + 4096*c1, size=(4096, 4))]
buf319.met_dependencies = []
buf319.group.device = cuda:0
buf319.group.iteration = (4096, 4)
buf319.sizes = ([4096], [4])
class buf319_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf319', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf320: SchedulerNode(ComputedBuffer)
buf320.writes = [MemoryDep(name='buf320', index=c0, size=(2097152,))]
buf320.unmet_dependencies = 
    [   MemoryDep(name='buf293', index=c0, size=(2097152,)),
        MemoryDep(name='buf307', index=c0, size=(2097152,)),
        MemoryDep(name='buf312', index=c0, size=(2097152,)),
        MemoryDep(name='buf316', index=c0, size=(2097152,))]
buf320.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf320.group.device = cuda:0
buf320.group.iteration = (2097152, 1)
buf320.sizes = ([512, 4096], [])
class buf320_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf316', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf320', get_index_5, mul, None)
        return store


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = 
    [   MemoryDep(name='buf321', index=c0, size=(512, 4096)),
        MemoryDep(name='buf321', index=c0, size=(512,))]
buf321.unmet_dependencies = [MemoryDep(name='buf320', index=c0, size=(2097152,))]
buf321.met_dependencies = []
buf321.group.device = cuda:0
buf321.group.iteration = (512, 4096)
buf321.sizes = ([512], [4096])
class buf321_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf321', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf322: SchedulerNode(ComputedBuffer)
buf322.writes = 
    [   MemoryDep(name='buf322', index=c0, size=(512, 4096)),
        MemoryDep(name='buf322', index=c0, size=(512,))]
buf322.unmet_dependencies = [MemoryDep(name='buf320', index=c0, size=(2097152,))]
buf322.met_dependencies = [MemoryDep(name='mul_41', index=c0, size=(2097152,))]
buf322.group.device = cuda:0
buf322.group.iteration = (512, 4096)
buf322.sizes = ([512], [4096])
class buf322_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_41', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf322', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = [MemoryDep(name='buf323', index=c0, size=(2097152,))]
buf323.unmet_dependencies = 
    [   MemoryDep(name='buf320', index=c0, size=(2097152,)),
        MemoryDep(name='buf321', index=c0, size=(512, 4096)),
        MemoryDep(name='buf322', index=c0, size=(512, 4096))]
buf323.met_dependencies = 
    [   MemoryDep(name='div_51', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_41', index=c0, size=(2097152,))]
buf323.group.device = cuda:0
buf323.group.iteration = (2097152, 1)
buf323.sizes = ([512, 4096], [])
class buf323_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf320', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf321', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_41', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf322', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf323', get_index_5, mul_2, None)
        return store


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = 
    [   MemoryDep(name='buf324', index=c0, size=(4096, 512)),
        MemoryDep(name='buf324', index=c0, size=(4096,))]
buf324.unmet_dependencies = 
    [   MemoryDep(name='buf293', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf307', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf312', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf316', index=c0 + 4096*c1, size=(4096, 512))]
buf324.met_dependencies = [MemoryDep(name='mul_41', index=c0 + 4096*c1, size=(4096, 512))]
buf324.group.device = cuda:0
buf324.group.iteration = (4096, 512)
buf324.sizes = ([4096], [512])
class buf324_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf316', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_41', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf324', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = 
    [   MemoryDep(name='buf325', index=c0, size=(4096, 512)),
        MemoryDep(name='buf325', index=c0, size=(4096,))]
buf325.unmet_dependencies = 
    [   MemoryDep(name='buf293', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf307', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf312', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf316', index=c0 + 4096*c1, size=(4096, 512))]
buf325.met_dependencies = []
buf325.group.device = cuda:0
buf325.group.iteration = (4096, 512)
buf325.sizes = ([4096], [512])
class buf325_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf316', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf325', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf326: ExternKernelSchedulerNode(ExternKernelOut)
buf326.writes = [StarDep(name='buf326')]
buf326.unmet_dependencies = [StarDep(name='buf323')]
buf326.met_dependencies = [StarDep(name='permute_138')]
buf326.node.kernel = extern_kernels.mm


buf327: ExternKernelSchedulerNode(ExternKernelOut)
buf327.writes = [StarDep(name='buf327')]
buf327.unmet_dependencies = [StarDep(name='buf323')]
buf327.met_dependencies = [StarDep(name='view_105')]
buf327.node.kernel = extern_kernels.mm


buf328: SchedulerNode(ComputedBuffer)
buf328.writes = 
    [   MemoryDep(name='buf328', index=c0, size=(16384, 128)),
        MemoryDep(name='buf328', index=c0, size=(16384,))]
buf328.unmet_dependencies = [MemoryDep(name='buf323', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf328.met_dependencies = []
buf328.group.device = cuda:0
buf328.group.iteration = (16384, 128)
buf328.sizes = ([4, 4096], [128])
class buf328_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf328', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = 
    [   MemoryDep(name='buf329', index=c0, size=(4096, 4)),
        MemoryDep(name='buf329', index=c0, size=(4096,))]
buf329.unmet_dependencies = [MemoryDep(name='buf328', index=c0 + 4096*c1, size=(4096, 4))]
buf329.met_dependencies = []
buf329.group.device = cuda:0
buf329.group.iteration = (4096, 4)
buf329.sizes = ([4096], [4])
class buf329_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf329', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf330: SchedulerNode(ComputedBuffer)
buf330.writes = [MemoryDep(name='buf330', index=c0, size=(8388608,))]
buf330.unmet_dependencies = [MemoryDep(name='buf326', index=c0, size=(8388608,))]
buf330.met_dependencies = 
    [   MemoryDep(name='addmm_29', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_4', index=c0, size=(8388608,))]
buf330.group.device = cuda:0
buf330.group.iteration = (8388608, 1)
buf330.sizes = ([8388608], [])
class buf330_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_29', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_4', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_4', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf326', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_29', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_4', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_4', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_29', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf326', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_4', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf330', get_index_11, add_2, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = [MemoryDep(name='buf331', index=c0, size=(8388608,))]
buf331.unmet_dependencies = [MemoryDep(name='buf330', index=c0, size=(8388608,))]
buf331.met_dependencies = []
buf331.group.device = cuda:0
buf331.group.iteration = (8388608, 1)
buf331.sizes = ([8388608], [])
class buf331_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf331', get_index_1, load, None)
        return store


buf332: ExternKernelSchedulerNode(ExternKernelOut)
buf332.writes = [StarDep(name='buf332')]
buf332.unmet_dependencies = [StarDep(name='buf331')]
buf332.met_dependencies = [StarDep(name='permute_142')]
buf332.node.kernel = extern_kernels.mm


buf333: ExternKernelSchedulerNode(ExternKernelOut)
buf333.writes = [StarDep(name='buf333')]
buf333.unmet_dependencies = [StarDep(name='buf331')]
buf333.met_dependencies = [StarDep(name='view_103')]
buf333.node.kernel = extern_kernels.mm


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = 
    [   MemoryDep(name='buf334', index=c0, size=(16384, 512)),
        MemoryDep(name='buf334', index=c0, size=(16384,))]
buf334.unmet_dependencies = [MemoryDep(name='buf331', index=c0 + 16384*c1, size=(16384, 512))]
buf334.met_dependencies = []
buf334.group.device = cuda:0
buf334.group.iteration = (16384, 512)
buf334.sizes = ([16384], [512])
class buf334_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf334', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = 
    [   MemoryDep(name='buf335', index=c0, size=(512, 4096)),
        MemoryDep(name='buf335', index=c0, size=(512,))]
buf335.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0, size=(2097152,)),
        MemoryDep(name='buf332', index=c0, size=(2097152,))]
buf335.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf335.group.device = cuda:0
buf335.group.iteration = (512, 4096)
buf335.sizes = ([512], [4096])
class buf335_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf335', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf336: SchedulerNode(ComputedBuffer)
buf336.writes = 
    [   MemoryDep(name='buf336', index=c0, size=(512, 4096)),
        MemoryDep(name='buf336', index=c0, size=(512,))]
buf336.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0, size=(2097152,)),
        MemoryDep(name='buf332', index=c0, size=(2097152,))]
buf336.met_dependencies = 
    [   MemoryDep(name='mul_35', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf336.group.device = cuda:0
buf336.group.iteration = (512, 4096)
buf336.sizes = ([512], [4096])
class buf336_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf336', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep(name='buf337', index=c0, size=(2097152,))]
buf337.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0, size=(2097152,)),
        MemoryDep(name='buf332', index=c0, size=(2097152,)),
        MemoryDep(name='buf335', index=c0, size=(512, 4096)),
        MemoryDep(name='buf336', index=c0, size=(512, 4096))]
buf337.met_dependencies = 
    [   MemoryDep(name='div_52', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_35', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf337.group.device = cuda:0
buf337.group.iteration = (2097152, 1)
buf337.sizes = ([512, 4096], [])
class buf337_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf332', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf335', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_35', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf336', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf337', get_index_7, mul_3, None)
        return store


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = 
    [   MemoryDep(name='buf338', index=c0, size=(4096, 512)),
        MemoryDep(name='buf338', index=c0, size=(4096,))]
buf338.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf332', index=c0 + 4096*c1, size=(4096, 512))]
buf338.met_dependencies = [MemoryDep(name='mul_35', index=c0 + 4096*c1, size=(4096, 512))]
buf338.group.device = cuda:0
buf338.group.iteration = (4096, 512)
buf338.sizes = ([4096], [512])
class buf338_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_35', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf338', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = 
    [   MemoryDep(name='buf339', index=c0, size=(4096, 512)),
        MemoryDep(name='buf339', index=c0, size=(4096,))]
buf339.unmet_dependencies = 
    [   MemoryDep(name='buf323', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf332', index=c0 + 4096*c1, size=(4096, 512))]
buf339.met_dependencies = []
buf339.group.device = cuda:0
buf339.group.iteration = (4096, 512)
buf339.sizes = ([4096], [512])
class buf339_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf339', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf340: ExternKernelSchedulerNode(ExternKernelOut)
buf340.writes = [StarDep(name='buf340')]
buf340.unmet_dependencies = [StarDep(name='buf337')]
buf340.met_dependencies = [StarDep(name='permute_146')]
buf340.node.kernel = extern_kernels.mm


buf341: ExternKernelSchedulerNode(ExternKernelOut)
buf341.writes = [StarDep(name='buf341')]
buf341.unmet_dependencies = [StarDep(name='buf337')]
buf341.met_dependencies = [StarDep(name='view_101')]
buf341.node.kernel = extern_kernels.mm


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = 
    [   MemoryDep(name='buf342', index=c0, size=(16384, 128)),
        MemoryDep(name='buf342', index=c0, size=(16384,))]
buf342.unmet_dependencies = [MemoryDep(name='buf337', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf342.met_dependencies = []
buf342.group.device = cuda:0
buf342.group.iteration = (16384, 128)
buf342.sizes = ([4, 4096], [128])
class buf342_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf342', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = 
    [   MemoryDep(name='buf343', index=c0, size=(4096, 4)),
        MemoryDep(name='buf343', index=c0, size=(4096,))]
buf343.unmet_dependencies = [MemoryDep(name='buf342', index=c0 + 4096*c1, size=(4096, 4))]
buf343.met_dependencies = []
buf343.group.device = cuda:0
buf343.group.iteration = (4096, 4)
buf343.sizes = ([4096], [4])
class buf343_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf343', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf344: ExternKernelSchedulerNode(ExternKernelOut)
buf344.writes = [StarDep(name='buf344')]
buf344.unmet_dependencies = [StarDep(name='buf340')]
buf344.met_dependencies = [StarDep(name='permute_382')]
buf344.node.kernel = extern_kernels.bmm


buf345: ExternKernelSchedulerNode(ExternKernelOut)
buf345.writes = [StarDep(name='buf345')]
buf345.unmet_dependencies = [StarDep(name='buf340')]
buf345.met_dependencies = [StarDep(name='permute_383')]
buf345.node.kernel = extern_kernels.bmm


buf346: SchedulerNode(ComputedBuffer)
buf346.writes = 
    [   MemoryDep(name='buf346', index=c0, size=(32768, 512)),
        MemoryDep(name='buf346', index=c0, size=(32768,))]
buf346.unmet_dependencies = [MemoryDep(name='buf345', index=c0, size=(16777216,))]
buf346.met_dependencies = [MemoryDep(name='div_9', index=c0, size=(16777216,))]
buf346.group.device = cuda:0
buf346.group.iteration = (32768, 512)
buf346.sizes = ([32768], [512])
class buf346_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_9', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf346', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = [MemoryDep(name='buf347', index=c0, size=(16777216,))]
buf347.unmet_dependencies = 
    [   MemoryDep(name='buf345', index=c0, size=(16777216,)),
        MemoryDep(name='buf346', index=c0, size=(32768, 512))]
buf347.met_dependencies = [MemoryDep(name='div_9', index=c0, size=(16777216,))]
buf347.group.device = cuda:0
buf347.group.iteration = (16777216, 1)
buf347.sizes = ([32768, 512], [])
class buf347_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_9', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf346', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf347', get_index_4, div, None)
        return store


buf348: ExternKernelSchedulerNode(ExternKernelOut)
buf348.writes = [StarDep(name='buf348')]
buf348.unmet_dependencies = [StarDep(name='buf347')]
buf348.met_dependencies = [StarDep(name='permute_384')]
buf348.node.kernel = extern_kernels.bmm


buf349: ExternKernelSchedulerNode(ExternKernelOut)
buf349.writes = [StarDep(name='buf349')]
buf349.unmet_dependencies = [StarDep(name='buf347')]
buf349.met_dependencies = [StarDep(name='permute_385')]
buf349.node.kernel = extern_kernels.bmm


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = [MemoryDep(name='buf350', index=c0, size=(2097152,))]
buf350.unmet_dependencies = [   MemoryDep(name='buf344', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf350.met_dependencies = []
buf350.group.device = cuda:0
buf350.group.iteration = (2097152, 1)
buf350.sizes = ([512, 4096], [])
class buf350_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf350', get_index_1, load, None)
        return store


buf351: ExternKernelSchedulerNode(ExternKernelOut)
buf351.writes = [StarDep(name='buf351')]
buf351.unmet_dependencies = [StarDep(name='buf350')]
buf351.met_dependencies = [StarDep(name='permute_159')]
buf351.node.kernel = extern_kernels.mm


buf352: ExternKernelSchedulerNode(ExternKernelOut)
buf352.writes = [StarDep(name='buf352')]
buf352.unmet_dependencies = [StarDep(name='buf350')]
buf352.met_dependencies = [StarDep(name='view_86')]
buf352.node.kernel = extern_kernels.mm


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = 
    [   MemoryDep(name='buf353', index=c0, size=(16384, 128)),
        MemoryDep(name='buf353', index=c0, size=(16384,))]
buf353.unmet_dependencies = [MemoryDep(name='buf350', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf353.met_dependencies = []
buf353.group.device = cuda:0
buf353.group.iteration = (16384, 128)
buf353.sizes = ([4, 4096], [128])
class buf353_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf353', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf354: SchedulerNode(ComputedBuffer)
buf354.writes = 
    [   MemoryDep(name='buf354', index=c0, size=(4096, 4)),
        MemoryDep(name='buf354', index=c0, size=(4096,))]
buf354.unmet_dependencies = [MemoryDep(name='buf353', index=c0 + 4096*c1, size=(4096, 4))]
buf354.met_dependencies = []
buf354.group.device = cuda:0
buf354.group.iteration = (4096, 4)
buf354.sizes = ([4096], [4])
class buf354_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf354', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = [MemoryDep(name='buf355', index=c0, size=(2097152,))]
buf355.unmet_dependencies = [MemoryDep(name='buf348', index=c0, size=(2097152,))]
buf355.met_dependencies = []
buf355.group.device = cuda:0
buf355.group.iteration = (2097152, 1)
buf355.sizes = ([2097152], [])
class buf355_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf355', get_index_1, load, None)
        return store


buf356: ExternKernelSchedulerNode(ExternKernelOut)
buf356.writes = [StarDep(name='buf356')]
buf356.unmet_dependencies = [StarDep(name='buf355')]
buf356.met_dependencies = [StarDep(name='permute_163')]
buf356.node.kernel = extern_kernels.mm


buf357: ExternKernelSchedulerNode(ExternKernelOut)
buf357.writes = [StarDep(name='buf357')]
buf357.unmet_dependencies = [StarDep(name='buf355')]
buf357.met_dependencies = [StarDep(name='view_86')]
buf357.node.kernel = extern_kernels.mm


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = 
    [   MemoryDep(name='buf358', index=c0, size=(4096, 512)),
        MemoryDep(name='buf358', index=c0, size=(4096,))]
buf358.unmet_dependencies = [MemoryDep(name='buf355', index=c0, size=(2097152,))]
buf358.met_dependencies = []
buf358.group.device = cuda:0
buf358.group.iteration = (4096, 512)
buf358.sizes = ([4096], [512])
class buf358_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf358', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(2097152,))]
buf359.unmet_dependencies = [   MemoryDep(name='buf349', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf359.met_dependencies = []
buf359.group.device = cuda:0
buf359.group.iteration = (2097152, 1)
buf359.sizes = ([512, 4096], [])
class buf359_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf359', get_index_1, load, None)
        return store


buf360: ExternKernelSchedulerNode(ExternKernelOut)
buf360.writes = [StarDep(name='buf360')]
buf360.unmet_dependencies = [StarDep(name='buf359')]
buf360.met_dependencies = [StarDep(name='permute_167')]
buf360.node.kernel = extern_kernels.mm


buf361: ExternKernelSchedulerNode(ExternKernelOut)
buf361.writes = [StarDep(name='buf361')]
buf361.unmet_dependencies = [StarDep(name='buf359')]
buf361.met_dependencies = [StarDep(name='view_86')]
buf361.node.kernel = extern_kernels.mm


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = 
    [   MemoryDep(name='buf362', index=c0, size=(16384, 128)),
        MemoryDep(name='buf362', index=c0, size=(16384,))]
buf362.unmet_dependencies = [MemoryDep(name='buf359', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf362.met_dependencies = []
buf362.group.device = cuda:0
buf362.group.iteration = (16384, 128)
buf362.sizes = ([4, 4096], [128])
class buf362_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf362', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = 
    [   MemoryDep(name='buf363', index=c0, size=(4096, 4)),
        MemoryDep(name='buf363', index=c0, size=(4096,))]
buf363.unmet_dependencies = [MemoryDep(name='buf362', index=c0 + 4096*c1, size=(4096, 4))]
buf363.met_dependencies = []
buf363.group.device = cuda:0
buf363.group.iteration = (4096, 4)
buf363.sizes = ([4096], [4])
class buf363_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf363', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = [MemoryDep(name='buf364', index=c0, size=(2097152,))]
buf364.unmet_dependencies = 
    [   MemoryDep(name='buf337', index=c0, size=(2097152,)),
        MemoryDep(name='buf351', index=c0, size=(2097152,)),
        MemoryDep(name='buf356', index=c0, size=(2097152,)),
        MemoryDep(name='buf360', index=c0, size=(2097152,))]
buf364.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf364.group.device = cuda:0
buf364.group.iteration = (2097152, 1)
buf364.sizes = ([512, 4096], [])
class buf364_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf351', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf360', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf364', get_index_5, mul, None)
        return store


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = 
    [   MemoryDep(name='buf365', index=c0, size=(512, 4096)),
        MemoryDep(name='buf365', index=c0, size=(512,))]
buf365.unmet_dependencies = [MemoryDep(name='buf364', index=c0, size=(2097152,))]
buf365.met_dependencies = []
buf365.group.device = cuda:0
buf365.group.iteration = (512, 4096)
buf365.sizes = ([512], [4096])
class buf365_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf365', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = 
    [   MemoryDep(name='buf366', index=c0, size=(512, 4096)),
        MemoryDep(name='buf366', index=c0, size=(512,))]
buf366.unmet_dependencies = [MemoryDep(name='buf364', index=c0, size=(2097152,))]
buf366.met_dependencies = [MemoryDep(name='mul_33', index=c0, size=(2097152,))]
buf366.group.device = cuda:0
buf366.group.iteration = (512, 4096)
buf366.sizes = ([512], [4096])
class buf366_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_33', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf366', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = [MemoryDep(name='buf367', index=c0, size=(2097152,))]
buf367.unmet_dependencies = 
    [   MemoryDep(name='buf364', index=c0, size=(2097152,)),
        MemoryDep(name='buf365', index=c0, size=(512, 4096)),
        MemoryDep(name='buf366', index=c0, size=(512, 4096))]
buf367.met_dependencies = 
    [   MemoryDep(name='div_54', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_33', index=c0, size=(2097152,))]
buf367.group.device = cuda:0
buf367.group.iteration = (2097152, 1)
buf367.sizes = ([512, 4096], [])
class buf367_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf364', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf365', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_33', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf366', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf367', get_index_5, mul_2, None)
        return store


buf368: SchedulerNode(ComputedBuffer)
buf368.writes = 
    [   MemoryDep(name='buf368', index=c0, size=(4096, 512)),
        MemoryDep(name='buf368', index=c0, size=(4096,))]
buf368.unmet_dependencies = 
    [   MemoryDep(name='buf337', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf351', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf356', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf360', index=c0 + 4096*c1, size=(4096, 512))]
buf368.met_dependencies = [MemoryDep(name='mul_33', index=c0 + 4096*c1, size=(4096, 512))]
buf368.group.device = cuda:0
buf368.group.iteration = (4096, 512)
buf368.sizes = ([4096], [512])
class buf368_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf351', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf360', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_33', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf368', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = 
    [   MemoryDep(name='buf369', index=c0, size=(4096, 512)),
        MemoryDep(name='buf369', index=c0, size=(4096,))]
buf369.unmet_dependencies = 
    [   MemoryDep(name='buf337', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf351', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf356', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf360', index=c0 + 4096*c1, size=(4096, 512))]
buf369.met_dependencies = []
buf369.group.device = cuda:0
buf369.group.iteration = (4096, 512)
buf369.sizes = ([4096], [512])
class buf369_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf351', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf360', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf369', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf370: SchedulerNode(ComputedBuffer)
buf370.writes = [MemoryDep(name='buf370', index=c0, size=(4096,))]
buf370.unmet_dependencies = 
    [   MemoryDep(name='buf104', index=c0, size=(4096,)),
        MemoryDep(name='buf148', index=c0, size=(4096,)),
        MemoryDep(name='buf16', index=c0, size=(4096,)),
        MemoryDep(name='buf192', index=c0, size=(4096,)),
        MemoryDep(name='buf236', index=c0, size=(4096,)),
        MemoryDep(name='buf280', index=c0, size=(4096,)),
        MemoryDep(name='buf324', index=c0, size=(4096,)),
        MemoryDep(name='buf368', index=c0, size=(4096,)),
        MemoryDep(name='buf60', index=c0, size=(4096,))]
buf370.met_dependencies = []
buf370.group.device = cuda:0
buf370.group.iteration = (4096, 1)
buf370.sizes = ([4096], [])
class buf370_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf148', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf192', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf236', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf280', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf324', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf368', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf370', get_index_9, add_7, None)
        return store


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = [MemoryDep(name='buf371', index=c0, size=(4096,))]
buf371.unmet_dependencies = 
    [   MemoryDep(name='buf105', index=c0, size=(4096,)),
        MemoryDep(name='buf149', index=c0, size=(4096,)),
        MemoryDep(name='buf17', index=c0, size=(4096,)),
        MemoryDep(name='buf193', index=c0, size=(4096,)),
        MemoryDep(name='buf237', index=c0, size=(4096,)),
        MemoryDep(name='buf281', index=c0, size=(4096,)),
        MemoryDep(name='buf325', index=c0, size=(4096,)),
        MemoryDep(name='buf369', index=c0, size=(4096,)),
        MemoryDep(name='buf61', index=c0, size=(4096,))]
buf371.met_dependencies = []
buf371.group.device = cuda:0
buf371.group.iteration = (4096, 1)
buf371.sizes = ([4096], [])
class buf371_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf149', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf193', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf237', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf281', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf325', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf369', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf371', get_index_9, add_7, None)
        return store


buf372: ExternKernelSchedulerNode(ExternKernelOut)
buf372.writes = [StarDep(name='buf372')]
buf372.unmet_dependencies = [StarDep(name='buf367')]
buf372.met_dependencies = [StarDep(name='permute_138')]
buf372.node.kernel = extern_kernels.mm


buf373: ExternKernelSchedulerNode(ExternKernelOut)
buf373.writes = [StarDep(name='buf373')]
buf373.unmet_dependencies = [StarDep(name='buf367')]
buf373.met_dependencies = [StarDep(name='view_84')]
buf373.node.kernel = extern_kernels.mm


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = 
    [   MemoryDep(name='buf374', index=c0, size=(16384, 128)),
        MemoryDep(name='buf374', index=c0, size=(16384,))]
buf374.unmet_dependencies = [MemoryDep(name='buf367', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf374.met_dependencies = []
buf374.group.device = cuda:0
buf374.group.iteration = (16384, 128)
buf374.sizes = ([4, 4096], [128])
class buf374_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf374', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf375: SchedulerNode(ComputedBuffer)
buf375.writes = 
    [   MemoryDep(name='buf375', index=c0, size=(4096, 4)),
        MemoryDep(name='buf375', index=c0, size=(4096,))]
buf375.unmet_dependencies = [MemoryDep(name='buf374', index=c0 + 4096*c1, size=(4096, 4))]
buf375.met_dependencies = []
buf375.group.device = cuda:0
buf375.group.iteration = (4096, 4)
buf375.sizes = ([4096], [4])
class buf375_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf375', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf376: SchedulerNode(ComputedBuffer)
buf376.writes = [MemoryDep(name='buf376', index=c0, size=(4096,))]
buf376.unmet_dependencies = 
    [   MemoryDep(name='buf109', index=c0, size=(4096,)),
        MemoryDep(name='buf153', index=c0, size=(4096,)),
        MemoryDep(name='buf197', index=c0, size=(4096,)),
        MemoryDep(name='buf21', index=c0, size=(4096,)),
        MemoryDep(name='buf241', index=c0, size=(4096,)),
        MemoryDep(name='buf285', index=c0, size=(4096,)),
        MemoryDep(name='buf329', index=c0, size=(4096,)),
        MemoryDep(name='buf375', index=c0, size=(4096,)),
        MemoryDep(name='buf65', index=c0, size=(4096,))]
buf376.met_dependencies = []
buf376.group.device = cuda:0
buf376.group.iteration = (4096, 1)
buf376.sizes = ([4096], [])
class buf376_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf109', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf153', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf197', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf241', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf285', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf329', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf375', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf376', get_index_9, add_7, None)
        return store


buf377: SchedulerNode(ComputedBuffer)
buf377.writes = [MemoryDep(name='buf377', index=c0, size=(67108864,))]
buf377.unmet_dependencies = 
    [   MemoryDep(name='buf107', index=c0, size=(67108864,)),
        MemoryDep(name='buf151', index=c0, size=(67108864,)),
        MemoryDep(name='buf19', index=c0, size=(67108864,)),
        MemoryDep(name='buf195', index=c0, size=(67108864,)),
        MemoryDep(name='buf239', index=c0, size=(67108864,)),
        MemoryDep(name='buf283', index=c0, size=(67108864,)),
        MemoryDep(name='buf327', index=c0, size=(67108864,)),
        MemoryDep(name='buf373', index=c0, size=(67108864,)),
        MemoryDep(name='buf63', index=c0, size=(67108864,))]
buf377.met_dependencies = []
buf377.group.device = cuda:0
buf377.group.iteration = (67108864, 1)
buf377.sizes = ([67108864], [])
class buf377_loop_body:
    var_ranges = {z0: 67108864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf151', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf195', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf239', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf283', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf327', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf373', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf377', get_index_9, add_7, None)
        return store


buf378: SchedulerNode(ComputedBuffer)
buf378.writes = [MemoryDep(name='buf378', index=c0, size=(8388608,))]
buf378.unmet_dependencies = [MemoryDep(name='buf372', index=c0, size=(8388608,))]
buf378.met_dependencies = 
    [   MemoryDep(name='addmm_23', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_3', index=c0, size=(8388608,))]
buf378.group.device = cuda:0
buf378.group.iteration = (8388608, 1)
buf378.sizes = ([8388608], [])
class buf378_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_23', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_3', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_3', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf372', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_23', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_3', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_3', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_23', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf372', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_3', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf378', get_index_11, add_2, None)
        return store


buf379: SchedulerNode(ComputedBuffer)
buf379.writes = [MemoryDep(name='buf379', index=c0, size=(8388608,))]
buf379.unmet_dependencies = [MemoryDep(name='buf378', index=c0, size=(8388608,))]
buf379.met_dependencies = []
buf379.group.device = cuda:0
buf379.group.iteration = (8388608, 1)
buf379.sizes = ([8388608], [])
class buf379_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf379', get_index_1, load, None)
        return store


buf380: ExternKernelSchedulerNode(ExternKernelOut)
buf380.writes = [StarDep(name='buf380')]
buf380.unmet_dependencies = [StarDep(name='buf379')]
buf380.met_dependencies = [StarDep(name='permute_142')]
buf380.node.kernel = extern_kernels.mm


buf381: ExternKernelSchedulerNode(ExternKernelOut)
buf381.writes = [StarDep(name='buf381')]
buf381.unmet_dependencies = [StarDep(name='buf379')]
buf381.met_dependencies = [StarDep(name='view_82')]
buf381.node.kernel = extern_kernels.mm


buf382: SchedulerNode(ComputedBuffer)
buf382.writes = 
    [   MemoryDep(name='buf382', index=c0, size=(16384, 512)),
        MemoryDep(name='buf382', index=c0, size=(16384,))]
buf382.unmet_dependencies = [MemoryDep(name='buf379', index=c0 + 16384*c1, size=(16384, 512))]
buf382.met_dependencies = []
buf382.group.device = cuda:0
buf382.group.iteration = (16384, 512)
buf382.sizes = ([16384], [512])
class buf382_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf382', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf383: SchedulerNode(ComputedBuffer)
buf383.writes = [MemoryDep(name='buf383', index=c0, size=(16384,))]
buf383.unmet_dependencies = 
    [   MemoryDep(name='buf114', index=c0, size=(16384,)),
        MemoryDep(name='buf158', index=c0, size=(16384,)),
        MemoryDep(name='buf202', index=c0, size=(16384,)),
        MemoryDep(name='buf246', index=c0, size=(16384,)),
        MemoryDep(name='buf26', index=c0, size=(16384,)),
        MemoryDep(name='buf290', index=c0, size=(16384,)),
        MemoryDep(name='buf334', index=c0, size=(16384,)),
        MemoryDep(name='buf382', index=c0, size=(16384,)),
        MemoryDep(name='buf70', index=c0, size=(16384,))]
buf383.met_dependencies = []
buf383.group.device = cuda:0
buf383.group.iteration = (16384, 1)
buf383.sizes = ([16384], [])
class buf383_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf114', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf158', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf202', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf246', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf290', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf334', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf382', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf383', get_index_9, add_7, None)
        return store


buf384: SchedulerNode(ComputedBuffer)
buf384.writes = [MemoryDep(name='buf384', index=c0, size=(67108864,))]
buf384.unmet_dependencies = 
    [   MemoryDep(name='buf113', index=c0, size=(67108864,)),
        MemoryDep(name='buf157', index=c0, size=(67108864,)),
        MemoryDep(name='buf201', index=c0, size=(67108864,)),
        MemoryDep(name='buf245', index=c0, size=(67108864,)),
        MemoryDep(name='buf25', index=c0, size=(67108864,)),
        MemoryDep(name='buf289', index=c0, size=(67108864,)),
        MemoryDep(name='buf333', index=c0, size=(67108864,)),
        MemoryDep(name='buf381', index=c0, size=(67108864,)),
        MemoryDep(name='buf69', index=c0, size=(67108864,))]
buf384.met_dependencies = []
buf384.group.device = cuda:0
buf384.group.iteration = (67108864, 1)
buf384.sizes = ([67108864], [])
class buf384_loop_body:
    var_ranges = {z0: 67108864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf113', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf157', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf201', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf245', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf289', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf333', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf381', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf384', get_index_9, add_7, None)
        return store


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = 
    [   MemoryDep(name='buf385', index=c0, size=(512, 4096)),
        MemoryDep(name='buf385', index=c0, size=(512,))]
buf385.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0, size=(2097152,)),
        MemoryDep(name='buf380', index=c0, size=(2097152,))]
buf385.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf385.group.device = cuda:0
buf385.group.iteration = (512, 4096)
buf385.sizes = ([512], [4096])
class buf385_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf385', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf386: SchedulerNode(ComputedBuffer)
buf386.writes = 
    [   MemoryDep(name='buf386', index=c0, size=(512, 4096)),
        MemoryDep(name='buf386', index=c0, size=(512,))]
buf386.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0, size=(2097152,)),
        MemoryDep(name='buf380', index=c0, size=(2097152,))]
buf386.met_dependencies = 
    [   MemoryDep(name='mul_27', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf386.group.device = cuda:0
buf386.group.iteration = (512, 4096)
buf386.sizes = ([512], [4096])
class buf386_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_27', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf386', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf387: SchedulerNode(ComputedBuffer)
buf387.writes = [MemoryDep(name='buf387', index=c0, size=(2097152,))]
buf387.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0, size=(2097152,)),
        MemoryDep(name='buf380', index=c0, size=(2097152,)),
        MemoryDep(name='buf385', index=c0, size=(512, 4096)),
        MemoryDep(name='buf386', index=c0, size=(512, 4096))]
buf387.met_dependencies = 
    [   MemoryDep(name='div_55', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_27', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf387.group.device = cuda:0
buf387.group.iteration = (2097152, 1)
buf387.sizes = ([512, 4096], [])
class buf387_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf380', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf385', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_27', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf386', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf387', get_index_7, mul_3, None)
        return store


buf388: SchedulerNode(ComputedBuffer)
buf388.writes = 
    [   MemoryDep(name='buf388', index=c0, size=(4096, 512)),
        MemoryDep(name='buf388', index=c0, size=(4096,))]
buf388.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf380', index=c0 + 4096*c1, size=(4096, 512))]
buf388.met_dependencies = [MemoryDep(name='mul_27', index=c0 + 4096*c1, size=(4096, 512))]
buf388.group.device = cuda:0
buf388.group.iteration = (4096, 512)
buf388.sizes = ([4096], [512])
class buf388_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_27', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf388', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf389: SchedulerNode(ComputedBuffer)
buf389.writes = 
    [   MemoryDep(name='buf389', index=c0, size=(4096, 512)),
        MemoryDep(name='buf389', index=c0, size=(4096,))]
buf389.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf380', index=c0 + 4096*c1, size=(4096, 512))]
buf389.met_dependencies = []
buf389.group.device = cuda:0
buf389.group.iteration = (4096, 512)
buf389.sizes = ([4096], [512])
class buf389_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf389', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf390: SchedulerNode(ComputedBuffer)
buf390.writes = [MemoryDep(name='buf390', index=c0, size=(4096,))]
buf390.unmet_dependencies = 
    [   MemoryDep(name='buf118', index=c0, size=(4096,)),
        MemoryDep(name='buf162', index=c0, size=(4096,)),
        MemoryDep(name='buf206', index=c0, size=(4096,)),
        MemoryDep(name='buf250', index=c0, size=(4096,)),
        MemoryDep(name='buf294', index=c0, size=(4096,)),
        MemoryDep(name='buf30', index=c0, size=(4096,)),
        MemoryDep(name='buf338', index=c0, size=(4096,)),
        MemoryDep(name='buf388', index=c0, size=(4096,)),
        MemoryDep(name='buf74', index=c0, size=(4096,))]
buf390.met_dependencies = []
buf390.group.device = cuda:0
buf390.group.iteration = (4096, 1)
buf390.sizes = ([4096], [])
class buf390_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf162', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf206', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf250', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf294', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf338', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf388', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf390', get_index_9, add_7, None)
        return store


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = [MemoryDep(name='buf391', index=c0, size=(4096,))]
buf391.unmet_dependencies = 
    [   MemoryDep(name='buf119', index=c0, size=(4096,)),
        MemoryDep(name='buf163', index=c0, size=(4096,)),
        MemoryDep(name='buf207', index=c0, size=(4096,)),
        MemoryDep(name='buf251', index=c0, size=(4096,)),
        MemoryDep(name='buf295', index=c0, size=(4096,)),
        MemoryDep(name='buf31', index=c0, size=(4096,)),
        MemoryDep(name='buf339', index=c0, size=(4096,)),
        MemoryDep(name='buf389', index=c0, size=(4096,)),
        MemoryDep(name='buf75', index=c0, size=(4096,))]
buf391.met_dependencies = []
buf391.group.device = cuda:0
buf391.group.iteration = (4096, 1)
buf391.sizes = ([4096], [])
class buf391_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf163', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf207', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf251', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf295', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf339', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf389', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf391', get_index_9, add_7, None)
        return store


buf392: ExternKernelSchedulerNode(ExternKernelOut)
buf392.writes = [StarDep(name='buf392')]
buf392.unmet_dependencies = [StarDep(name='buf387')]
buf392.met_dependencies = [StarDep(name='permute_146')]
buf392.node.kernel = extern_kernels.mm


buf393: ExternKernelSchedulerNode(ExternKernelOut)
buf393.writes = [StarDep(name='buf393')]
buf393.unmet_dependencies = [StarDep(name='buf387')]
buf393.met_dependencies = [StarDep(name='view_80')]
buf393.node.kernel = extern_kernels.mm


buf394: SchedulerNode(ComputedBuffer)
buf394.writes = 
    [   MemoryDep(name='buf394', index=c0, size=(16384, 128)),
        MemoryDep(name='buf394', index=c0, size=(16384,))]
buf394.unmet_dependencies = [MemoryDep(name='buf387', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf394.met_dependencies = []
buf394.group.device = cuda:0
buf394.group.iteration = (16384, 128)
buf394.sizes = ([4, 4096], [128])
class buf394_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf394', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf395: SchedulerNode(ComputedBuffer)
buf395.writes = 
    [   MemoryDep(name='buf395', index=c0, size=(4096, 4)),
        MemoryDep(name='buf395', index=c0, size=(4096,))]
buf395.unmet_dependencies = [MemoryDep(name='buf394', index=c0 + 4096*c1, size=(4096, 4))]
buf395.met_dependencies = []
buf395.group.device = cuda:0
buf395.group.iteration = (4096, 4)
buf395.sizes = ([4096], [4])
class buf395_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf395', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf396: SchedulerNode(ComputedBuffer)
buf396.writes = [MemoryDep(name='buf396', index=c0, size=(4096,))]
buf396.unmet_dependencies = 
    [   MemoryDep(name='buf123', index=c0, size=(4096,)),
        MemoryDep(name='buf167', index=c0, size=(4096,)),
        MemoryDep(name='buf211', index=c0, size=(4096,)),
        MemoryDep(name='buf255', index=c0, size=(4096,)),
        MemoryDep(name='buf299', index=c0, size=(4096,)),
        MemoryDep(name='buf343', index=c0, size=(4096,)),
        MemoryDep(name='buf35', index=c0, size=(4096,)),
        MemoryDep(name='buf395', index=c0, size=(4096,)),
        MemoryDep(name='buf79', index=c0, size=(4096,))]
buf396.met_dependencies = []
buf396.group.device = cuda:0
buf396.group.iteration = (4096, 1)
buf396.sizes = ([4096], [])
class buf396_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf167', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf211', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf255', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf299', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf343', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf395', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf396', get_index_9, add_7, None)
        return store


buf397: SchedulerNode(ComputedBuffer)
buf397.writes = [MemoryDep(name='buf397', index=c0, size=(16777216,))]
buf397.unmet_dependencies = 
    [   MemoryDep(name='buf121', index=c0, size=(16777216,)),
        MemoryDep(name='buf165', index=c0, size=(16777216,)),
        MemoryDep(name='buf209', index=c0, size=(16777216,)),
        MemoryDep(name='buf253', index=c0, size=(16777216,)),
        MemoryDep(name='buf297', index=c0, size=(16777216,)),
        MemoryDep(name='buf33', index=c0, size=(16777216,)),
        MemoryDep(name='buf341', index=c0, size=(16777216,)),
        MemoryDep(name='buf393', index=c0, size=(16777216,)),
        MemoryDep(name='buf77', index=c0, size=(16777216,))]
buf397.met_dependencies = []
buf397.group.device = cuda:0
buf397.group.iteration = (16777216, 1)
buf397.sizes = ([16777216], [])
class buf397_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf121', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf165', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf209', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf253', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf297', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf341', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf393', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf397', get_index_9, add_7, None)
        return store


buf398: ExternKernelSchedulerNode(ExternKernelOut)
buf398.writes = [StarDep(name='buf398')]
buf398.unmet_dependencies = [StarDep(name='buf392')]
buf398.met_dependencies = [StarDep(name='permute_415')]
buf398.node.kernel = extern_kernels.bmm


buf399: ExternKernelSchedulerNode(ExternKernelOut)
buf399.writes = [StarDep(name='buf399')]
buf399.unmet_dependencies = [StarDep(name='buf392')]
buf399.met_dependencies = [StarDep(name='permute_416')]
buf399.node.kernel = extern_kernels.bmm


buf400: SchedulerNode(ComputedBuffer)
buf400.writes = 
    [   MemoryDep(name='buf400', index=c0, size=(32768, 512)),
        MemoryDep(name='buf400', index=c0, size=(32768,))]
buf400.unmet_dependencies = [MemoryDep(name='buf399', index=c0, size=(16777216,))]
buf400.met_dependencies = [MemoryDep(name='div_7', index=c0, size=(16777216,))]
buf400.group.device = cuda:0
buf400.group.iteration = (32768, 512)
buf400.sizes = ([32768], [512])
class buf400_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_7', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf400', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = [MemoryDep(name='buf401', index=c0, size=(16777216,))]
buf401.unmet_dependencies = 
    [   MemoryDep(name='buf399', index=c0, size=(16777216,)),
        MemoryDep(name='buf400', index=c0, size=(32768, 512))]
buf401.met_dependencies = [MemoryDep(name='div_7', index=c0, size=(16777216,))]
buf401.group.device = cuda:0
buf401.group.iteration = (16777216, 1)
buf401.sizes = ([32768, 512], [])
class buf401_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_7', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_7', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf400', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf401', get_index_4, div, None)
        return store


buf402: ExternKernelSchedulerNode(ExternKernelOut)
buf402.writes = [StarDep(name='buf402')]
buf402.unmet_dependencies = [StarDep(name='buf401')]
buf402.met_dependencies = [StarDep(name='permute_417')]
buf402.node.kernel = extern_kernels.bmm


buf403: ExternKernelSchedulerNode(ExternKernelOut)
buf403.writes = [StarDep(name='buf403')]
buf403.unmet_dependencies = [StarDep(name='buf401')]
buf403.met_dependencies = [StarDep(name='permute_418')]
buf403.node.kernel = extern_kernels.bmm


buf404: SchedulerNode(ComputedBuffer)
buf404.writes = [MemoryDep(name='buf404', index=c0, size=(2097152,))]
buf404.unmet_dependencies = [   MemoryDep(name='buf398', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf404.met_dependencies = []
buf404.group.device = cuda:0
buf404.group.iteration = (2097152, 1)
buf404.sizes = ([512, 4096], [])
class buf404_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf404', get_index_1, load, None)
        return store


buf405: ExternKernelSchedulerNode(ExternKernelOut)
buf405.writes = [StarDep(name='buf405')]
buf405.unmet_dependencies = [StarDep(name='buf404')]
buf405.met_dependencies = [StarDep(name='permute_159')]
buf405.node.kernel = extern_kernels.mm


buf406: ExternKernelSchedulerNode(ExternKernelOut)
buf406.writes = [StarDep(name='buf406')]
buf406.unmet_dependencies = [StarDep(name='buf404')]
buf406.met_dependencies = [StarDep(name='view_65')]
buf406.node.kernel = extern_kernels.mm


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = 
    [   MemoryDep(name='buf407', index=c0, size=(16384, 128)),
        MemoryDep(name='buf407', index=c0, size=(16384,))]
buf407.unmet_dependencies = [MemoryDep(name='buf404', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf407.met_dependencies = []
buf407.group.device = cuda:0
buf407.group.iteration = (16384, 128)
buf407.sizes = ([4, 4096], [128])
class buf407_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf407', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf408: SchedulerNode(ComputedBuffer)
buf408.writes = 
    [   MemoryDep(name='buf408', index=c0, size=(4096, 4)),
        MemoryDep(name='buf408', index=c0, size=(4096,))]
buf408.unmet_dependencies = [MemoryDep(name='buf407', index=c0 + 4096*c1, size=(4096, 4))]
buf408.met_dependencies = []
buf408.group.device = cuda:0
buf408.group.iteration = (4096, 4)
buf408.sizes = ([4096], [4])
class buf408_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf408', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf409: SchedulerNode(ComputedBuffer)
buf409.writes = [MemoryDep(name='buf409', index=c0, size=(4096,))]
buf409.unmet_dependencies = 
    [   MemoryDep(name='buf134', index=c0, size=(4096,)),
        MemoryDep(name='buf178', index=c0, size=(4096,)),
        MemoryDep(name='buf222', index=c0, size=(4096,)),
        MemoryDep(name='buf266', index=c0, size=(4096,)),
        MemoryDep(name='buf310', index=c0, size=(4096,)),
        MemoryDep(name='buf354', index=c0, size=(4096,)),
        MemoryDep(name='buf408', index=c0, size=(4096,)),
        MemoryDep(name='buf46', index=c0, size=(4096,)),
        MemoryDep(name='buf90', index=c0, size=(4096,))]
buf409.met_dependencies = []
buf409.group.device = cuda:0
buf409.group.iteration = (4096, 1)
buf409.sizes = ([4096], [])
class buf409_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf134', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf178', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf222', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf266', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf310', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf354', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf408', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf409', get_index_9, add_7, None)
        return store


buf410: SchedulerNode(ComputedBuffer)
buf410.writes = [MemoryDep(name='buf410', index=c0, size=(16777216,))]
buf410.unmet_dependencies = 
    [   MemoryDep(name='buf132', index=c0, size=(16777216,)),
        MemoryDep(name='buf176', index=c0, size=(16777216,)),
        MemoryDep(name='buf220', index=c0, size=(16777216,)),
        MemoryDep(name='buf264', index=c0, size=(16777216,)),
        MemoryDep(name='buf308', index=c0, size=(16777216,)),
        MemoryDep(name='buf352', index=c0, size=(16777216,)),
        MemoryDep(name='buf406', index=c0, size=(16777216,)),
        MemoryDep(name='buf44', index=c0, size=(16777216,)),
        MemoryDep(name='buf88', index=c0, size=(16777216,))]
buf410.met_dependencies = []
buf410.group.device = cuda:0
buf410.group.iteration = (16777216, 1)
buf410.sizes = ([16777216], [])
class buf410_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf176', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf220', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf264', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf308', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf352', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf406', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf410', get_index_9, add_7, None)
        return store


buf411: SchedulerNode(ComputedBuffer)
buf411.writes = [MemoryDep(name='buf411', index=c0, size=(2097152,))]
buf411.unmet_dependencies = [MemoryDep(name='buf402', index=c0, size=(2097152,))]
buf411.met_dependencies = []
buf411.group.device = cuda:0
buf411.group.iteration = (2097152, 1)
buf411.sizes = ([2097152], [])
class buf411_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf411', get_index_1, load, None)
        return store


buf412: ExternKernelSchedulerNode(ExternKernelOut)
buf412.writes = [StarDep(name='buf412')]
buf412.unmet_dependencies = [StarDep(name='buf411')]
buf412.met_dependencies = [StarDep(name='permute_163')]
buf412.node.kernel = extern_kernels.mm


buf413: ExternKernelSchedulerNode(ExternKernelOut)
buf413.writes = [StarDep(name='buf413')]
buf413.unmet_dependencies = [StarDep(name='buf411')]
buf413.met_dependencies = [StarDep(name='view_65')]
buf413.node.kernel = extern_kernels.mm


buf414: SchedulerNode(ComputedBuffer)
buf414.writes = 
    [   MemoryDep(name='buf414', index=c0, size=(4096, 512)),
        MemoryDep(name='buf414', index=c0, size=(4096,))]
buf414.unmet_dependencies = [MemoryDep(name='buf411', index=c0, size=(2097152,))]
buf414.met_dependencies = []
buf414.group.device = cuda:0
buf414.group.iteration = (4096, 512)
buf414.sizes = ([4096], [512])
class buf414_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf414', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf415: SchedulerNode(ComputedBuffer)
buf415.writes = [MemoryDep(name='buf415', index=c0, size=(4096,))]
buf415.unmet_dependencies = 
    [   MemoryDep(name='buf138', index=c0, size=(4096,)),
        MemoryDep(name='buf182', index=c0, size=(4096,)),
        MemoryDep(name='buf226', index=c0, size=(4096,)),
        MemoryDep(name='buf270', index=c0, size=(4096,)),
        MemoryDep(name='buf314', index=c0, size=(4096,)),
        MemoryDep(name='buf358', index=c0, size=(4096,)),
        MemoryDep(name='buf414', index=c0, size=(4096,)),
        MemoryDep(name='buf50', index=c0, size=(4096,)),
        MemoryDep(name='buf94', index=c0, size=(4096,))]
buf415.met_dependencies = []
buf415.group.device = cuda:0
buf415.group.iteration = (4096, 1)
buf415.sizes = ([4096], [])
class buf415_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf182', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf226', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf270', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf314', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf358', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf414', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf415', get_index_9, add_7, None)
        return store


buf416: SchedulerNode(ComputedBuffer)
buf416.writes = [MemoryDep(name='buf416', index=c0, size=(16777216,))]
buf416.unmet_dependencies = 
    [   MemoryDep(name='buf137', index=c0, size=(16777216,)),
        MemoryDep(name='buf181', index=c0, size=(16777216,)),
        MemoryDep(name='buf225', index=c0, size=(16777216,)),
        MemoryDep(name='buf269', index=c0, size=(16777216,)),
        MemoryDep(name='buf313', index=c0, size=(16777216,)),
        MemoryDep(name='buf357', index=c0, size=(16777216,)),
        MemoryDep(name='buf413', index=c0, size=(16777216,)),
        MemoryDep(name='buf49', index=c0, size=(16777216,)),
        MemoryDep(name='buf93', index=c0, size=(16777216,))]
buf416.met_dependencies = []
buf416.group.device = cuda:0
buf416.group.iteration = (16777216, 1)
buf416.sizes = ([16777216], [])
class buf416_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf181', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf225', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf269', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf313', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf357', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf413', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf416', get_index_9, add_7, None)
        return store


buf417: SchedulerNode(ComputedBuffer)
buf417.writes = [MemoryDep(name='buf417', index=c0, size=(2097152,))]
buf417.unmet_dependencies = [   MemoryDep(name='buf403', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf417.met_dependencies = []
buf417.group.device = cuda:0
buf417.group.iteration = (2097152, 1)
buf417.sizes = ([512, 4096], [])
class buf417_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf417', get_index_1, load, None)
        return store


buf418: ExternKernelSchedulerNode(ExternKernelOut)
buf418.writes = [StarDep(name='buf418')]
buf418.unmet_dependencies = [StarDep(name='buf417')]
buf418.met_dependencies = [StarDep(name='permute_167')]
buf418.node.kernel = extern_kernels.mm


buf419: ExternKernelSchedulerNode(ExternKernelOut)
buf419.writes = [StarDep(name='buf419')]
buf419.unmet_dependencies = [StarDep(name='buf417')]
buf419.met_dependencies = [StarDep(name='view_65')]
buf419.node.kernel = extern_kernels.mm


buf420: SchedulerNode(ComputedBuffer)
buf420.writes = 
    [   MemoryDep(name='buf420', index=c0, size=(16384, 128)),
        MemoryDep(name='buf420', index=c0, size=(16384,))]
buf420.unmet_dependencies = [MemoryDep(name='buf417', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf420.met_dependencies = []
buf420.group.device = cuda:0
buf420.group.iteration = (16384, 128)
buf420.sizes = ([4, 4096], [128])
class buf420_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf420', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf421: SchedulerNode(ComputedBuffer)
buf421.writes = 
    [   MemoryDep(name='buf421', index=c0, size=(4096, 4)),
        MemoryDep(name='buf421', index=c0, size=(4096,))]
buf421.unmet_dependencies = [MemoryDep(name='buf420', index=c0 + 4096*c1, size=(4096, 4))]
buf421.met_dependencies = []
buf421.group.device = cuda:0
buf421.group.iteration = (4096, 4)
buf421.sizes = ([4096], [4])
class buf421_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf421', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf422: SchedulerNode(ComputedBuffer)
buf422.writes = [MemoryDep(name='buf422', index=c0, size=(4096,))]
buf422.unmet_dependencies = 
    [   MemoryDep(name='buf143', index=c0, size=(4096,)),
        MemoryDep(name='buf187', index=c0, size=(4096,)),
        MemoryDep(name='buf231', index=c0, size=(4096,)),
        MemoryDep(name='buf275', index=c0, size=(4096,)),
        MemoryDep(name='buf319', index=c0, size=(4096,)),
        MemoryDep(name='buf363', index=c0, size=(4096,)),
        MemoryDep(name='buf421', index=c0, size=(4096,)),
        MemoryDep(name='buf55', index=c0, size=(4096,)),
        MemoryDep(name='buf99', index=c0, size=(4096,))]
buf422.met_dependencies = []
buf422.group.device = cuda:0
buf422.group.iteration = (4096, 1)
buf422.sizes = ([4096], [])
class buf422_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf187', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf231', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf275', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf319', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf363', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf421', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf422', get_index_9, add_7, None)
        return store


buf423: SchedulerNode(ComputedBuffer)
buf423.writes = [MemoryDep(name='buf423', index=c0, size=(16777216,))]
buf423.unmet_dependencies = 
    [   MemoryDep(name='buf141', index=c0, size=(16777216,)),
        MemoryDep(name='buf185', index=c0, size=(16777216,)),
        MemoryDep(name='buf229', index=c0, size=(16777216,)),
        MemoryDep(name='buf273', index=c0, size=(16777216,)),
        MemoryDep(name='buf317', index=c0, size=(16777216,)),
        MemoryDep(name='buf361', index=c0, size=(16777216,)),
        MemoryDep(name='buf419', index=c0, size=(16777216,)),
        MemoryDep(name='buf53', index=c0, size=(16777216,)),
        MemoryDep(name='buf97', index=c0, size=(16777216,))]
buf423.met_dependencies = []
buf423.group.device = cuda:0
buf423.group.iteration = (16777216, 1)
buf423.sizes = ([16777216], [])
class buf423_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf97', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf141', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf185', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf229', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf273', get_index_5)
        add_4 = ops.add(add_3, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf317', get_index_6)
        add_5 = ops.add(add_4, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf361', get_index_7)
        add_6 = ops.add(add_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf419', get_index_8)
        add_7 = ops.add(add_6, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf423', get_index_9, add_7, None)
        return store


buf424: SchedulerNode(ComputedBuffer)
buf424.writes = [MemoryDep(name='buf424', index=c0, size=(2097152,))]
buf424.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=c0, size=(2097152,)),
        MemoryDep(name='buf405', index=c0, size=(2097152,)),
        MemoryDep(name='buf412', index=c0, size=(2097152,)),
        MemoryDep(name='buf418', index=c0, size=(2097152,))]
buf424.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf424.group.device = cuda:0
buf424.group.iteration = (2097152, 1)
buf424.sizes = ([512, 4096], [])
class buf424_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf405', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf412', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf418', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf424', get_index_5, mul, None)
        return store


buf425: SchedulerNode(ComputedBuffer)
buf425.writes = 
    [   MemoryDep(name='buf425', index=c0, size=(512, 4096)),
        MemoryDep(name='buf425', index=c0, size=(512,))]
buf425.unmet_dependencies = [MemoryDep(name='buf424', index=c0, size=(2097152,))]
buf425.met_dependencies = []
buf425.group.device = cuda:0
buf425.group.iteration = (512, 4096)
buf425.sizes = ([512], [4096])
class buf425_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf425', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf426: SchedulerNode(ComputedBuffer)
buf426.writes = 
    [   MemoryDep(name='buf426', index=c0, size=(512, 4096)),
        MemoryDep(name='buf426', index=c0, size=(512,))]
buf426.unmet_dependencies = [MemoryDep(name='buf424', index=c0, size=(2097152,))]
buf426.met_dependencies = [MemoryDep(name='mul_25', index=c0, size=(2097152,))]
buf426.group.device = cuda:0
buf426.group.iteration = (512, 4096)
buf426.sizes = ([512], [4096])
class buf426_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_25', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf426', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf427: SchedulerNode(ComputedBuffer)
buf427.writes = [MemoryDep(name='buf427', index=c0, size=(2097152,))]
buf427.unmet_dependencies = 
    [   MemoryDep(name='buf424', index=c0, size=(2097152,)),
        MemoryDep(name='buf425', index=c0, size=(512, 4096)),
        MemoryDep(name='buf426', index=c0, size=(512, 4096))]
buf427.met_dependencies = 
    [   MemoryDep(name='div_57', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_25', index=c0, size=(2097152,))]
buf427.group.device = cuda:0
buf427.group.iteration = (2097152, 1)
buf427.sizes = ([512, 4096], [])
class buf427_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf425', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_25', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf426', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf427', get_index_5, mul_2, None)
        return store


buf428: SchedulerNode(ComputedBuffer)
buf428.writes = 
    [   MemoryDep(name='buf428', index=c0, size=(4096, 512)),
        MemoryDep(name='buf428', index=c0, size=(4096,))]
buf428.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf405', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf412', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf418', index=c0 + 4096*c1, size=(4096, 512))]
buf428.met_dependencies = [MemoryDep(name='mul_25', index=c0 + 4096*c1, size=(4096, 512))]
buf428.group.device = cuda:0
buf428.group.iteration = (4096, 512)
buf428.sizes = ([4096], [512])
class buf428_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf405', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf412', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf418', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_25', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf428', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf429: SchedulerNode(ComputedBuffer)
buf429.writes = 
    [   MemoryDep(name='buf429', index=c0, size=(4096, 512)),
        MemoryDep(name='buf429', index=c0, size=(4096,))]
buf429.unmet_dependencies = 
    [   MemoryDep(name='buf387', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf405', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf412', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf418', index=c0 + 4096*c1, size=(4096, 512))]
buf429.met_dependencies = []
buf429.group.device = cuda:0
buf429.group.iteration = (4096, 512)
buf429.sizes = ([4096], [512])
class buf429_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf405', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf412', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf418', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf429', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf430: ExternKernelSchedulerNode(ExternKernelOut)
buf430.writes = [StarDep(name='buf430')]
buf430.unmet_dependencies = [StarDep(name='buf427')]
buf430.met_dependencies = [StarDep(name='permute_138')]
buf430.node.kernel = extern_kernels.mm


buf431: ExternKernelSchedulerNode(ExternKernelOut)
buf431.writes = [StarDep(name='buf431')]
buf431.unmet_dependencies = [StarDep(name='buf427')]
buf431.met_dependencies = [StarDep(name='view_63')]
buf431.node.kernel = extern_kernels.mm


buf432: SchedulerNode(ComputedBuffer)
buf432.writes = 
    [   MemoryDep(name='buf432', index=c0, size=(16384, 128)),
        MemoryDep(name='buf432', index=c0, size=(16384,))]
buf432.unmet_dependencies = [MemoryDep(name='buf427', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf432.met_dependencies = []
buf432.group.device = cuda:0
buf432.group.iteration = (16384, 128)
buf432.sizes = ([4, 4096], [128])
class buf432_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf432', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf433: SchedulerNode(ComputedBuffer)
buf433.writes = 
    [   MemoryDep(name='buf433', index=c0, size=(4096, 4)),
        MemoryDep(name='buf433', index=c0, size=(4096,))]
buf433.unmet_dependencies = [MemoryDep(name='buf432', index=c0 + 4096*c1, size=(4096, 4))]
buf433.met_dependencies = []
buf433.group.device = cuda:0
buf433.group.iteration = (4096, 4)
buf433.sizes = ([4096], [4])
class buf433_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf433', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf434: SchedulerNode(ComputedBuffer)
buf434.writes = [MemoryDep(name='buf434', index=c0, size=(8388608,))]
buf434.unmet_dependencies = [MemoryDep(name='buf430', index=c0, size=(8388608,))]
buf434.met_dependencies = 
    [   MemoryDep(name='addmm_17', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_2', index=c0, size=(8388608,))]
buf434.group.device = cuda:0
buf434.group.iteration = (8388608, 1)
buf434.sizes = ([8388608], [])
class buf434_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_17', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_2', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_2', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf430', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_17', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_2', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_2', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_17', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf430', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_2', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf434', get_index_11, add_2, None)
        return store


buf435: SchedulerNode(ComputedBuffer)
buf435.writes = [MemoryDep(name='buf435', index=c0, size=(8388608,))]
buf435.unmet_dependencies = [MemoryDep(name='buf434', index=c0, size=(8388608,))]
buf435.met_dependencies = []
buf435.group.device = cuda:0
buf435.group.iteration = (8388608, 1)
buf435.sizes = ([8388608], [])
class buf435_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf435', get_index_1, load, None)
        return store


buf436: ExternKernelSchedulerNode(ExternKernelOut)
buf436.writes = [StarDep(name='buf436')]
buf436.unmet_dependencies = [StarDep(name='buf435')]
buf436.met_dependencies = [StarDep(name='permute_142')]
buf436.node.kernel = extern_kernels.mm


buf437: ExternKernelSchedulerNode(ExternKernelOut)
buf437.writes = [StarDep(name='buf437')]
buf437.unmet_dependencies = [StarDep(name='buf435')]
buf437.met_dependencies = [StarDep(name='view_61')]
buf437.node.kernel = extern_kernels.mm


buf438: SchedulerNode(ComputedBuffer)
buf438.writes = 
    [   MemoryDep(name='buf438', index=c0, size=(16384, 512)),
        MemoryDep(name='buf438', index=c0, size=(16384,))]
buf438.unmet_dependencies = [MemoryDep(name='buf435', index=c0 + 16384*c1, size=(16384, 512))]
buf438.met_dependencies = []
buf438.group.device = cuda:0
buf438.group.iteration = (16384, 512)
buf438.sizes = ([16384], [512])
class buf438_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf438', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf439: SchedulerNode(ComputedBuffer)
buf439.writes = 
    [   MemoryDep(name='buf439', index=c0, size=(512, 4096)),
        MemoryDep(name='buf439', index=c0, size=(512,))]
buf439.unmet_dependencies = 
    [   MemoryDep(name='buf427', index=c0, size=(2097152,)),
        MemoryDep(name='buf436', index=c0, size=(2097152,))]
buf439.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf439.group.device = cuda:0
buf439.group.iteration = (512, 4096)
buf439.sizes = ([512], [4096])
class buf439_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf439', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf440: SchedulerNode(ComputedBuffer)
buf440.writes = 
    [   MemoryDep(name='buf440', index=c0, size=(512, 4096)),
        MemoryDep(name='buf440', index=c0, size=(512,))]
buf440.unmet_dependencies = 
    [   MemoryDep(name='buf427', index=c0, size=(2097152,)),
        MemoryDep(name='buf436', index=c0, size=(2097152,))]
buf440.met_dependencies = 
    [   MemoryDep(name='mul_19', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf440.group.device = cuda:0
buf440.group.iteration = (512, 4096)
buf440.sizes = ([512], [4096])
class buf440_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_19', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf440', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf441: SchedulerNode(ComputedBuffer)
buf441.writes = [MemoryDep(name='buf441', index=c0, size=(2097152,))]
buf441.unmet_dependencies = 
    [   MemoryDep(name='buf427', index=c0, size=(2097152,)),
        MemoryDep(name='buf436', index=c0, size=(2097152,)),
        MemoryDep(name='buf439', index=c0, size=(512, 4096)),
        MemoryDep(name='buf440', index=c0, size=(512, 4096))]
buf441.met_dependencies = 
    [   MemoryDep(name='div_58', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_19', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf441.group.device = cuda:0
buf441.group.iteration = (2097152, 1)
buf441.sizes = ([512, 4096], [])
class buf441_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf427', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf436', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf439', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_19', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf440', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf441', get_index_7, mul_3, None)
        return store


buf442: SchedulerNode(ComputedBuffer)
buf442.writes = 
    [   MemoryDep(name='buf442', index=c0, size=(4096, 512)),
        MemoryDep(name='buf442', index=c0, size=(4096,))]
buf442.unmet_dependencies = 
    [   MemoryDep(name='buf427', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf436', index=c0 + 4096*c1, size=(4096, 512))]
buf442.met_dependencies = [MemoryDep(name='mul_19', index=c0 + 4096*c1, size=(4096, 512))]
buf442.group.device = cuda:0
buf442.group.iteration = (4096, 512)
buf442.sizes = ([4096], [512])
class buf442_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_19', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf442', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf443: SchedulerNode(ComputedBuffer)
buf443.writes = 
    [   MemoryDep(name='buf443', index=c0, size=(4096, 512)),
        MemoryDep(name='buf443', index=c0, size=(4096,))]
buf443.unmet_dependencies = 
    [   MemoryDep(name='buf427', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf436', index=c0 + 4096*c1, size=(4096, 512))]
buf443.met_dependencies = []
buf443.group.device = cuda:0
buf443.group.iteration = (4096, 512)
buf443.sizes = ([4096], [512])
class buf443_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf443', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf444: ExternKernelSchedulerNode(ExternKernelOut)
buf444.writes = [StarDep(name='buf444')]
buf444.unmet_dependencies = [StarDep(name='buf441')]
buf444.met_dependencies = [StarDep(name='permute_146')]
buf444.node.kernel = extern_kernels.mm


buf445: ExternKernelSchedulerNode(ExternKernelOut)
buf445.writes = [StarDep(name='buf445')]
buf445.unmet_dependencies = [StarDep(name='buf441')]
buf445.met_dependencies = [StarDep(name='view_59')]
buf445.node.kernel = extern_kernels.mm


buf446: SchedulerNode(ComputedBuffer)
buf446.writes = 
    [   MemoryDep(name='buf446', index=c0, size=(16384, 128)),
        MemoryDep(name='buf446', index=c0, size=(16384,))]
buf446.unmet_dependencies = [MemoryDep(name='buf441', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf446.met_dependencies = []
buf446.group.device = cuda:0
buf446.group.iteration = (16384, 128)
buf446.sizes = ([4, 4096], [128])
class buf446_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf446', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf447: SchedulerNode(ComputedBuffer)
buf447.writes = 
    [   MemoryDep(name='buf447', index=c0, size=(4096, 4)),
        MemoryDep(name='buf447', index=c0, size=(4096,))]
buf447.unmet_dependencies = [MemoryDep(name='buf446', index=c0 + 4096*c1, size=(4096, 4))]
buf447.met_dependencies = []
buf447.group.device = cuda:0
buf447.group.iteration = (4096, 4)
buf447.sizes = ([4096], [4])
class buf447_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf447', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf448: ExternKernelSchedulerNode(ExternKernelOut)
buf448.writes = [StarDep(name='buf448')]
buf448.unmet_dependencies = [StarDep(name='buf444')]
buf448.met_dependencies = [StarDep(name='permute_448')]
buf448.node.kernel = extern_kernels.bmm


buf449: ExternKernelSchedulerNode(ExternKernelOut)
buf449.writes = [StarDep(name='buf449')]
buf449.unmet_dependencies = [StarDep(name='buf444')]
buf449.met_dependencies = [StarDep(name='permute_449')]
buf449.node.kernel = extern_kernels.bmm


buf450: SchedulerNode(ComputedBuffer)
buf450.writes = 
    [   MemoryDep(name='buf450', index=c0, size=(32768, 512)),
        MemoryDep(name='buf450', index=c0, size=(32768,))]
buf450.unmet_dependencies = [MemoryDep(name='buf449', index=c0, size=(16777216,))]
buf450.met_dependencies = [MemoryDep(name='div_5', index=c0, size=(16777216,))]
buf450.group.device = cuda:0
buf450.group.iteration = (32768, 512)
buf450.sizes = ([32768], [512])
class buf450_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_5', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf450', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf451: SchedulerNode(ComputedBuffer)
buf451.writes = [MemoryDep(name='buf451', index=c0, size=(16777216,))]
buf451.unmet_dependencies = 
    [   MemoryDep(name='buf449', index=c0, size=(16777216,)),
        MemoryDep(name='buf450', index=c0, size=(32768, 512))]
buf451.met_dependencies = [MemoryDep(name='div_5', index=c0, size=(16777216,))]
buf451.group.device = cuda:0
buf451.group.iteration = (16777216, 1)
buf451.sizes = ([32768, 512], [])
class buf451_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_5', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf450', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf451', get_index_4, div, None)
        return store


buf452: ExternKernelSchedulerNode(ExternKernelOut)
buf452.writes = [StarDep(name='buf452')]
buf452.unmet_dependencies = [StarDep(name='buf451')]
buf452.met_dependencies = [StarDep(name='permute_450')]
buf452.node.kernel = extern_kernels.bmm


buf453: ExternKernelSchedulerNode(ExternKernelOut)
buf453.writes = [StarDep(name='buf453')]
buf453.unmet_dependencies = [StarDep(name='buf451')]
buf453.met_dependencies = [StarDep(name='permute_451')]
buf453.node.kernel = extern_kernels.bmm


buf454: SchedulerNode(ComputedBuffer)
buf454.writes = [MemoryDep(name='buf454', index=c0, size=(2097152,))]
buf454.unmet_dependencies = [   MemoryDep(name='buf448', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf454.met_dependencies = []
buf454.group.device = cuda:0
buf454.group.iteration = (2097152, 1)
buf454.sizes = ([512, 4096], [])
class buf454_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf454', get_index_1, load, None)
        return store


buf455: ExternKernelSchedulerNode(ExternKernelOut)
buf455.writes = [StarDep(name='buf455')]
buf455.unmet_dependencies = [StarDep(name='buf454')]
buf455.met_dependencies = [StarDep(name='permute_159')]
buf455.node.kernel = extern_kernels.mm


buf456: ExternKernelSchedulerNode(ExternKernelOut)
buf456.writes = [StarDep(name='buf456')]
buf456.unmet_dependencies = [StarDep(name='buf454')]
buf456.met_dependencies = [StarDep(name='view_44')]
buf456.node.kernel = extern_kernels.mm


buf457: SchedulerNode(ComputedBuffer)
buf457.writes = 
    [   MemoryDep(name='buf457', index=c0, size=(16384, 128)),
        MemoryDep(name='buf457', index=c0, size=(16384,))]
buf457.unmet_dependencies = [MemoryDep(name='buf454', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf457.met_dependencies = []
buf457.group.device = cuda:0
buf457.group.iteration = (16384, 128)
buf457.sizes = ([4, 4096], [128])
class buf457_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf457', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf458: SchedulerNode(ComputedBuffer)
buf458.writes = 
    [   MemoryDep(name='buf458', index=c0, size=(4096, 4)),
        MemoryDep(name='buf458', index=c0, size=(4096,))]
buf458.unmet_dependencies = [MemoryDep(name='buf457', index=c0 + 4096*c1, size=(4096, 4))]
buf458.met_dependencies = []
buf458.group.device = cuda:0
buf458.group.iteration = (4096, 4)
buf458.sizes = ([4096], [4])
class buf458_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf458', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf459: SchedulerNode(ComputedBuffer)
buf459.writes = [MemoryDep(name='buf459', index=c0, size=(2097152,))]
buf459.unmet_dependencies = [MemoryDep(name='buf452', index=c0, size=(2097152,))]
buf459.met_dependencies = []
buf459.group.device = cuda:0
buf459.group.iteration = (2097152, 1)
buf459.sizes = ([2097152], [])
class buf459_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf459', get_index_1, load, None)
        return store


buf460: ExternKernelSchedulerNode(ExternKernelOut)
buf460.writes = [StarDep(name='buf460')]
buf460.unmet_dependencies = [StarDep(name='buf459')]
buf460.met_dependencies = [StarDep(name='permute_163')]
buf460.node.kernel = extern_kernels.mm


buf461: ExternKernelSchedulerNode(ExternKernelOut)
buf461.writes = [StarDep(name='buf461')]
buf461.unmet_dependencies = [StarDep(name='buf459')]
buf461.met_dependencies = [StarDep(name='view_44')]
buf461.node.kernel = extern_kernels.mm


buf462: SchedulerNode(ComputedBuffer)
buf462.writes = 
    [   MemoryDep(name='buf462', index=c0, size=(4096, 512)),
        MemoryDep(name='buf462', index=c0, size=(4096,))]
buf462.unmet_dependencies = [MemoryDep(name='buf459', index=c0, size=(2097152,))]
buf462.met_dependencies = []
buf462.group.device = cuda:0
buf462.group.iteration = (4096, 512)
buf462.sizes = ([4096], [512])
class buf462_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf462', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf463: SchedulerNode(ComputedBuffer)
buf463.writes = [MemoryDep(name='buf463', index=c0, size=(2097152,))]
buf463.unmet_dependencies = [   MemoryDep(name='buf453', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf463.met_dependencies = []
buf463.group.device = cuda:0
buf463.group.iteration = (2097152, 1)
buf463.sizes = ([512, 4096], [])
class buf463_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf463', get_index_1, load, None)
        return store


buf464: ExternKernelSchedulerNode(ExternKernelOut)
buf464.writes = [StarDep(name='buf464')]
buf464.unmet_dependencies = [StarDep(name='buf463')]
buf464.met_dependencies = [StarDep(name='permute_167')]
buf464.node.kernel = extern_kernels.mm


buf465: ExternKernelSchedulerNode(ExternKernelOut)
buf465.writes = [StarDep(name='buf465')]
buf465.unmet_dependencies = [StarDep(name='buf463')]
buf465.met_dependencies = [StarDep(name='view_44')]
buf465.node.kernel = extern_kernels.mm


buf466: SchedulerNode(ComputedBuffer)
buf466.writes = 
    [   MemoryDep(name='buf466', index=c0, size=(16384, 128)),
        MemoryDep(name='buf466', index=c0, size=(16384,))]
buf466.unmet_dependencies = [MemoryDep(name='buf463', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf466.met_dependencies = []
buf466.group.device = cuda:0
buf466.group.iteration = (16384, 128)
buf466.sizes = ([4, 4096], [128])
class buf466_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf466', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf467: SchedulerNode(ComputedBuffer)
buf467.writes = 
    [   MemoryDep(name='buf467', index=c0, size=(4096, 4)),
        MemoryDep(name='buf467', index=c0, size=(4096,))]
buf467.unmet_dependencies = [MemoryDep(name='buf466', index=c0 + 4096*c1, size=(4096, 4))]
buf467.met_dependencies = []
buf467.group.device = cuda:0
buf467.group.iteration = (4096, 4)
buf467.sizes = ([4096], [4])
class buf467_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf467', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf468: SchedulerNode(ComputedBuffer)
buf468.writes = [MemoryDep(name='buf468', index=c0, size=(2097152,))]
buf468.unmet_dependencies = 
    [   MemoryDep(name='buf441', index=c0, size=(2097152,)),
        MemoryDep(name='buf455', index=c0, size=(2097152,)),
        MemoryDep(name='buf460', index=c0, size=(2097152,)),
        MemoryDep(name='buf464', index=c0, size=(2097152,))]
buf468.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf468.group.device = cuda:0
buf468.group.iteration = (2097152, 1)
buf468.sizes = ([512, 4096], [])
class buf468_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf455', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf460', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf464', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf468', get_index_5, mul, None)
        return store


buf469: SchedulerNode(ComputedBuffer)
buf469.writes = 
    [   MemoryDep(name='buf469', index=c0, size=(512, 4096)),
        MemoryDep(name='buf469', index=c0, size=(512,))]
buf469.unmet_dependencies = [MemoryDep(name='buf468', index=c0, size=(2097152,))]
buf469.met_dependencies = []
buf469.group.device = cuda:0
buf469.group.iteration = (512, 4096)
buf469.sizes = ([512], [4096])
class buf469_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf469', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf470: SchedulerNode(ComputedBuffer)
buf470.writes = 
    [   MemoryDep(name='buf470', index=c0, size=(512, 4096)),
        MemoryDep(name='buf470', index=c0, size=(512,))]
buf470.unmet_dependencies = [MemoryDep(name='buf468', index=c0, size=(2097152,))]
buf470.met_dependencies = [MemoryDep(name='mul_17', index=c0, size=(2097152,))]
buf470.group.device = cuda:0
buf470.group.iteration = (512, 4096)
buf470.sizes = ([512], [4096])
class buf470_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_17', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf470', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf471: SchedulerNode(ComputedBuffer)
buf471.writes = [MemoryDep(name='buf471', index=c0, size=(2097152,))]
buf471.unmet_dependencies = 
    [   MemoryDep(name='buf468', index=c0, size=(2097152,)),
        MemoryDep(name='buf469', index=c0, size=(512, 4096)),
        MemoryDep(name='buf470', index=c0, size=(512, 4096))]
buf471.met_dependencies = 
    [   MemoryDep(name='div_60', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_17', index=c0, size=(2097152,))]
buf471.group.device = cuda:0
buf471.group.iteration = (2097152, 1)
buf471.sizes = ([512, 4096], [])
class buf471_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf468', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf469', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_17', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf470', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf471', get_index_5, mul_2, None)
        return store


buf472: SchedulerNode(ComputedBuffer)
buf472.writes = 
    [   MemoryDep(name='buf472', index=c0, size=(4096, 512)),
        MemoryDep(name='buf472', index=c0, size=(4096,))]
buf472.unmet_dependencies = 
    [   MemoryDep(name='buf441', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf455', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf460', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf464', index=c0 + 4096*c1, size=(4096, 512))]
buf472.met_dependencies = [MemoryDep(name='mul_17', index=c0 + 4096*c1, size=(4096, 512))]
buf472.group.device = cuda:0
buf472.group.iteration = (4096, 512)
buf472.sizes = ([4096], [512])
class buf472_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf455', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf460', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf464', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_17', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf472', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf473: SchedulerNode(ComputedBuffer)
buf473.writes = 
    [   MemoryDep(name='buf473', index=c0, size=(4096, 512)),
        MemoryDep(name='buf473', index=c0, size=(4096,))]
buf473.unmet_dependencies = 
    [   MemoryDep(name='buf441', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf455', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf460', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf464', index=c0 + 4096*c1, size=(4096, 512))]
buf473.met_dependencies = []
buf473.group.device = cuda:0
buf473.group.iteration = (4096, 512)
buf473.sizes = ([4096], [512])
class buf473_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf455', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf460', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf464', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf473', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf474: ExternKernelSchedulerNode(ExternKernelOut)
buf474.writes = [StarDep(name='buf474')]
buf474.unmet_dependencies = [StarDep(name='buf471')]
buf474.met_dependencies = [StarDep(name='permute_138')]
buf474.node.kernel = extern_kernels.mm


buf475: ExternKernelSchedulerNode(ExternKernelOut)
buf475.writes = [StarDep(name='buf475')]
buf475.unmet_dependencies = [StarDep(name='buf471')]
buf475.met_dependencies = [StarDep(name='view_42')]
buf475.node.kernel = extern_kernels.mm


buf476: SchedulerNode(ComputedBuffer)
buf476.writes = 
    [   MemoryDep(name='buf476', index=c0, size=(16384, 128)),
        MemoryDep(name='buf476', index=c0, size=(16384,))]
buf476.unmet_dependencies = [MemoryDep(name='buf471', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf476.met_dependencies = []
buf476.group.device = cuda:0
buf476.group.iteration = (16384, 128)
buf476.sizes = ([4, 4096], [128])
class buf476_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf476', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf477: SchedulerNode(ComputedBuffer)
buf477.writes = 
    [   MemoryDep(name='buf477', index=c0, size=(4096, 4)),
        MemoryDep(name='buf477', index=c0, size=(4096,))]
buf477.unmet_dependencies = [MemoryDep(name='buf476', index=c0 + 4096*c1, size=(4096, 4))]
buf477.met_dependencies = []
buf477.group.device = cuda:0
buf477.group.iteration = (4096, 4)
buf477.sizes = ([4096], [4])
class buf477_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf476', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf477', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf478: SchedulerNode(ComputedBuffer)
buf478.writes = [MemoryDep(name='buf478', index=c0, size=(8388608,))]
buf478.unmet_dependencies = [MemoryDep(name='buf474', index=c0, size=(8388608,))]
buf478.met_dependencies = 
    [   MemoryDep(name='addmm_11', index=c0, size=(8388608,)),
        MemoryDep(name='tanh_1', index=c0, size=(8388608,))]
buf478.group.device = cuda:0
buf478.group.iteration = (8388608, 1)
buf478.sizes = ([8388608], [])
class buf478_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_11', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh_1', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh_1', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf474', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_11', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh_1', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh_1', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_11', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf474', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh_1', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf478', get_index_11, add_2, None)
        return store


buf479: SchedulerNode(ComputedBuffer)
buf479.writes = [MemoryDep(name='buf479', index=c0, size=(8388608,))]
buf479.unmet_dependencies = [MemoryDep(name='buf478', index=c0, size=(8388608,))]
buf479.met_dependencies = []
buf479.group.device = cuda:0
buf479.group.iteration = (8388608, 1)
buf479.sizes = ([8388608], [])
class buf479_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf478', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf479', get_index_1, load, None)
        return store


buf480: ExternKernelSchedulerNode(ExternKernelOut)
buf480.writes = [StarDep(name='buf480')]
buf480.unmet_dependencies = [StarDep(name='buf479')]
buf480.met_dependencies = [StarDep(name='permute_142')]
buf480.node.kernel = extern_kernels.mm


buf481: ExternKernelSchedulerNode(ExternKernelOut)
buf481.writes = [StarDep(name='buf481')]
buf481.unmet_dependencies = [StarDep(name='buf479')]
buf481.met_dependencies = [StarDep(name='view_40')]
buf481.node.kernel = extern_kernels.mm


buf482: SchedulerNode(ComputedBuffer)
buf482.writes = 
    [   MemoryDep(name='buf482', index=c0, size=(16384, 512)),
        MemoryDep(name='buf482', index=c0, size=(16384,))]
buf482.unmet_dependencies = [MemoryDep(name='buf479', index=c0 + 16384*c1, size=(16384, 512))]
buf482.met_dependencies = []
buf482.group.device = cuda:0
buf482.group.iteration = (16384, 512)
buf482.sizes = ([16384], [512])
class buf482_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf482', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf483: SchedulerNode(ComputedBuffer)
buf483.writes = 
    [   MemoryDep(name='buf483', index=c0, size=(512, 4096)),
        MemoryDep(name='buf483', index=c0, size=(512,))]
buf483.unmet_dependencies = 
    [   MemoryDep(name='buf471', index=c0, size=(2097152,)),
        MemoryDep(name='buf480', index=c0, size=(2097152,))]
buf483.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf483.group.device = cuda:0
buf483.group.iteration = (512, 4096)
buf483.sizes = ([512], [4096])
class buf483_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf483', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf484: SchedulerNode(ComputedBuffer)
buf484.writes = 
    [   MemoryDep(name='buf484', index=c0, size=(512, 4096)),
        MemoryDep(name='buf484', index=c0, size=(512,))]
buf484.unmet_dependencies = 
    [   MemoryDep(name='buf471', index=c0, size=(2097152,)),
        MemoryDep(name='buf480', index=c0, size=(2097152,))]
buf484.met_dependencies = 
    [   MemoryDep(name='mul_11', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf484.group.device = cuda:0
buf484.group.iteration = (512, 4096)
buf484.sizes = ([512], [4096])
class buf484_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf484', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf485: SchedulerNode(ComputedBuffer)
buf485.writes = [MemoryDep(name='buf485', index=c0, size=(2097152,))]
buf485.unmet_dependencies = 
    [   MemoryDep(name='buf471', index=c0, size=(2097152,)),
        MemoryDep(name='buf480', index=c0, size=(2097152,)),
        MemoryDep(name='buf483', index=c0, size=(512, 4096)),
        MemoryDep(name='buf484', index=c0, size=(512, 4096))]
buf485.met_dependencies = 
    [   MemoryDep(name='div_61', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_11', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf485.group.device = cuda:0
buf485.group.iteration = (2097152, 1)
buf485.sizes = ([512, 4096], [])
class buf485_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf471', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf480', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf483', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_11', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf484', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf485', get_index_7, mul_3, None)
        return store


buf486: SchedulerNode(ComputedBuffer)
buf486.writes = 
    [   MemoryDep(name='buf486', index=c0, size=(4096, 512)),
        MemoryDep(name='buf486', index=c0, size=(4096,))]
buf486.unmet_dependencies = 
    [   MemoryDep(name='buf471', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf480', index=c0 + 4096*c1, size=(4096, 512))]
buf486.met_dependencies = [MemoryDep(name='mul_11', index=c0 + 4096*c1, size=(4096, 512))]
buf486.group.device = cuda:0
buf486.group.iteration = (4096, 512)
buf486.sizes = ([4096], [512])
class buf486_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_11', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf486', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf487: SchedulerNode(ComputedBuffer)
buf487.writes = 
    [   MemoryDep(name='buf487', index=c0, size=(4096, 512)),
        MemoryDep(name='buf487', index=c0, size=(4096,))]
buf487.unmet_dependencies = 
    [   MemoryDep(name='buf471', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf480', index=c0 + 4096*c1, size=(4096, 512))]
buf487.met_dependencies = []
buf487.group.device = cuda:0
buf487.group.iteration = (4096, 512)
buf487.sizes = ([4096], [512])
class buf487_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf487', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf488: ExternKernelSchedulerNode(ExternKernelOut)
buf488.writes = [StarDep(name='buf488')]
buf488.unmet_dependencies = [StarDep(name='buf485')]
buf488.met_dependencies = [StarDep(name='permute_146')]
buf488.node.kernel = extern_kernels.mm


buf489: ExternKernelSchedulerNode(ExternKernelOut)
buf489.writes = [StarDep(name='buf489')]
buf489.unmet_dependencies = [StarDep(name='buf485')]
buf489.met_dependencies = [StarDep(name='view_38')]
buf489.node.kernel = extern_kernels.mm


buf490: SchedulerNode(ComputedBuffer)
buf490.writes = 
    [   MemoryDep(name='buf490', index=c0, size=(16384, 128)),
        MemoryDep(name='buf490', index=c0, size=(16384,))]
buf490.unmet_dependencies = [MemoryDep(name='buf485', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf490.met_dependencies = []
buf490.group.device = cuda:0
buf490.group.iteration = (16384, 128)
buf490.sizes = ([4, 4096], [128])
class buf490_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf490', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf491: SchedulerNode(ComputedBuffer)
buf491.writes = 
    [   MemoryDep(name='buf491', index=c0, size=(4096, 4)),
        MemoryDep(name='buf491', index=c0, size=(4096,))]
buf491.unmet_dependencies = [MemoryDep(name='buf490', index=c0 + 4096*c1, size=(4096, 4))]
buf491.met_dependencies = []
buf491.group.device = cuda:0
buf491.group.iteration = (4096, 4)
buf491.sizes = ([4096], [4])
class buf491_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf490', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf491', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf492: ExternKernelSchedulerNode(ExternKernelOut)
buf492.writes = [StarDep(name='buf492')]
buf492.unmet_dependencies = [StarDep(name='buf488')]
buf492.met_dependencies = [StarDep(name='permute_481')]
buf492.node.kernel = extern_kernels.bmm


buf493: ExternKernelSchedulerNode(ExternKernelOut)
buf493.writes = [StarDep(name='buf493')]
buf493.unmet_dependencies = [StarDep(name='buf488')]
buf493.met_dependencies = [StarDep(name='permute_482')]
buf493.node.kernel = extern_kernels.bmm


buf494: SchedulerNode(ComputedBuffer)
buf494.writes = 
    [   MemoryDep(name='buf494', index=c0, size=(32768, 512)),
        MemoryDep(name='buf494', index=c0, size=(32768,))]
buf494.unmet_dependencies = [MemoryDep(name='buf493', index=c0, size=(16777216,))]
buf494.met_dependencies = [MemoryDep(name='div_3', index=c0, size=(16777216,))]
buf494.group.device = cuda:0
buf494.group.iteration = (32768, 512)
buf494.sizes = ([32768], [512])
class buf494_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_3', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf494', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf495: SchedulerNode(ComputedBuffer)
buf495.writes = [MemoryDep(name='buf495', index=c0, size=(16777216,))]
buf495.unmet_dependencies = 
    [   MemoryDep(name='buf493', index=c0, size=(16777216,)),
        MemoryDep(name='buf494', index=c0, size=(32768, 512))]
buf495.met_dependencies = [MemoryDep(name='div_3', index=c0, size=(16777216,))]
buf495.group.device = cuda:0
buf495.group.iteration = (16777216, 1)
buf495.sizes = ([32768, 512], [])
class buf495_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_3', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_3', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf494', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf495', get_index_4, div, None)
        return store


buf496: ExternKernelSchedulerNode(ExternKernelOut)
buf496.writes = [StarDep(name='buf496')]
buf496.unmet_dependencies = [StarDep(name='buf495')]
buf496.met_dependencies = [StarDep(name='permute_483')]
buf496.node.kernel = extern_kernels.bmm


buf497: ExternKernelSchedulerNode(ExternKernelOut)
buf497.writes = [StarDep(name='buf497')]
buf497.unmet_dependencies = [StarDep(name='buf495')]
buf497.met_dependencies = [StarDep(name='permute_484')]
buf497.node.kernel = extern_kernels.bmm


buf498: SchedulerNode(ComputedBuffer)
buf498.writes = [MemoryDep(name='buf498', index=c0, size=(2097152,))]
buf498.unmet_dependencies = [   MemoryDep(name='buf492', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf498.met_dependencies = []
buf498.group.device = cuda:0
buf498.group.iteration = (2097152, 1)
buf498.sizes = ([512, 4096], [])
class buf498_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf498', get_index_1, load, None)
        return store


buf499: ExternKernelSchedulerNode(ExternKernelOut)
buf499.writes = [StarDep(name='buf499')]
buf499.unmet_dependencies = [StarDep(name='buf498')]
buf499.met_dependencies = [StarDep(name='permute_159')]
buf499.node.kernel = extern_kernels.mm


buf500: ExternKernelSchedulerNode(ExternKernelOut)
buf500.writes = [StarDep(name='buf500')]
buf500.unmet_dependencies = [StarDep(name='buf498')]
buf500.met_dependencies = [StarDep(name='view_23')]
buf500.node.kernel = extern_kernels.mm


buf501: SchedulerNode(ComputedBuffer)
buf501.writes = 
    [   MemoryDep(name='buf501', index=c0, size=(16384, 128)),
        MemoryDep(name='buf501', index=c0, size=(16384,))]
buf501.unmet_dependencies = [MemoryDep(name='buf498', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf501.met_dependencies = []
buf501.group.device = cuda:0
buf501.group.iteration = (16384, 128)
buf501.sizes = ([4, 4096], [128])
class buf501_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf498', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf501', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf502: SchedulerNode(ComputedBuffer)
buf502.writes = 
    [   MemoryDep(name='buf502', index=c0, size=(4096, 4)),
        MemoryDep(name='buf502', index=c0, size=(4096,))]
buf502.unmet_dependencies = [MemoryDep(name='buf501', index=c0 + 4096*c1, size=(4096, 4))]
buf502.met_dependencies = []
buf502.group.device = cuda:0
buf502.group.iteration = (4096, 4)
buf502.sizes = ([4096], [4])
class buf502_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf502', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf503: SchedulerNode(ComputedBuffer)
buf503.writes = [MemoryDep(name='buf503', index=c0, size=(2097152,))]
buf503.unmet_dependencies = [MemoryDep(name='buf496', index=c0, size=(2097152,))]
buf503.met_dependencies = []
buf503.group.device = cuda:0
buf503.group.iteration = (2097152, 1)
buf503.sizes = ([2097152], [])
class buf503_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf503', get_index_1, load, None)
        return store


buf504: ExternKernelSchedulerNode(ExternKernelOut)
buf504.writes = [StarDep(name='buf504')]
buf504.unmet_dependencies = [StarDep(name='buf503')]
buf504.met_dependencies = [StarDep(name='permute_163')]
buf504.node.kernel = extern_kernels.mm


buf505: ExternKernelSchedulerNode(ExternKernelOut)
buf505.writes = [StarDep(name='buf505')]
buf505.unmet_dependencies = [StarDep(name='buf503')]
buf505.met_dependencies = [StarDep(name='view_23')]
buf505.node.kernel = extern_kernels.mm


buf506: SchedulerNode(ComputedBuffer)
buf506.writes = 
    [   MemoryDep(name='buf506', index=c0, size=(4096, 512)),
        MemoryDep(name='buf506', index=c0, size=(4096,))]
buf506.unmet_dependencies = [MemoryDep(name='buf503', index=c0, size=(2097152,))]
buf506.met_dependencies = []
buf506.group.device = cuda:0
buf506.group.iteration = (4096, 512)
buf506.sizes = ([4096], [512])
class buf506_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf506', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf507: SchedulerNode(ComputedBuffer)
buf507.writes = [MemoryDep(name='buf507', index=c0, size=(2097152,))]
buf507.unmet_dependencies = [   MemoryDep(name='buf497', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf507.met_dependencies = []
buf507.group.device = cuda:0
buf507.group.iteration = (2097152, 1)
buf507.sizes = ([512, 4096], [])
class buf507_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf507', get_index_1, load, None)
        return store


buf508: ExternKernelSchedulerNode(ExternKernelOut)
buf508.writes = [StarDep(name='buf508')]
buf508.unmet_dependencies = [StarDep(name='buf507')]
buf508.met_dependencies = [StarDep(name='permute_167')]
buf508.node.kernel = extern_kernels.mm


buf509: ExternKernelSchedulerNode(ExternKernelOut)
buf509.writes = [StarDep(name='buf509')]
buf509.unmet_dependencies = [StarDep(name='buf507')]
buf509.met_dependencies = [StarDep(name='view_23')]
buf509.node.kernel = extern_kernels.mm


buf510: SchedulerNode(ComputedBuffer)
buf510.writes = 
    [   MemoryDep(name='buf510', index=c0, size=(16384, 128)),
        MemoryDep(name='buf510', index=c0, size=(16384,))]
buf510.unmet_dependencies = [MemoryDep(name='buf507', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf510.met_dependencies = []
buf510.group.device = cuda:0
buf510.group.iteration = (16384, 128)
buf510.sizes = ([4, 4096], [128])
class buf510_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf510', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf511: SchedulerNode(ComputedBuffer)
buf511.writes = 
    [   MemoryDep(name='buf511', index=c0, size=(4096, 4)),
        MemoryDep(name='buf511', index=c0, size=(4096,))]
buf511.unmet_dependencies = [MemoryDep(name='buf510', index=c0 + 4096*c1, size=(4096, 4))]
buf511.met_dependencies = []
buf511.group.device = cuda:0
buf511.group.iteration = (4096, 4)
buf511.sizes = ([4096], [4])
class buf511_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf511', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf512: SchedulerNode(ComputedBuffer)
buf512.writes = [MemoryDep(name='buf512', index=c0, size=(2097152,))]
buf512.unmet_dependencies = 
    [   MemoryDep(name='buf485', index=c0, size=(2097152,)),
        MemoryDep(name='buf499', index=c0, size=(2097152,)),
        MemoryDep(name='buf504', index=c0, size=(2097152,)),
        MemoryDep(name='buf508', index=c0, size=(2097152,))]
buf512.met_dependencies = [MemoryDep(name='primals_22', index=c1, size=(512, 4096))]
buf512.group.device = cuda:0
buf512.group.iteration = (2097152, 1)
buf512.sizes = ([512, 4096], [])
class buf512_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf504', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf508', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_22', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf512', get_index_5, mul, None)
        return store


buf513: SchedulerNode(ComputedBuffer)
buf513.writes = 
    [   MemoryDep(name='buf513', index=c0, size=(512, 4096)),
        MemoryDep(name='buf513', index=c0, size=(512,))]
buf513.unmet_dependencies = [MemoryDep(name='buf512', index=c0, size=(2097152,))]
buf513.met_dependencies = []
buf513.group.device = cuda:0
buf513.group.iteration = (512, 4096)
buf513.sizes = ([512], [4096])
class buf513_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf513', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf514: SchedulerNode(ComputedBuffer)
buf514.writes = 
    [   MemoryDep(name='buf514', index=c0, size=(512, 4096)),
        MemoryDep(name='buf514', index=c0, size=(512,))]
buf514.unmet_dependencies = [MemoryDep(name='buf512', index=c0, size=(2097152,))]
buf514.met_dependencies = [MemoryDep(name='mul_9', index=c0, size=(2097152,))]
buf514.group.device = cuda:0
buf514.group.iteration = (512, 4096)
buf514.sizes = ([512], [4096])
class buf514_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_9', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf514', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf515: SchedulerNode(ComputedBuffer)
buf515.writes = [MemoryDep(name='buf515', index=c0, size=(2097152,))]
buf515.unmet_dependencies = 
    [   MemoryDep(name='buf512', index=c0, size=(2097152,)),
        MemoryDep(name='buf513', index=c0, size=(512, 4096)),
        MemoryDep(name='buf514', index=c0, size=(512, 4096))]
buf515.met_dependencies = 
    [   MemoryDep(name='div_63', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_9', index=c0, size=(2097152,))]
buf515.group.device = cuda:0
buf515.group.iteration = (2097152, 1)
buf515.sizes = ([512, 4096], [])
class buf515_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf512', get_index_1)
        constant = ops.constant(4096, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf513', get_index_2)
        sub = ops.sub(mul, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('mul_9', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf514', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        sub_1 = ops.sub(sub, mul_1)
        mul_2 = ops.mul(load, sub_1)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf515', get_index_5, mul_2, None)
        return store


buf516: SchedulerNode(ComputedBuffer)
buf516.writes = 
    [   MemoryDep(name='buf516', index=c0, size=(4096, 512)),
        MemoryDep(name='buf516', index=c0, size=(4096,))]
buf516.unmet_dependencies = 
    [   MemoryDep(name='buf485', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf499', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf504', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf508', index=c0 + 4096*c1, size=(4096, 512))]
buf516.met_dependencies = [MemoryDep(name='mul_9', index=c0 + 4096*c1, size=(4096, 512))]
buf516.group.device = cuda:0
buf516.group.iteration = (4096, 512)
buf516.sizes = ([4096], [512])
class buf516_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf504', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf508', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mul_9', get_index_4)
        mul = ops.mul(add_2, load_4)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf516', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf517: SchedulerNode(ComputedBuffer)
buf517.writes = 
    [   MemoryDep(name='buf517', index=c0, size=(4096, 512)),
        MemoryDep(name='buf517', index=c0, size=(4096,))]
buf517.unmet_dependencies = 
    [   MemoryDep(name='buf485', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf499', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf504', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf508', index=c0 + 4096*c1, size=(4096, 512))]
buf517.met_dependencies = []
buf517.group.device = cuda:0
buf517.group.iteration = (4096, 512)
buf517.sizes = ([4096], [512])
class buf517_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf504', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf508', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf517', torch.float32, torch.float32, 'sum', get_index_4, add_2)
        return reduction


buf518: SchedulerNode(ComputedBuffer)
buf518.writes = [MemoryDep(name='buf518', index=c0, size=(4096,))]
buf518.unmet_dependencies = 
    [   MemoryDep(name='buf370', index=c0, size=(4096,)),
        MemoryDep(name='buf428', index=c0, size=(4096,)),
        MemoryDep(name='buf472', index=c0, size=(4096,)),
        MemoryDep(name='buf516', index=c0, size=(4096,))]
buf518.met_dependencies = []
buf518.group.device = cuda:0
buf518.group.iteration = (4096, 1)
buf518.sizes = ([4096], [])
class buf518_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf428', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf472', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf516', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf518', get_index_4, add_2, None)
        return store


buf519: SchedulerNode(ComputedBuffer)
buf519.writes = [MemoryDep(name='buf519', index=c0, size=(4096,))]
buf519.unmet_dependencies = 
    [   MemoryDep(name='buf371', index=c0, size=(4096,)),
        MemoryDep(name='buf429', index=c0, size=(4096,)),
        MemoryDep(name='buf473', index=c0, size=(4096,)),
        MemoryDep(name='buf517', index=c0, size=(4096,))]
buf519.met_dependencies = []
buf519.group.device = cuda:0
buf519.group.iteration = (4096, 1)
buf519.sizes = ([4096], [])
class buf519_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf429', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf473', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf517', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf519', get_index_4, add_2, None)
        return store


buf520: ExternKernelSchedulerNode(ExternKernelOut)
buf520.writes = [StarDep(name='buf520')]
buf520.unmet_dependencies = [StarDep(name='buf515')]
buf520.met_dependencies = [StarDep(name='permute_138')]
buf520.node.kernel = extern_kernels.mm


buf521: ExternKernelSchedulerNode(ExternKernelOut)
buf521.writes = [StarDep(name='buf521')]
buf521.unmet_dependencies = [StarDep(name='buf515')]
buf521.met_dependencies = [StarDep(name='view_21')]
buf521.node.kernel = extern_kernels.mm


buf522: SchedulerNode(ComputedBuffer)
buf522.writes = 
    [   MemoryDep(name='buf522', index=c0, size=(16384, 128)),
        MemoryDep(name='buf522', index=c0, size=(16384,))]
buf522.unmet_dependencies = [MemoryDep(name='buf515', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf522.met_dependencies = []
buf522.group.device = cuda:0
buf522.group.iteration = (16384, 128)
buf522.sizes = ([4, 4096], [128])
class buf522_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf522', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf523: SchedulerNode(ComputedBuffer)
buf523.writes = 
    [   MemoryDep(name='buf523', index=c0, size=(4096, 4)),
        MemoryDep(name='buf523', index=c0, size=(4096,))]
buf523.unmet_dependencies = [MemoryDep(name='buf522', index=c0 + 4096*c1, size=(4096, 4))]
buf523.met_dependencies = []
buf523.group.device = cuda:0
buf523.group.iteration = (4096, 4)
buf523.sizes = ([4096], [4])
class buf523_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf522', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf523', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf524: SchedulerNode(ComputedBuffer)
buf524.writes = [MemoryDep(name='buf524', index=c0, size=(4096,))]
buf524.unmet_dependencies = 
    [   MemoryDep(name='buf376', index=c0, size=(4096,)),
        MemoryDep(name='buf433', index=c0, size=(4096,)),
        MemoryDep(name='buf477', index=c0, size=(4096,)),
        MemoryDep(name='buf523', index=c0, size=(4096,))]
buf524.met_dependencies = []
buf524.group.device = cuda:0
buf524.group.iteration = (4096, 1)
buf524.sizes = ([4096], [])
class buf524_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf433', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf477', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf523', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf524', get_index_4, add_2, None)
        return store


buf525: SchedulerNode(ComputedBuffer)
buf525.writes = [MemoryDep(name='buf525', index=c0, size=(67108864,))]
buf525.unmet_dependencies = 
    [   MemoryDep(name='buf377', index=c0, size=(67108864,)),
        MemoryDep(name='buf431', index=c0, size=(67108864,)),
        MemoryDep(name='buf475', index=c0, size=(67108864,)),
        MemoryDep(name='buf521', index=c0, size=(67108864,))]
buf525.met_dependencies = []
buf525.group.device = cuda:0
buf525.group.iteration = (67108864, 1)
buf525.sizes = ([67108864], [])
class buf525_loop_body:
    var_ranges = {z0: 67108864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf431', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf475', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf521', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf525', get_index_4, add_2, None)
        return store


buf526: SchedulerNode(ComputedBuffer)
buf526.writes = [MemoryDep(name='buf526', index=c0, size=(8388608,))]
buf526.unmet_dependencies = [MemoryDep(name='buf520', index=c0, size=(8388608,))]
buf526.met_dependencies = 
    [   MemoryDep(name='addmm_5', index=c0, size=(8388608,)),
        MemoryDep(name='tanh', index=c0, size=(8388608,))]
buf526.group.device = cuda:0
buf526.group.iteration = (8388608, 1)
buf526.sizes = ([8388608], [])
class buf526_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_5', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(load, mul)
        constant_1 = ops.constant(1, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('tanh', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tanh', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        sub = ops.sub(constant_1, mul_2)
        mul_3 = ops.mul(mul_1, sub)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(mul_3, constant_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf520', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_5', get_index_5)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_5 = ops.mul(load_5, constant_3)
        mul_6 = ops.mul(load_4, mul_5)
        constant_4 = ops.constant(1, torch.float32)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tanh', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tanh', get_index_7)
        mul_7 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(constant_4, mul_7)
        mul_8 = ops.mul(mul_6, sub_1)
        constant_5 = ops.constant(0.7978845608028654, torch.float32)
        mul_9 = ops.mul(mul_8, constant_5)
        constant_6 = ops.constant(0.044715, torch.float32)
        mul_10 = ops.mul(mul_9, constant_6)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('addmm_5', get_index_8)
        mul_11 = ops.mul(load_8, load_8)
        constant_7 = ops.constant(3.0, torch.float32)
        mul_12 = ops.mul(mul_11, constant_7)
        mul_13 = ops.mul(mul_10, mul_12)
        add = ops.add(mul_4, mul_13)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf520', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tanh', get_index_10)
        constant_8 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(load_10, constant_8)
        mul_14 = ops.mul(load_9, add_1)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_15 = ops.mul(mul_14, constant_9)
        add_2 = ops.add(add, mul_15)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf526', get_index_11, add_2, None)
        return store


buf527: SchedulerNode(ComputedBuffer)
buf527.writes = [MemoryDep(name='buf527', index=c0, size=(8388608,))]
buf527.unmet_dependencies = [MemoryDep(name='buf526', index=c0, size=(8388608,))]
buf527.met_dependencies = []
buf527.group.device = cuda:0
buf527.group.iteration = (8388608, 1)
buf527.sizes = ([8388608], [])
class buf527_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf527', get_index_1, load, None)
        return store


buf528: ExternKernelSchedulerNode(ExternKernelOut)
buf528.writes = [StarDep(name='buf528')]
buf528.unmet_dependencies = [StarDep(name='buf527')]
buf528.met_dependencies = [StarDep(name='permute_142')]
buf528.node.kernel = extern_kernels.mm


buf529: ExternKernelSchedulerNode(ExternKernelOut)
buf529.writes = [StarDep(name='buf529')]
buf529.unmet_dependencies = [StarDep(name='buf527')]
buf529.met_dependencies = [StarDep(name='view_19')]
buf529.node.kernel = extern_kernels.mm


buf530: SchedulerNode(ComputedBuffer)
buf530.writes = 
    [   MemoryDep(name='buf530', index=c0, size=(16384, 512)),
        MemoryDep(name='buf530', index=c0, size=(16384,))]
buf530.unmet_dependencies = [MemoryDep(name='buf527', index=c0 + 16384*c1, size=(16384, 512))]
buf530.met_dependencies = []
buf530.group.device = cuda:0
buf530.group.iteration = (16384, 512)
buf530.sizes = ([16384], [512])
class buf530_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = z0 + 16384*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf530', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf531: SchedulerNode(ComputedBuffer)
buf531.writes = [MemoryDep(name='buf531', index=c0, size=(16384,))]
buf531.unmet_dependencies = 
    [   MemoryDep(name='buf383', index=c0, size=(16384,)),
        MemoryDep(name='buf438', index=c0, size=(16384,)),
        MemoryDep(name='buf482', index=c0, size=(16384,)),
        MemoryDep(name='buf530', index=c0, size=(16384,))]
buf531.met_dependencies = []
buf531.group.device = cuda:0
buf531.group.iteration = (16384, 1)
buf531.sizes = ([16384], [])
class buf531_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf438', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf482', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf530', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf531', get_index_4, add_2, None)
        return store


buf532: SchedulerNode(ComputedBuffer)
buf532.writes = [MemoryDep(name='buf532', index=c0, size=(67108864,))]
buf532.unmet_dependencies = 
    [   MemoryDep(name='buf384', index=c0, size=(67108864,)),
        MemoryDep(name='buf437', index=c0, size=(67108864,)),
        MemoryDep(name='buf481', index=c0, size=(67108864,)),
        MemoryDep(name='buf529', index=c0, size=(67108864,))]
buf532.met_dependencies = []
buf532.group.device = cuda:0
buf532.group.iteration = (67108864, 1)
buf532.sizes = ([67108864], [])
class buf532_loop_body:
    var_ranges = {z0: 67108864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf437', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf481', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf529', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf532', get_index_4, add_2, None)
        return store


buf533: SchedulerNode(ComputedBuffer)
buf533.writes = 
    [   MemoryDep(name='buf533', index=c0, size=(512, 4096)),
        MemoryDep(name='buf533', index=c0, size=(512,))]
buf533.unmet_dependencies = 
    [   MemoryDep(name='buf515', index=c0, size=(2097152,)),
        MemoryDep(name='buf528', index=c0, size=(2097152,))]
buf533.met_dependencies = [MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf533.group.device = cuda:0
buf533.group.iteration = (512, 4096)
buf533.sizes = ([512], [4096])
class buf533_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf533', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf534: SchedulerNode(ComputedBuffer)
buf534.writes = 
    [   MemoryDep(name='buf534', index=c0, size=(512, 4096)),
        MemoryDep(name='buf534', index=c0, size=(512,))]
buf534.unmet_dependencies = 
    [   MemoryDep(name='buf515', index=c0, size=(2097152,)),
        MemoryDep(name='buf528', index=c0, size=(2097152,))]
buf534.met_dependencies = 
    [   MemoryDep(name='mul_3', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf534.group.device = cuda:0
buf534.group.iteration = (512, 4096)
buf534.sizes = ([512], [4096])
class buf534_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mul_3', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf534', torch.float32, torch.float32, 'sum', get_index_4, mul_1)
        return reduction


buf535: SchedulerNode(ComputedBuffer)
buf535.writes = [MemoryDep(name='buf535', index=c0, size=(2097152,))]
buf535.unmet_dependencies = 
    [   MemoryDep(name='buf515', index=c0, size=(2097152,)),
        MemoryDep(name='buf528', index=c0, size=(2097152,)),
        MemoryDep(name='buf533', index=c0, size=(512, 4096)),
        MemoryDep(name='buf534', index=c0, size=(512, 4096))]
buf535.met_dependencies = 
    [   MemoryDep(name='div_64', index=c0, size=(512, 4096)),
        MemoryDep(name='mul_3', index=c0, size=(2097152,)),
        MemoryDep(name='primals_16', index=c1, size=(512, 4096))]
buf535.group.device = cuda:0
buf535.group.iteration = (2097152, 1)
buf535.sizes = ([512, 4096], [])
class buf535_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = z0
    index1 = 4096*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf515', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf528', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(add, load_3)
        constant = ops.constant(4096, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf533', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('mul_3', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf534', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf535', get_index_7, mul_3, None)
        return store


buf536: SchedulerNode(ComputedBuffer)
buf536.writes = 
    [   MemoryDep(name='buf536', index=c0, size=(4096, 512)),
        MemoryDep(name='buf536', index=c0, size=(4096,))]
buf536.unmet_dependencies = 
    [   MemoryDep(name='buf515', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf528', index=c0 + 4096*c1, size=(4096, 512))]
buf536.met_dependencies = [MemoryDep(name='mul_3', index=c0 + 4096*c1, size=(4096, 512))]
buf536.group.device = cuda:0
buf536.group.iteration = (4096, 512)
buf536.sizes = ([4096], [512])
class buf536_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_3', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf536', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf537: SchedulerNode(ComputedBuffer)
buf537.writes = 
    [   MemoryDep(name='buf537', index=c0, size=(4096, 512)),
        MemoryDep(name='buf537', index=c0, size=(4096,))]
buf537.unmet_dependencies = 
    [   MemoryDep(name='buf515', index=c0 + 4096*c1, size=(4096, 512)),
        MemoryDep(name='buf528', index=c0 + 4096*c1, size=(4096, 512))]
buf537.met_dependencies = []
buf537.group.device = cuda:0
buf537.group.iteration = (4096, 512)
buf537.sizes = ([4096], [512])
class buf537_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf537', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf538: SchedulerNode(ComputedBuffer)
buf538.writes = [MemoryDep(name='buf538', index=c0, size=(4096,))]
buf538.unmet_dependencies = 
    [   MemoryDep(name='buf390', index=c0, size=(4096,)),
        MemoryDep(name='buf442', index=c0, size=(4096,)),
        MemoryDep(name='buf486', index=c0, size=(4096,)),
        MemoryDep(name='buf536', index=c0, size=(4096,))]
buf538.met_dependencies = []
buf538.group.device = cuda:0
buf538.group.iteration = (4096, 1)
buf538.sizes = ([4096], [])
class buf538_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf442', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf486', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf536', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf538', get_index_4, add_2, None)
        return store


buf539: SchedulerNode(ComputedBuffer)
buf539.writes = [MemoryDep(name='buf539', index=c0, size=(4096,))]
buf539.unmet_dependencies = 
    [   MemoryDep(name='buf391', index=c0, size=(4096,)),
        MemoryDep(name='buf443', index=c0, size=(4096,)),
        MemoryDep(name='buf487', index=c0, size=(4096,)),
        MemoryDep(name='buf537', index=c0, size=(4096,))]
buf539.met_dependencies = []
buf539.group.device = cuda:0
buf539.group.iteration = (4096, 1)
buf539.sizes = ([4096], [])
class buf539_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf443', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf487', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf537', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf539', get_index_4, add_2, None)
        return store


buf540: ExternKernelSchedulerNode(ExternKernelOut)
buf540.writes = [StarDep(name='buf540')]
buf540.unmet_dependencies = [StarDep(name='buf535')]
buf540.met_dependencies = [StarDep(name='permute_146')]
buf540.node.kernel = extern_kernels.mm


buf541: ExternKernelSchedulerNode(ExternKernelOut)
buf541.writes = [StarDep(name='buf541')]
buf541.unmet_dependencies = [StarDep(name='buf535')]
buf541.met_dependencies = [StarDep(name='view_17')]
buf541.node.kernel = extern_kernels.mm


buf542: SchedulerNode(ComputedBuffer)
buf542.writes = 
    [   MemoryDep(name='buf542', index=c0, size=(16384, 128)),
        MemoryDep(name='buf542', index=c0, size=(16384,))]
buf542.unmet_dependencies = [MemoryDep(name='buf535', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf542.met_dependencies = []
buf542.group.device = cuda:0
buf542.group.iteration = (16384, 128)
buf542.sizes = ([4, 4096], [128])
class buf542_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf535', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf542', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf543: SchedulerNode(ComputedBuffer)
buf543.writes = 
    [   MemoryDep(name='buf543', index=c0, size=(4096, 4)),
        MemoryDep(name='buf543', index=c0, size=(4096,))]
buf543.unmet_dependencies = [MemoryDep(name='buf542', index=c0 + 4096*c1, size=(4096, 4))]
buf543.met_dependencies = []
buf543.group.device = cuda:0
buf543.group.iteration = (4096, 4)
buf543.sizes = ([4096], [4])
class buf543_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf543', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf544: SchedulerNode(ComputedBuffer)
buf544.writes = [MemoryDep(name='buf544', index=c0, size=(4096,))]
buf544.unmet_dependencies = 
    [   MemoryDep(name='buf396', index=c0, size=(4096,)),
        MemoryDep(name='buf447', index=c0, size=(4096,)),
        MemoryDep(name='buf491', index=c0, size=(4096,)),
        MemoryDep(name='buf543', index=c0, size=(4096,))]
buf544.met_dependencies = []
buf544.group.device = cuda:0
buf544.group.iteration = (4096, 1)
buf544.sizes = ([4096], [])
class buf544_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf447', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf491', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf543', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf544', get_index_4, add_2, None)
        return store


buf545: SchedulerNode(ComputedBuffer)
buf545.writes = [MemoryDep(name='buf545', index=c0, size=(16777216,))]
buf545.unmet_dependencies = 
    [   MemoryDep(name='buf397', index=c0, size=(16777216,)),
        MemoryDep(name='buf445', index=c0, size=(16777216,)),
        MemoryDep(name='buf489', index=c0, size=(16777216,)),
        MemoryDep(name='buf541', index=c0, size=(16777216,))]
buf545.met_dependencies = []
buf545.group.device = cuda:0
buf545.group.iteration = (16777216, 1)
buf545.sizes = ([16777216], [])
class buf545_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf445', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf541', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf545', get_index_4, add_2, None)
        return store


buf546: ExternKernelSchedulerNode(ExternKernelOut)
buf546.writes = [StarDep(name='buf546')]
buf546.unmet_dependencies = [StarDep(name='buf540')]
buf546.met_dependencies = [StarDep(name='permute_514')]
buf546.node.kernel = extern_kernels.bmm


buf547: ExternKernelSchedulerNode(ExternKernelOut)
buf547.writes = [StarDep(name='buf547')]
buf547.unmet_dependencies = [StarDep(name='buf540')]
buf547.met_dependencies = [StarDep(name='permute_515')]
buf547.node.kernel = extern_kernels.bmm


buf548: SchedulerNode(ComputedBuffer)
buf548.writes = 
    [   MemoryDep(name='buf548', index=c0, size=(32768, 512)),
        MemoryDep(name='buf548', index=c0, size=(32768,))]
buf548.unmet_dependencies = [MemoryDep(name='buf547', index=c0, size=(16777216,))]
buf548.met_dependencies = [MemoryDep(name='div_1', index=c0, size=(16777216,))]
buf548.group.device = cuda:0
buf548.group.iteration = (32768, 512)
buf548.sizes = ([32768], [512])
class buf548_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf548', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf549: SchedulerNode(ComputedBuffer)
buf549.writes = [MemoryDep(name='buf549', index=c0, size=(16777216,))]
buf549.unmet_dependencies = 
    [   MemoryDep(name='buf547', index=c0, size=(16777216,)),
        MemoryDep(name='buf548', index=c0, size=(32768, 512))]
buf549.met_dependencies = [MemoryDep(name='div_1', index=c0, size=(16777216,))]
buf549.group.device = cuda:0
buf549.group.iteration = (16777216, 1)
buf549.sizes = ([32768, 512], [])
class buf549_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('div_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('div_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf548', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        sub = ops.sub(mul, mul_1)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(sub, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf549', get_index_4, div, None)
        return store


buf550: ExternKernelSchedulerNode(ExternKernelOut)
buf550.writes = [StarDep(name='buf550')]
buf550.unmet_dependencies = [StarDep(name='buf549')]
buf550.met_dependencies = [StarDep(name='permute_516')]
buf550.node.kernel = extern_kernels.bmm


buf551: ExternKernelSchedulerNode(ExternKernelOut)
buf551.writes = [StarDep(name='buf551')]
buf551.unmet_dependencies = [StarDep(name='buf549')]
buf551.met_dependencies = [StarDep(name='permute_517')]
buf551.node.kernel = extern_kernels.bmm


buf552: SchedulerNode(ComputedBuffer)
buf552.writes = [MemoryDep(name='buf552', index=c0, size=(2097152,))]
buf552.unmet_dependencies = [   MemoryDep(name='buf546', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf552.met_dependencies = []
buf552.group.device = cuda:0
buf552.group.iteration = (2097152, 1)
buf552.sizes = ([512, 4096], [])
class buf552_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf552', get_index_1, load, None)
        return store


buf553: ExternKernelSchedulerNode(ExternKernelOut)
buf553.writes = [StarDep(name='buf553')]
buf553.unmet_dependencies = [StarDep(name='buf552')]
buf553.met_dependencies = [StarDep(name='permute_159')]
buf553.node.kernel = extern_kernels.mm


buf554: ExternKernelSchedulerNode(ExternKernelOut)
buf554.writes = [StarDep(name='buf554')]
buf554.unmet_dependencies = [StarDep(name='buf552')]
buf554.met_dependencies = [StarDep(name='view_2')]
buf554.node.kernel = extern_kernels.mm


buf555: SchedulerNode(ComputedBuffer)
buf555.writes = 
    [   MemoryDep(name='buf555', index=c0, size=(16384, 128)),
        MemoryDep(name='buf555', index=c0, size=(16384,))]
buf555.unmet_dependencies = [MemoryDep(name='buf552', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf555.met_dependencies = []
buf555.group.device = cuda:0
buf555.group.iteration = (16384, 128)
buf555.sizes = ([4, 4096], [128])
class buf555_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf555', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf556: SchedulerNode(ComputedBuffer)
buf556.writes = 
    [   MemoryDep(name='buf556', index=c0, size=(4096, 4)),
        MemoryDep(name='buf556', index=c0, size=(4096,))]
buf556.unmet_dependencies = [MemoryDep(name='buf555', index=c0 + 4096*c1, size=(4096, 4))]
buf556.met_dependencies = []
buf556.group.device = cuda:0
buf556.group.iteration = (4096, 4)
buf556.sizes = ([4096], [4])
class buf556_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf556', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf557: SchedulerNode(ComputedBuffer)
buf557.writes = [MemoryDep(name='buf557', index=c0, size=(4096,))]
buf557.unmet_dependencies = 
    [   MemoryDep(name='buf409', index=c0, size=(4096,)),
        MemoryDep(name='buf458', index=c0, size=(4096,)),
        MemoryDep(name='buf502', index=c0, size=(4096,)),
        MemoryDep(name='buf556', index=c0, size=(4096,))]
buf557.met_dependencies = []
buf557.group.device = cuda:0
buf557.group.iteration = (4096, 1)
buf557.sizes = ([4096], [])
class buf557_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf458', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf502', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf556', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf557', get_index_4, add_2, None)
        return store


buf558: SchedulerNode(ComputedBuffer)
buf558.writes = [MemoryDep(name='buf558', index=c0, size=(16777216,))]
buf558.unmet_dependencies = 
    [   MemoryDep(name='buf410', index=c0, size=(16777216,)),
        MemoryDep(name='buf456', index=c0, size=(16777216,)),
        MemoryDep(name='buf500', index=c0, size=(16777216,)),
        MemoryDep(name='buf554', index=c0, size=(16777216,))]
buf558.met_dependencies = []
buf558.group.device = cuda:0
buf558.group.iteration = (16777216, 1)
buf558.sizes = ([16777216], [])
class buf558_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf456', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf500', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf554', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf558', get_index_4, add_2, None)
        return store


buf559: SchedulerNode(ComputedBuffer)
buf559.writes = [MemoryDep(name='buf559', index=c0, size=(2097152,))]
buf559.unmet_dependencies = [MemoryDep(name='buf550', index=c0, size=(2097152,))]
buf559.met_dependencies = []
buf559.group.device = cuda:0
buf559.group.iteration = (2097152, 1)
buf559.sizes = ([2097152], [])
class buf559_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf559', get_index_1, load, None)
        return store


buf560: ExternKernelSchedulerNode(ExternKernelOut)
buf560.writes = [StarDep(name='buf560')]
buf560.unmet_dependencies = [StarDep(name='buf559')]
buf560.met_dependencies = [StarDep(name='permute_163')]
buf560.node.kernel = extern_kernels.mm


buf561: ExternKernelSchedulerNode(ExternKernelOut)
buf561.writes = [StarDep(name='buf561')]
buf561.unmet_dependencies = [StarDep(name='buf559')]
buf561.met_dependencies = [StarDep(name='view_2')]
buf561.node.kernel = extern_kernels.mm


buf562: SchedulerNode(ComputedBuffer)
buf562.writes = 
    [   MemoryDep(name='buf562', index=c0, size=(4096, 512)),
        MemoryDep(name='buf562', index=c0, size=(4096,))]
buf562.unmet_dependencies = [MemoryDep(name='buf559', index=c0, size=(2097152,))]
buf562.met_dependencies = []
buf562.group.device = cuda:0
buf562.group.iteration = (4096, 512)
buf562.sizes = ([4096], [512])
class buf562_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf562', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf563: SchedulerNode(ComputedBuffer)
buf563.writes = [MemoryDep(name='buf563', index=c0, size=(4096,))]
buf563.unmet_dependencies = 
    [   MemoryDep(name='buf415', index=c0, size=(4096,)),
        MemoryDep(name='buf462', index=c0, size=(4096,)),
        MemoryDep(name='buf506', index=c0, size=(4096,)),
        MemoryDep(name='buf562', index=c0, size=(4096,))]
buf563.met_dependencies = []
buf563.group.device = cuda:0
buf563.group.iteration = (4096, 1)
buf563.sizes = ([4096], [])
class buf563_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf462', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf506', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf562', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf563', get_index_4, add_2, None)
        return store


buf564: SchedulerNode(ComputedBuffer)
buf564.writes = [MemoryDep(name='buf564', index=c0, size=(16777216,))]
buf564.unmet_dependencies = 
    [   MemoryDep(name='buf416', index=c0, size=(16777216,)),
        MemoryDep(name='buf461', index=c0, size=(16777216,)),
        MemoryDep(name='buf505', index=c0, size=(16777216,)),
        MemoryDep(name='buf561', index=c0, size=(16777216,))]
buf564.met_dependencies = []
buf564.group.device = cuda:0
buf564.group.iteration = (16777216, 1)
buf564.sizes = ([16777216], [])
class buf564_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf461', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf505', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf561', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf564', get_index_4, add_2, None)
        return store


buf565: SchedulerNode(ComputedBuffer)
buf565.writes = [MemoryDep(name='buf565', index=c0, size=(2097152,))]
buf565.unmet_dependencies = [   MemoryDep(name='buf551', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf565.met_dependencies = []
buf565.group.device = cuda:0
buf565.group.iteration = (2097152, 1)
buf565.sizes = ([512, 4096], [])
class buf565_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf565', get_index_1, load, None)
        return store


buf566: ExternKernelSchedulerNode(ExternKernelOut)
buf566.writes = [StarDep(name='buf566')]
buf566.unmet_dependencies = [StarDep(name='buf565')]
buf566.met_dependencies = [StarDep(name='permute_167')]
buf566.node.kernel = extern_kernels.mm


buf567: ExternKernelSchedulerNode(ExternKernelOut)
buf567.writes = [StarDep(name='buf567')]
buf567.unmet_dependencies = [StarDep(name='buf565')]
buf567.met_dependencies = [StarDep(name='view_2')]
buf567.node.kernel = extern_kernels.mm


buf568: SchedulerNode(ComputedBuffer)
buf568.writes = 
    [   MemoryDep(name='buf568', index=c0, size=(16384, 128)),
        MemoryDep(name='buf568', index=c0, size=(16384,))]
buf568.unmet_dependencies = [MemoryDep(name='buf565', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf568.met_dependencies = []
buf568.group.device = cuda:0
buf568.group.iteration = (16384, 128)
buf568.sizes = ([4, 4096], [128])
class buf568_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf565', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf568', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf569: SchedulerNode(ComputedBuffer)
buf569.writes = 
    [   MemoryDep(name='buf569', index=c0, size=(4096, 4)),
        MemoryDep(name='buf569', index=c0, size=(4096,))]
buf569.unmet_dependencies = [MemoryDep(name='buf568', index=c0 + 4096*c1, size=(4096, 4))]
buf569.met_dependencies = []
buf569.group.device = cuda:0
buf569.group.iteration = (4096, 4)
buf569.sizes = ([4096], [4])
class buf569_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf569', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf570: SchedulerNode(ComputedBuffer)
buf570.writes = [MemoryDep(name='buf570', index=c0, size=(4096,))]
buf570.unmet_dependencies = 
    [   MemoryDep(name='buf422', index=c0, size=(4096,)),
        MemoryDep(name='buf467', index=c0, size=(4096,)),
        MemoryDep(name='buf511', index=c0, size=(4096,)),
        MemoryDep(name='buf569', index=c0, size=(4096,))]
buf570.met_dependencies = []
buf570.group.device = cuda:0
buf570.group.iteration = (4096, 1)
buf570.sizes = ([4096], [])
class buf570_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf467', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf511', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf569', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf570', get_index_4, add_2, None)
        return store


buf571: SchedulerNode(ComputedBuffer)
buf571.writes = [MemoryDep(name='buf571', index=c0, size=(16777216,))]
buf571.unmet_dependencies = 
    [   MemoryDep(name='buf423', index=c0, size=(16777216,)),
        MemoryDep(name='buf465', index=c0, size=(16777216,)),
        MemoryDep(name='buf509', index=c0, size=(16777216,)),
        MemoryDep(name='buf567', index=c0, size=(16777216,))]
buf571.met_dependencies = []
buf571.group.device = cuda:0
buf571.group.iteration = (16777216, 1)
buf571.sizes = ([16777216], [])
class buf571_loop_body:
    var_ranges = {z0: 16777216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf465', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf509', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf567', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf571', get_index_4, add_2, None)
        return store


buf572: SchedulerNode(ComputedBuffer)
buf572.writes = [MemoryDep(name='buf572', index=c0, size=(2097152,))]
buf572.unmet_dependencies = 
    [   MemoryDep(name='buf535', index=c0, size=(2097152,)),
        MemoryDep(name='buf553', index=c0, size=(2097152,)),
        MemoryDep(name='buf560', index=c0, size=(2097152,)),
        MemoryDep(name='buf566', index=c0, size=(2097152,))]
buf572.met_dependencies = []
buf572.group.device = cuda:0
buf572.group.iteration = (2097152, 1)
buf572.sizes = ([2097152], [])
class buf572_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf535', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf553', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf560', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf566', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf572', get_index_4, add_2, None)
        return store


buf573: SchedulerNode(ComputedBuffer)
buf573.writes = [MemoryDep(name='buf573', index=c0, size=(2097152,))]
buf573.unmet_dependencies = [MemoryDep(name='buf572', index=c0, size=(2097152,))]
buf573.met_dependencies = []
buf573.group.device = cuda:0
buf573.group.iteration = (2097152, 1)
buf573.sizes = ([2097152], [])
class buf573_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf572', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf573', get_index_1, load, None)
        return store


buf574: ExternKernelSchedulerNode(ExternKernelOut)
buf574.writes = [StarDep(name='buf574')]
buf574.unmet_dependencies = [StarDep(name='buf573')]
buf574.met_dependencies = [StarDep(name='permute_534')]
buf574.node.kernel = extern_kernels.mm


buf575: ExternKernelSchedulerNode(ExternKernelOut)
buf575.writes = [StarDep(name='buf575')]
buf575.unmet_dependencies = [StarDep(name='buf573')]
buf575.met_dependencies = [StarDep(name='view')]
buf575.node.kernel = extern_kernels.mm


buf576: SchedulerNode(ComputedBuffer)
buf576.writes = 
    [   MemoryDep(name='buf576', index=c0, size=(16384, 128)),
        MemoryDep(name='buf576', index=c0, size=(16384,))]
buf576.unmet_dependencies = [MemoryDep(name='buf573', index=524288*c0 + c1 + 4096*c2, size=(4, 4096, 128))]
buf576.met_dependencies = []
buf576.group.device = cuda:0
buf576.group.iteration = (16384, 128)
buf576.sizes = ([4, 4096], [128])
class buf576_loop_body:
    var_ranges = {z0: 4, z1: 4096, z2: 128}
    index0 = 524288*z0 + z1 + 4096*z2
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf576', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf577: SchedulerNode(ComputedBuffer)
buf577.writes = 
    [   MemoryDep(name='buf577', index=c0, size=(4096, 4)),
        MemoryDep(name='buf577', index=c0, size=(4096,))]
buf577.unmet_dependencies = [MemoryDep(name='buf576', index=c0 + 4096*c1, size=(4096, 4))]
buf577.met_dependencies = []
buf577.group.device = cuda:0
buf577.group.iteration = (4096, 4)
buf577.sizes = ([4096], [4])
class buf577_loop_body:
    var_ranges = {z0: 4096, z1: 4}
    index0 = z0 + 4096*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf577', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf578: SchedulerNode(ComputedBuffer)
buf578.writes = 
    [   MemoryDep(name='buf578', index=c0, size=(512, 128)),
        MemoryDep(name='buf578', index=c0, size=(512,))]
buf578.unmet_dependencies = [MemoryDep(name='buf574', index=c0, size=(65536,))]
buf578.met_dependencies = [MemoryDep(name='primals_4', index=c1, size=(512, 128))]
buf578.group.device = cuda:0
buf578.group.iteration = (512, 128)
buf578.sizes = ([512], [128])
class buf578_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        reduction = ops.reduction('buf578', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf579: SchedulerNode(ComputedBuffer)
buf579.writes = 
    [   MemoryDep(name='buf579', index=c0, size=(512, 128)),
        MemoryDep(name='buf579', index=c0, size=(512,))]
buf579.unmet_dependencies = [MemoryDep(name='buf574', index=c0, size=(65536,))]
buf579.met_dependencies = 
    [   MemoryDep(name='mul_1', index=c0, size=(65536,)),
        MemoryDep(name='primals_4', index=c1, size=(512, 128))]
buf579.group.device = cuda:0
buf579.group.iteration = (512, 128)
buf579.sizes = ([512], [128])
class buf579_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_1', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        reduction = ops.reduction('buf579', torch.float32, torch.float32, 'sum', get_index_3, mul_1)
        return reduction


buf580: SchedulerNode(ComputedBuffer)
buf580.writes = [MemoryDep(name='buf580', index=c0, size=(65536,))]
buf580.unmet_dependencies = 
    [   MemoryDep(name='buf574', index=c0, size=(65536,)),
        MemoryDep(name='buf578', index=c0, size=(512, 128)),
        MemoryDep(name='buf579', index=c0, size=(512, 128))]
buf580.met_dependencies = 
    [   MemoryDep(name='div_66', index=c0, size=(512, 128)),
        MemoryDep(name='mul_1', index=c0, size=(65536,)),
        MemoryDep(name='primals_4', index=c1, size=(512, 128))]
buf580.group.device = cuda:0
buf580.group.iteration = (65536, 1)
buf580.sizes = ([512, 128], [])
class buf580_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = z0
    index1 = 128*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf574', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        mul = ops.mul(load_1, load_2)
        constant = ops.constant(128, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf578', get_index_3)
        sub = ops.sub(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('mul_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf579', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf580', get_index_6, mul_3, None)
        return store


buf581: SchedulerNode(ComputedBuffer)
buf581.writes = 
    [   MemoryDep(name='buf581', index=c0, size=(128, 512)),
        MemoryDep(name='buf581', index=c0, size=(128,))]
buf581.unmet_dependencies = [MemoryDep(name='buf574', index=c0 + 128*c1, size=(128, 512))]
buf581.met_dependencies = [MemoryDep(name='mul_1', index=c0 + 128*c1, size=(128, 512))]
buf581.group.device = cuda:0
buf581.group.iteration = (128, 512)
buf581.sizes = ([128], [512])
class buf581_loop_body:
    var_ranges = {z0: 128, z1: 512}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf581', torch.float32, torch.float32, 'sum', get_index_2, mul)
        return reduction


buf582: SchedulerNode(ComputedBuffer)
buf582.writes = 
    [   MemoryDep(name='buf582', index=c0, size=(128, 512)),
        MemoryDep(name='buf582', index=c0, size=(128,))]
buf582.unmet_dependencies = [MemoryDep(name='buf574', index=c0 + 128*c1, size=(128, 512))]
buf582.met_dependencies = []
buf582.group.device = cuda:0
buf582.group.iteration = (128, 512)
buf582.sizes = ([128], [512])
class buf582_loop_body:
    var_ranges = {z0: 128, z1: 512}
    index0 = z0 + 128*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf582', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf583: SchedulerNode(ComputedBuffer)
buf583.writes = [MemoryDep(name='buf583', index=c0, size=(65536,))]
buf583.unmet_dependencies = []
buf583.met_dependencies = []
buf583.group.device = cuda:0
buf583.group.iteration = (65536, 1)
buf583.sizes = ([65536], [])
class buf583_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf583', get_index, constant, None)
        return store


buf584: SchedulerNode(ComputedBuffer)
buf584.writes = [MemoryDep(name='buf584', index=128*(tmp1) + c1, size=(512, 128))]
buf584.unmet_dependencies = [MemoryDep(name='buf580', index=c0, size=(65536,)), StarDep(name='buf583')]
buf584.met_dependencies = [MemoryDep(name='convert_element_type_2', index=c0, size=(512, 128))]
buf584.group.device = cuda:0
buf584.group.iteration = (65536, 1)
buf584.sizes = ([512, 128], [])
buf584.mutations = ['buf583']
class buf584_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = z0
    index1 = 128*z0 + z1
    index2 = 128*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convert_element_type_2', get_index)
        to_dtype = ops.to_dtype(load, torch.int64)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convert_element_type_2', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.int64)
        constant = ops.constant(-1, torch.int64)
        eq = ops.eq(to_dtype_1, constant)
        constant_1 = ops.constant(0, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf580', get_index_2)
        where = ops.where(eq, constant_1, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf584', get_index_3, where, 'atomic_add')
        return store


buf585: SchedulerNode(ComputedBuffer)
buf585.writes = [MemoryDep(name='buf585', index=c0, size=(256,))]
buf585.unmet_dependencies = []
buf585.met_dependencies = []
buf585.group.device = cuda:0
buf585.group.iteration = (256, 1)
buf585.sizes = ([256], [])
class buf585_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf585', get_index, constant, None)
        return store


buf586: SchedulerNode(ComputedBuffer)
buf586.writes = [MemoryDep(name='buf586', index=128*(tmp1) + c1, size=(512, 128))]
buf586.unmet_dependencies = [MemoryDep(name='buf580', index=c0, size=(65536,)), StarDep(name='buf585')]
buf586.met_dependencies = [MemoryDep(name='convert_element_type_4', index=c0, size=(512, 128))]
buf586.group.device = cuda:0
buf586.group.iteration = (65536, 1)
buf586.sizes = ([512, 128], [])
buf586.mutations = ['buf585']
class buf586_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = z0
    index1 = 128*z0 + z1
    index2 = 128*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convert_element_type_4', get_index)
        to_dtype = ops.to_dtype(load, torch.int64)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convert_element_type_4', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.int64)
        constant = ops.constant(-1, torch.int64)
        eq = ops.eq(to_dtype_1, constant)
        constant_1 = ops.constant(0, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf580', get_index_2)
        where = ops.where(eq, constant_1, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf586', get_index_3, where, 'atomic_add')
        return store


buf587: SchedulerNode(ComputedBuffer)
buf587.writes = [MemoryDep(name='buf587', index=c0, size=(3840000,))]
buf587.unmet_dependencies = []
buf587.met_dependencies = []
buf587.group.device = cuda:0
buf587.group.iteration = (3840000, 1)
buf587.sizes = ([3840000], [])
class buf587_loop_body:
    var_ranges = {z0: 3840000}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf587', get_index, constant, None)
        return store


buf588: SchedulerNode(ComputedBuffer)
buf588.writes = [MemoryDep(name='buf588', index=128*(tmp1) + c1, size=(512, 128))]
buf588.unmet_dependencies = [MemoryDep(name='buf580', index=c0, size=(65536,)), StarDep(name='buf587')]
buf588.met_dependencies = [MemoryDep(name='convert_element_type_6', index=c0, size=(512, 128))]
buf588.group.device = cuda:0
buf588.group.iteration = (65536, 1)
buf588.sizes = ([512, 128], [])
buf588.mutations = ['buf587']
class buf588_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = z0
    index1 = 128*z0 + z1
    index2 = 128*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convert_element_type_6', get_index)
        to_dtype = ops.to_dtype(load, torch.int64)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convert_element_type_6', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype_1, constant)
        constant_1 = ops.constant(0, torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf580', get_index_2)
        where = ops.where(eq, constant_1, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf588', get_index_3, where, 'atomic_add')
        return store


