buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep(name='buf0', index=c0, size=(65536,))]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep(name='primals_1', index=128*(tmp0) + c1, size=(512, 128)),
        MemoryDep(name='primals_2', index=128*(tmp2) + c1, size=(512, 128)),
        MemoryDep(name='primals_26', index=c0, size=(512, 128)),
        MemoryDep(name='primals_27', index=c0, size=(512, 128)),
        MemoryDep(name='primals_28', index=c0, size=(512, 128)),
        MemoryDep(name='primals_3', index=128*(tmp5) + c1, size=(512, 128))]
buf0.group.device = cuda:0
buf0.group.iteration = (65536, 1)
buf0.sizes = ([512, 128], [])
class buf0_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = z0
    index1 = 128*indirect0 + z1
    index2 = 128*indirect1 + z1
    index3 = 128*indirect2 + z1
    index4 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_28', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_26', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_2', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('primals_27', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_3', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf0', get_index_6, add_1, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = 
    [   MemoryDep(name='buf1', index=c0, size=(512, 128)),
        MemoryDep(name='buf1', index=c0, size=(512,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=c0, size=(65536,))]
buf1.met_dependencies = []
buf1.group.device = cuda:0
buf1.group.iteration = (512, 128)
buf1.sizes = ([512], [128])
class buf1_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf1', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=c0, size=(512,))]
buf2.unmet_dependencies = [MemoryDep(name='buf1', index=c0, size=(512,))]
buf2.met_dependencies = []
buf2.group.device = cuda:0
buf2.group.iteration = (512, 1)
buf2.sizes = ([512], [])
class buf2_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, div, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = 
    [   MemoryDep(name='buf3', index=c0, size=(512, 128)),
        MemoryDep(name='buf3', index=c0, size=(512,))]
buf3.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(65536,)),
        MemoryDep(name='buf2', index=c0, size=(512, 128))]
buf3.met_dependencies = []
buf3.group.device = cuda:0
buf3.group.iteration = (512, 128)
buf3.sizes = ([512], [128])
class buf3_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf3', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=c0, size=(65536,))]
buf4.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(65536,)),
        MemoryDep(name='buf2', index=c0, size=(512, 128)),
        MemoryDep(name='buf3', index=c0, size=(512, 128))]
buf4.met_dependencies = []
buf4.group.device = cuda:0
buf4.group.iteration = (65536, 1)
buf4.sizes = ([512, 128], [])
class buf4_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf4', get_index_3, mul, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(65536,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(65536,))]
buf5.met_dependencies = 
    [   MemoryDep(name='primals_4', index=c1, size=(512, 128)),
        MemoryDep(name='primals_5', index=c1, size=(512, 128))]
buf5.group.device = cuda:0
buf5.group.iteration = (65536, 1)
buf5.sizes = ([512, 128], [])
class buf5_loop_body:
    var_ranges = {z0: 512, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_5', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf5', get_index_3, add, None)
        return store


buf6: ExternKernelSchedulerNode(ExternKernelOut)
buf6.writes = [StarDep(name='buf6')]
buf6.unmet_dependencies = [StarDep(name='buf5')]
buf6.met_dependencies = [StarDep(name='primals_6'), StarDep(name='primals_7')]
buf6.node.kernel = extern_kernels.addmm


buf7: ExternKernelSchedulerNode(ExternKernelOut)
buf7.writes = [StarDep(name='buf7')]
buf7.unmet_dependencies = [StarDep(name='buf6')]
buf7.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf7.node.kernel = extern_kernels.addmm


buf8: ExternKernelSchedulerNode(ExternKernelOut)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf6')]
buf8.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf8.node.kernel = extern_kernels.addmm


buf9: ExternKernelSchedulerNode(ExternKernelOut)
buf9.writes = [StarDep(name='buf9')]
buf9.unmet_dependencies = [StarDep(name='buf6')]
buf9.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf9.node.kernel = extern_kernels.addmm


buf10: ExternKernelSchedulerNode(ExternKernelOut)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf7'), StarDep(name='buf8')]
buf10.met_dependencies = []
buf10.node.kernel = extern_kernels.bmm


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(32768, 512)),
        MemoryDep(name='buf11', index=c0, size=(32768,))]
buf11.unmet_dependencies = [MemoryDep(name='buf10', index=c0, size=(16777216,))]
buf11.met_dependencies = []
buf11.group.device = cuda:0
buf11.group.iteration = (32768, 512)
buf11.sizes = ([32768], [512])
class buf11_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(32768, 512)),
        MemoryDep(name='buf12', index=c0, size=(32768,))]
buf12.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c0, size=(16777216,)),
        MemoryDep(name='buf11', index=c0, size=(32768, 512))]
buf12.met_dependencies = []
buf12.group.device = cuda:0
buf12.group.iteration = (32768, 512)
buf12.sizes = ([32768], [512])
class buf12_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(16777216,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c0, size=(16777216,)),
        MemoryDep(name='buf11', index=c0, size=(32768, 512)),
        MemoryDep(name='buf12', index=c0, size=(32768, 512))]
buf13.met_dependencies = []
buf13.group.device = cuda:0
buf13.group.iteration = (16777216, 1)
buf13.sizes = ([32768, 512], [])
class buf13_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf13', get_index_3, div_1, None)
        return store


buf14: ExternKernelSchedulerNode(ExternKernelOut)
buf14.writes = [StarDep(name='buf14')]
buf14.unmet_dependencies = [StarDep(name='buf13'), StarDep(name='buf9')]
buf14.met_dependencies = []
buf14.node.kernel = extern_kernels.bmm


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep(name='buf15', index=c0, size=(2097152,))]
buf15.unmet_dependencies = [   MemoryDep(name='buf14', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf15.met_dependencies = []
buf15.group.device = cuda:0
buf15.group.iteration = (2097152, 1)
buf15.sizes = ([512, 4096], [])
class buf15_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


buf16: ExternKernelSchedulerNode(ExternKernelOut)
buf16.writes = [StarDep(name='buf16')]
buf16.unmet_dependencies = [StarDep(name='buf15')]
buf16.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf16.node.kernel = extern_kernels.addmm


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = 
    [   MemoryDep(name='buf17', index=c0, size=(512, 4096)),
        MemoryDep(name='buf17', index=c0, size=(512,))]
buf17.unmet_dependencies = 
    [   MemoryDep(name='buf16', index=c0, size=(2097152,)),
        MemoryDep(name='buf6', index=c0, size=(2097152,))]
buf17.met_dependencies = []
buf17.group.device = cuda:0
buf17.group.iteration = (512, 4096)
buf17.sizes = ([512], [4096])
class buf17_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf17', torch.float32, torch.float32, 'sum', get_index_2, add)
        return reduction


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = [MemoryDep(name='buf18', index=c0, size=(512,))]
buf18.unmet_dependencies = [MemoryDep(name='buf17', index=c0, size=(512,))]
buf18.met_dependencies = []
buf18.group.device = cuda:0
buf18.group.iteration = (512, 1)
buf18.sizes = ([512], [])
class buf18_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf18', get_index_1, div, None)
        return store


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = 
    [   MemoryDep(name='buf19', index=c0, size=(512, 4096)),
        MemoryDep(name='buf19', index=c0, size=(512,))]
buf19.unmet_dependencies = 
    [   MemoryDep(name='buf16', index=c0, size=(2097152,)),
        MemoryDep(name='buf18', index=c0, size=(512, 4096)),
        MemoryDep(name='buf6', index=c0, size=(2097152,))]
buf19.met_dependencies = []
buf19.group.device = cuda:0
buf19.group.iteration = (512, 4096)
buf19.sizes = ([512], [4096])
class buf19_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        sub = ops.sub(add, load_2)
        square = ops.square(sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf19', torch.float32, torch.float32, 'sum', get_index_3, square)
        return reduction


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = [MemoryDep(name='buf20', index=c0, size=(2097152,))]
buf20.unmet_dependencies = 
    [   MemoryDep(name='buf16', index=c0, size=(2097152,)),
        MemoryDep(name='buf18', index=c0, size=(512, 4096)),
        MemoryDep(name='buf19', index=c0, size=(512, 4096)),
        MemoryDep(name='buf6', index=c0, size=(2097152,))]
buf20.met_dependencies = []
buf20.group.device = cuda:0
buf20.group.iteration = (2097152, 1)
buf20.sizes = ([512, 4096], [])
class buf20_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf19', get_index_3)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf20', get_index_4, mul, None)
        return store


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = [MemoryDep(name='buf21', index=c0, size=(2097152,))]
buf21.unmet_dependencies = [MemoryDep(name='buf20', index=c0, size=(2097152,))]
buf21.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf21.group.device = cuda:0
buf21.group.iteration = (2097152, 1)
buf21.sizes = ([512, 4096], [])
class buf21_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf21', get_index_3, add, None)
        return store


buf22: ExternKernelSchedulerNode(ExternKernelOut)
buf22.writes = [StarDep(name='buf22')]
buf22.unmet_dependencies = [StarDep(name='buf21')]
buf22.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf22.node.kernel = extern_kernels.addmm


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep(name='buf23', index=c0, size=(8388608,))]
buf23.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(8388608,))]
buf23.met_dependencies = []
buf23.group.device = cuda:0
buf23.group.iteration = (8388608, 1)
buf23.sizes = ([8388608], [])
class buf23_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, tanh, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = [MemoryDep(name='buf24', index=c0, size=(8388608,))]
buf24.unmet_dependencies = 
    [   MemoryDep(name='buf22', index=c0, size=(8388608,)),
        MemoryDep(name='buf23', index=c0, size=(8388608,))]
buf24.met_dependencies = []
buf24.group.device = cuda:0
buf24.group.iteration = (8388608, 1)
buf24.sizes = ([8388608], [])
class buf24_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf24', get_index_2, mul_1, None)
        return store


buf25: ExternKernelSchedulerNode(ExternKernelOut)
buf25.writes = [StarDep(name='buf25')]
buf25.unmet_dependencies = [StarDep(name='buf24')]
buf25.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf25.node.kernel = extern_kernels.addmm


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = 
    [   MemoryDep(name='buf26', index=c0, size=(512, 4096)),
        MemoryDep(name='buf26', index=c0, size=(512,))]
buf26.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(2097152,)),
        MemoryDep(name='buf25', index=c0, size=(2097152,))]
buf26.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf26.group.device = cuda:0
buf26.group.iteration = (512, 4096)
buf26.sizes = ([512], [4096])
class buf26_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf26', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = [MemoryDep(name='buf27', index=c0, size=(512,))]
buf27.unmet_dependencies = [MemoryDep(name='buf26', index=c0, size=(512,))]
buf27.met_dependencies = []
buf27.group.device = cuda:0
buf27.group.iteration = (512, 1)
buf27.sizes = ([512], [])
class buf27_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf27', get_index_1, div, None)
        return store


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = 
    [   MemoryDep(name='buf28', index=c0, size=(512, 4096)),
        MemoryDep(name='buf28', index=c0, size=(512,))]
buf28.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(2097152,)),
        MemoryDep(name='buf25', index=c0, size=(2097152,)),
        MemoryDep(name='buf27', index=c0, size=(512, 4096))]
buf28.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf28.group.device = cuda:0
buf28.group.iteration = (512, 4096)
buf28.sizes = ([512], [4096])
class buf28_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf28', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = [MemoryDep(name='buf29', index=c0, size=(2097152,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(2097152,)),
        MemoryDep(name='buf25', index=c0, size=(2097152,)),
        MemoryDep(name='buf27', index=c0, size=(512, 4096)),
        MemoryDep(name='buf28', index=c0, size=(512, 4096))]
buf29.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf29.group.device = cuda:0
buf29.group.iteration = (2097152, 1)
buf29.sizes = ([512, 4096], [])
class buf29_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf28', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf29', get_index_6, mul_1, None)
        return store


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = [MemoryDep(name='buf30', index=c0, size=(2097152,))]
buf30.unmet_dependencies = [MemoryDep(name='buf29', index=c0, size=(2097152,))]
buf30.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf30.group.device = cuda:0
buf30.group.iteration = (2097152, 1)
buf30.sizes = ([512, 4096], [])
class buf30_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf30', get_index_3, add, None)
        return store


buf31: ExternKernelSchedulerNode(ExternKernelOut)
buf31.writes = [StarDep(name='buf31')]
buf31.unmet_dependencies = [StarDep(name='buf30')]
buf31.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf31.node.kernel = extern_kernels.addmm


buf32: ExternKernelSchedulerNode(ExternKernelOut)
buf32.writes = [StarDep(name='buf32')]
buf32.unmet_dependencies = [StarDep(name='buf30')]
buf32.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf32.node.kernel = extern_kernels.addmm


buf33: ExternKernelSchedulerNode(ExternKernelOut)
buf33.writes = [StarDep(name='buf33')]
buf33.unmet_dependencies = [StarDep(name='buf30')]
buf33.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf33.node.kernel = extern_kernels.addmm


buf34: ExternKernelSchedulerNode(ExternKernelOut)
buf34.writes = [StarDep(name='buf34')]
buf34.unmet_dependencies = [StarDep(name='buf31'), StarDep(name='buf32')]
buf34.met_dependencies = []
buf34.node.kernel = extern_kernels.bmm


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = 
    [   MemoryDep(name='buf35', index=c0, size=(32768, 512)),
        MemoryDep(name='buf35', index=c0, size=(32768,))]
buf35.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(16777216,))]
buf35.met_dependencies = []
buf35.group.device = cuda:0
buf35.group.iteration = (32768, 512)
buf35.sizes = ([32768], [512])
class buf35_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf35', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = 
    [   MemoryDep(name='buf36', index=c0, size=(32768, 512)),
        MemoryDep(name='buf36', index=c0, size=(32768,))]
buf36.unmet_dependencies = 
    [   MemoryDep(name='buf34', index=c0, size=(16777216,)),
        MemoryDep(name='buf35', index=c0, size=(32768, 512))]
buf36.met_dependencies = []
buf36.group.device = cuda:0
buf36.group.iteration = (32768, 512)
buf36.sizes = ([32768], [512])
class buf36_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf36', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(16777216,))]
buf37.unmet_dependencies = 
    [   MemoryDep(name='buf34', index=c0, size=(16777216,)),
        MemoryDep(name='buf35', index=c0, size=(32768, 512)),
        MemoryDep(name='buf36', index=c0, size=(32768, 512))]
buf37.met_dependencies = []
buf37.group.device = cuda:0
buf37.group.iteration = (16777216, 1)
buf37.sizes = ([32768, 512], [])
class buf37_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf37', get_index_3, div_1, None)
        return store


buf38: ExternKernelSchedulerNode(ExternKernelOut)
buf38.writes = [StarDep(name='buf38')]
buf38.unmet_dependencies = [StarDep(name='buf33'), StarDep(name='buf37')]
buf38.met_dependencies = []
buf38.node.kernel = extern_kernels.bmm


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(2097152,))]
buf39.unmet_dependencies = [   MemoryDep(name='buf38', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf39.met_dependencies = []
buf39.group.device = cuda:0
buf39.group.iteration = (2097152, 1)
buf39.sizes = ([512, 4096], [])
class buf39_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


buf40: ExternKernelSchedulerNode(ExternKernelOut)
buf40.writes = [StarDep(name='buf40')]
buf40.unmet_dependencies = [StarDep(name='buf39')]
buf40.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf40.node.kernel = extern_kernels.addmm


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = 
    [   MemoryDep(name='buf41', index=c0, size=(512, 4096)),
        MemoryDep(name='buf41', index=c0, size=(512,))]
buf41.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(2097152,)),
        MemoryDep(name='buf40', index=c0, size=(2097152,))]
buf41.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf41.group.device = cuda:0
buf41.group.iteration = (512, 4096)
buf41.sizes = ([512], [4096])
class buf41_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf40', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf41', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = [MemoryDep(name='buf42', index=c0, size=(512,))]
buf42.unmet_dependencies = [MemoryDep(name='buf41', index=c0, size=(512,))]
buf42.met_dependencies = []
buf42.group.device = cuda:0
buf42.group.iteration = (512, 1)
buf42.sizes = ([512], [])
class buf42_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf42', get_index_1, div, None)
        return store


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = 
    [   MemoryDep(name='buf43', index=c0, size=(512, 4096)),
        MemoryDep(name='buf43', index=c0, size=(512,))]
buf43.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(2097152,)),
        MemoryDep(name='buf40', index=c0, size=(2097152,)),
        MemoryDep(name='buf42', index=c0, size=(512, 4096))]
buf43.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf43.group.device = cuda:0
buf43.group.iteration = (512, 4096)
buf43.sizes = ([512], [4096])
class buf43_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf40', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf42', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf43', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = [MemoryDep(name='buf44', index=c0, size=(2097152,))]
buf44.unmet_dependencies = 
    [   MemoryDep(name='buf29', index=c0, size=(2097152,)),
        MemoryDep(name='buf40', index=c0, size=(2097152,)),
        MemoryDep(name='buf42', index=c0, size=(512, 4096)),
        MemoryDep(name='buf43', index=c0, size=(512, 4096))]
buf44.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf44.group.device = cuda:0
buf44.group.iteration = (2097152, 1)
buf44.sizes = ([512, 4096], [])
class buf44_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf40', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf42', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf43', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf44', get_index_6, mul_1, None)
        return store


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = [MemoryDep(name='buf45', index=c0, size=(2097152,))]
buf45.unmet_dependencies = [MemoryDep(name='buf44', index=c0, size=(2097152,))]
buf45.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf45.group.device = cuda:0
buf45.group.iteration = (2097152, 1)
buf45.sizes = ([512, 4096], [])
class buf45_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf45', get_index_3, add, None)
        return store


buf46: ExternKernelSchedulerNode(ExternKernelOut)
buf46.writes = [StarDep(name='buf46')]
buf46.unmet_dependencies = [StarDep(name='buf45')]
buf46.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf46.node.kernel = extern_kernels.addmm


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(8388608,))]
buf47.unmet_dependencies = [MemoryDep(name='buf46', index=c0, size=(8388608,))]
buf47.met_dependencies = []
buf47.group.device = cuda:0
buf47.group.iteration = (8388608, 1)
buf47.sizes = ([8388608], [])
class buf47_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, tanh, None)
        return store


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = [MemoryDep(name='buf48', index=c0, size=(8388608,))]
buf48.unmet_dependencies = 
    [   MemoryDep(name='buf46', index=c0, size=(8388608,)),
        MemoryDep(name='buf47', index=c0, size=(8388608,))]
buf48.met_dependencies = []
buf48.group.device = cuda:0
buf48.group.iteration = (8388608, 1)
buf48.sizes = ([8388608], [])
class buf48_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, mul_1, None)
        return store


buf49: ExternKernelSchedulerNode(ExternKernelOut)
buf49.writes = [StarDep(name='buf49')]
buf49.unmet_dependencies = [StarDep(name='buf48')]
buf49.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf49.node.kernel = extern_kernels.addmm


buf50: SchedulerNode(ComputedBuffer)
buf50.writes = 
    [   MemoryDep(name='buf50', index=c0, size=(512, 4096)),
        MemoryDep(name='buf50', index=c0, size=(512,))]
buf50.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=c0, size=(2097152,)),
        MemoryDep(name='buf49', index=c0, size=(2097152,))]
buf50.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf50.group.device = cuda:0
buf50.group.iteration = (512, 4096)
buf50.sizes = ([512], [4096])
class buf50_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf50', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = [MemoryDep(name='buf51', index=c0, size=(512,))]
buf51.unmet_dependencies = [MemoryDep(name='buf50', index=c0, size=(512,))]
buf51.met_dependencies = []
buf51.group.device = cuda:0
buf51.group.iteration = (512, 1)
buf51.sizes = ([512], [])
class buf51_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, div, None)
        return store


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = 
    [   MemoryDep(name='buf52', index=c0, size=(512, 4096)),
        MemoryDep(name='buf52', index=c0, size=(512,))]
buf52.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=c0, size=(2097152,)),
        MemoryDep(name='buf49', index=c0, size=(2097152,)),
        MemoryDep(name='buf51', index=c0, size=(512, 4096))]
buf52.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf52.group.device = cuda:0
buf52.group.iteration = (512, 4096)
buf52.sizes = ([512], [4096])
class buf52_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf52', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep(name='buf53', index=c0, size=(2097152,))]
buf53.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=c0, size=(2097152,)),
        MemoryDep(name='buf49', index=c0, size=(2097152,)),
        MemoryDep(name='buf51', index=c0, size=(512, 4096)),
        MemoryDep(name='buf52', index=c0, size=(512, 4096))]
buf53.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf53.group.device = cuda:0
buf53.group.iteration = (2097152, 1)
buf53.sizes = ([512, 4096], [])
class buf53_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf52', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf53', get_index_6, mul_1, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep(name='buf54', index=c0, size=(2097152,))]
buf54.unmet_dependencies = [MemoryDep(name='buf53', index=c0, size=(2097152,))]
buf54.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf54.group.device = cuda:0
buf54.group.iteration = (2097152, 1)
buf54.sizes = ([512, 4096], [])
class buf54_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf54', get_index_3, add, None)
        return store


buf55: ExternKernelSchedulerNode(ExternKernelOut)
buf55.writes = [StarDep(name='buf55')]
buf55.unmet_dependencies = [StarDep(name='buf54')]
buf55.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf55.node.kernel = extern_kernels.addmm


buf56: ExternKernelSchedulerNode(ExternKernelOut)
buf56.writes = [StarDep(name='buf56')]
buf56.unmet_dependencies = [StarDep(name='buf54')]
buf56.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf56.node.kernel = extern_kernels.addmm


buf57: ExternKernelSchedulerNode(ExternKernelOut)
buf57.writes = [StarDep(name='buf57')]
buf57.unmet_dependencies = [StarDep(name='buf54')]
buf57.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf57.node.kernel = extern_kernels.addmm


buf58: ExternKernelSchedulerNode(ExternKernelOut)
buf58.writes = [StarDep(name='buf58')]
buf58.unmet_dependencies = [StarDep(name='buf55'), StarDep(name='buf56')]
buf58.met_dependencies = []
buf58.node.kernel = extern_kernels.bmm


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = 
    [   MemoryDep(name='buf59', index=c0, size=(32768, 512)),
        MemoryDep(name='buf59', index=c0, size=(32768,))]
buf59.unmet_dependencies = [MemoryDep(name='buf58', index=c0, size=(16777216,))]
buf59.met_dependencies = []
buf59.group.device = cuda:0
buf59.group.iteration = (32768, 512)
buf59.sizes = ([32768], [512])
class buf59_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf59', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = 
    [   MemoryDep(name='buf60', index=c0, size=(32768, 512)),
        MemoryDep(name='buf60', index=c0, size=(32768,))]
buf60.unmet_dependencies = 
    [   MemoryDep(name='buf58', index=c0, size=(16777216,)),
        MemoryDep(name='buf59', index=c0, size=(32768, 512))]
buf60.met_dependencies = []
buf60.group.device = cuda:0
buf60.group.iteration = (32768, 512)
buf60.sizes = ([32768], [512])
class buf60_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf60', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep(name='buf61', index=c0, size=(16777216,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf58', index=c0, size=(16777216,)),
        MemoryDep(name='buf59', index=c0, size=(32768, 512)),
        MemoryDep(name='buf60', index=c0, size=(32768, 512))]
buf61.met_dependencies = []
buf61.group.device = cuda:0
buf61.group.iteration = (16777216, 1)
buf61.sizes = ([32768, 512], [])
class buf61_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf61', get_index_3, div_1, None)
        return store


buf62: ExternKernelSchedulerNode(ExternKernelOut)
buf62.writes = [StarDep(name='buf62')]
buf62.unmet_dependencies = [StarDep(name='buf57'), StarDep(name='buf61')]
buf62.met_dependencies = []
buf62.node.kernel = extern_kernels.bmm


buf63: SchedulerNode(ComputedBuffer)
buf63.writes = [MemoryDep(name='buf63', index=c0, size=(2097152,))]
buf63.unmet_dependencies = [   MemoryDep(name='buf62', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf63.met_dependencies = []
buf63.group.device = cuda:0
buf63.group.iteration = (2097152, 1)
buf63.sizes = ([512, 4096], [])
class buf63_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf63', get_index_1, load, None)
        return store


buf64: ExternKernelSchedulerNode(ExternKernelOut)
buf64.writes = [StarDep(name='buf64')]
buf64.unmet_dependencies = [StarDep(name='buf63')]
buf64.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf64.node.kernel = extern_kernels.addmm


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = 
    [   MemoryDep(name='buf65', index=c0, size=(512, 4096)),
        MemoryDep(name='buf65', index=c0, size=(512,))]
buf65.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(2097152,)),
        MemoryDep(name='buf64', index=c0, size=(2097152,))]
buf65.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf65.group.device = cuda:0
buf65.group.iteration = (512, 4096)
buf65.sizes = ([512], [4096])
class buf65_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf64', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf65', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = [MemoryDep(name='buf66', index=c0, size=(512,))]
buf66.unmet_dependencies = [MemoryDep(name='buf65', index=c0, size=(512,))]
buf66.met_dependencies = []
buf66.group.device = cuda:0
buf66.group.iteration = (512, 1)
buf66.sizes = ([512], [])
class buf66_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf66', get_index_1, div, None)
        return store


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = 
    [   MemoryDep(name='buf67', index=c0, size=(512, 4096)),
        MemoryDep(name='buf67', index=c0, size=(512,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(2097152,)),
        MemoryDep(name='buf64', index=c0, size=(2097152,)),
        MemoryDep(name='buf66', index=c0, size=(512, 4096))]
buf67.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf67.group.device = cuda:0
buf67.group.iteration = (512, 4096)
buf67.sizes = ([512], [4096])
class buf67_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf64', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf67', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = [MemoryDep(name='buf68', index=c0, size=(2097152,))]
buf68.unmet_dependencies = 
    [   MemoryDep(name='buf53', index=c0, size=(2097152,)),
        MemoryDep(name='buf64', index=c0, size=(2097152,)),
        MemoryDep(name='buf66', index=c0, size=(512, 4096)),
        MemoryDep(name='buf67', index=c0, size=(512, 4096))]
buf68.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf68.group.device = cuda:0
buf68.group.iteration = (2097152, 1)
buf68.sizes = ([512, 4096], [])
class buf68_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf64', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf67', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf68', get_index_6, mul_1, None)
        return store


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = [MemoryDep(name='buf69', index=c0, size=(2097152,))]
buf69.unmet_dependencies = [MemoryDep(name='buf68', index=c0, size=(2097152,))]
buf69.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf69.group.device = cuda:0
buf69.group.iteration = (2097152, 1)
buf69.sizes = ([512, 4096], [])
class buf69_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf69', get_index_3, add, None)
        return store


buf70: ExternKernelSchedulerNode(ExternKernelOut)
buf70.writes = [StarDep(name='buf70')]
buf70.unmet_dependencies = [StarDep(name='buf69')]
buf70.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf70.node.kernel = extern_kernels.addmm


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = [MemoryDep(name='buf71', index=c0, size=(8388608,))]
buf71.unmet_dependencies = [MemoryDep(name='buf70', index=c0, size=(8388608,))]
buf71.met_dependencies = []
buf71.group.device = cuda:0
buf71.group.iteration = (8388608, 1)
buf71.sizes = ([8388608], [])
class buf71_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf71', get_index_2, tanh, None)
        return store


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = [MemoryDep(name='buf72', index=c0, size=(8388608,))]
buf72.unmet_dependencies = 
    [   MemoryDep(name='buf70', index=c0, size=(8388608,)),
        MemoryDep(name='buf71', index=c0, size=(8388608,))]
buf72.met_dependencies = []
buf72.group.device = cuda:0
buf72.group.iteration = (8388608, 1)
buf72.sizes = ([8388608], [])
class buf72_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf71', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf72', get_index_2, mul_1, None)
        return store


buf73: ExternKernelSchedulerNode(ExternKernelOut)
buf73.writes = [StarDep(name='buf73')]
buf73.unmet_dependencies = [StarDep(name='buf72')]
buf73.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf73.node.kernel = extern_kernels.addmm


buf74: SchedulerNode(ComputedBuffer)
buf74.writes = 
    [   MemoryDep(name='buf74', index=c0, size=(512, 4096)),
        MemoryDep(name='buf74', index=c0, size=(512,))]
buf74.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=c0, size=(2097152,)),
        MemoryDep(name='buf73', index=c0, size=(2097152,))]
buf74.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf74.group.device = cuda:0
buf74.group.iteration = (512, 4096)
buf74.sizes = ([512], [4096])
class buf74_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf74', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = [MemoryDep(name='buf75', index=c0, size=(512,))]
buf75.unmet_dependencies = [MemoryDep(name='buf74', index=c0, size=(512,))]
buf75.met_dependencies = []
buf75.group.device = cuda:0
buf75.group.iteration = (512, 1)
buf75.sizes = ([512], [])
class buf75_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf75', get_index_1, div, None)
        return store


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = 
    [   MemoryDep(name='buf76', index=c0, size=(512, 4096)),
        MemoryDep(name='buf76', index=c0, size=(512,))]
buf76.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=c0, size=(2097152,)),
        MemoryDep(name='buf73', index=c0, size=(2097152,)),
        MemoryDep(name='buf75', index=c0, size=(512, 4096))]
buf76.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf76.group.device = cuda:0
buf76.group.iteration = (512, 4096)
buf76.sizes = ([512], [4096])
class buf76_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf76', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(2097152,))]
buf77.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=c0, size=(2097152,)),
        MemoryDep(name='buf73', index=c0, size=(2097152,)),
        MemoryDep(name='buf75', index=c0, size=(512, 4096)),
        MemoryDep(name='buf76', index=c0, size=(512, 4096))]
buf77.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf77.group.device = cuda:0
buf77.group.iteration = (2097152, 1)
buf77.sizes = ([512, 4096], [])
class buf77_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf76', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf77', get_index_6, mul_1, None)
        return store


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = [MemoryDep(name='buf78', index=c0, size=(2097152,))]
buf78.unmet_dependencies = [MemoryDep(name='buf77', index=c0, size=(2097152,))]
buf78.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf78.group.device = cuda:0
buf78.group.iteration = (2097152, 1)
buf78.sizes = ([512, 4096], [])
class buf78_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf78', get_index_3, add, None)
        return store


buf79: ExternKernelSchedulerNode(ExternKernelOut)
buf79.writes = [StarDep(name='buf79')]
buf79.unmet_dependencies = [StarDep(name='buf78')]
buf79.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf79.node.kernel = extern_kernels.addmm


buf80: ExternKernelSchedulerNode(ExternKernelOut)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf78')]
buf80.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf80.node.kernel = extern_kernels.addmm


buf81: ExternKernelSchedulerNode(ExternKernelOut)
buf81.writes = [StarDep(name='buf81')]
buf81.unmet_dependencies = [StarDep(name='buf78')]
buf81.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf81.node.kernel = extern_kernels.addmm


buf82: ExternKernelSchedulerNode(ExternKernelOut)
buf82.writes = [StarDep(name='buf82')]
buf82.unmet_dependencies = [StarDep(name='buf79'), StarDep(name='buf80')]
buf82.met_dependencies = []
buf82.node.kernel = extern_kernels.bmm


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = 
    [   MemoryDep(name='buf83', index=c0, size=(32768, 512)),
        MemoryDep(name='buf83', index=c0, size=(32768,))]
buf83.unmet_dependencies = [MemoryDep(name='buf82', index=c0, size=(16777216,))]
buf83.met_dependencies = []
buf83.group.device = cuda:0
buf83.group.iteration = (32768, 512)
buf83.sizes = ([32768], [512])
class buf83_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf83', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = 
    [   MemoryDep(name='buf84', index=c0, size=(32768, 512)),
        MemoryDep(name='buf84', index=c0, size=(32768,))]
buf84.unmet_dependencies = 
    [   MemoryDep(name='buf82', index=c0, size=(16777216,)),
        MemoryDep(name='buf83', index=c0, size=(32768, 512))]
buf84.met_dependencies = []
buf84.group.device = cuda:0
buf84.group.iteration = (32768, 512)
buf84.sizes = ([32768], [512])
class buf84_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf84', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf85: SchedulerNode(ComputedBuffer)
buf85.writes = [MemoryDep(name='buf85', index=c0, size=(16777216,))]
buf85.unmet_dependencies = 
    [   MemoryDep(name='buf82', index=c0, size=(16777216,)),
        MemoryDep(name='buf83', index=c0, size=(32768, 512)),
        MemoryDep(name='buf84', index=c0, size=(32768, 512))]
buf85.met_dependencies = []
buf85.group.device = cuda:0
buf85.group.iteration = (16777216, 1)
buf85.sizes = ([32768, 512], [])
class buf85_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf85', get_index_3, div_1, None)
        return store


buf86: ExternKernelSchedulerNode(ExternKernelOut)
buf86.writes = [StarDep(name='buf86')]
buf86.unmet_dependencies = [StarDep(name='buf81'), StarDep(name='buf85')]
buf86.met_dependencies = []
buf86.node.kernel = extern_kernels.bmm


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = [MemoryDep(name='buf87', index=c0, size=(2097152,))]
buf87.unmet_dependencies = [   MemoryDep(name='buf86', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf87.met_dependencies = []
buf87.group.device = cuda:0
buf87.group.iteration = (2097152, 1)
buf87.sizes = ([512, 4096], [])
class buf87_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store


buf88: ExternKernelSchedulerNode(ExternKernelOut)
buf88.writes = [StarDep(name='buf88')]
buf88.unmet_dependencies = [StarDep(name='buf87')]
buf88.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf88.node.kernel = extern_kernels.addmm


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(512, 4096)),
        MemoryDep(name='buf89', index=c0, size=(512,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf77', index=c0, size=(2097152,)),
        MemoryDep(name='buf88', index=c0, size=(2097152,))]
buf89.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf89.group.device = cuda:0
buf89.group.iteration = (512, 4096)
buf89.sizes = ([512], [4096])
class buf89_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf88', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(512,))]
buf90.unmet_dependencies = [MemoryDep(name='buf89', index=c0, size=(512,))]
buf90.met_dependencies = []
buf90.group.device = cuda:0
buf90.group.iteration = (512, 1)
buf90.sizes = ([512], [])
class buf90_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf90', get_index_1, div, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = 
    [   MemoryDep(name='buf91', index=c0, size=(512, 4096)),
        MemoryDep(name='buf91', index=c0, size=(512,))]
buf91.unmet_dependencies = 
    [   MemoryDep(name='buf77', index=c0, size=(2097152,)),
        MemoryDep(name='buf88', index=c0, size=(2097152,)),
        MemoryDep(name='buf90', index=c0, size=(512, 4096))]
buf91.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf91.group.device = cuda:0
buf91.group.iteration = (512, 4096)
buf91.sizes = ([512], [4096])
class buf91_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf88', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf90', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf91', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf92: SchedulerNode(ComputedBuffer)
buf92.writes = [MemoryDep(name='buf92', index=c0, size=(2097152,))]
buf92.unmet_dependencies = 
    [   MemoryDep(name='buf77', index=c0, size=(2097152,)),
        MemoryDep(name='buf88', index=c0, size=(2097152,)),
        MemoryDep(name='buf90', index=c0, size=(512, 4096)),
        MemoryDep(name='buf91', index=c0, size=(512, 4096))]
buf92.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf92.group.device = cuda:0
buf92.group.iteration = (2097152, 1)
buf92.sizes = ([512, 4096], [])
class buf92_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf88', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf90', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf91', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf92', get_index_6, mul_1, None)
        return store


buf93: SchedulerNode(ComputedBuffer)
buf93.writes = [MemoryDep(name='buf93', index=c0, size=(2097152,))]
buf93.unmet_dependencies = [MemoryDep(name='buf92', index=c0, size=(2097152,))]
buf93.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf93.group.device = cuda:0
buf93.group.iteration = (2097152, 1)
buf93.sizes = ([512, 4096], [])
class buf93_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf93', get_index_3, add, None)
        return store


buf94: ExternKernelSchedulerNode(ExternKernelOut)
buf94.writes = [StarDep(name='buf94')]
buf94.unmet_dependencies = [StarDep(name='buf93')]
buf94.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf94.node.kernel = extern_kernels.addmm


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(8388608,))]
buf95.unmet_dependencies = [MemoryDep(name='buf94', index=c0, size=(8388608,))]
buf95.met_dependencies = []
buf95.group.device = cuda:0
buf95.group.iteration = (8388608, 1)
buf95.sizes = ([8388608], [])
class buf95_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf95', get_index_2, tanh, None)
        return store


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = [MemoryDep(name='buf96', index=c0, size=(8388608,))]
buf96.unmet_dependencies = 
    [   MemoryDep(name='buf94', index=c0, size=(8388608,)),
        MemoryDep(name='buf95', index=c0, size=(8388608,))]
buf96.met_dependencies = []
buf96.group.device = cuda:0
buf96.group.iteration = (8388608, 1)
buf96.sizes = ([8388608], [])
class buf96_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf96', get_index_2, mul_1, None)
        return store


buf97: ExternKernelSchedulerNode(ExternKernelOut)
buf97.writes = [StarDep(name='buf97')]
buf97.unmet_dependencies = [StarDep(name='buf96')]
buf97.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf97.node.kernel = extern_kernels.addmm


buf98: SchedulerNode(ComputedBuffer)
buf98.writes = 
    [   MemoryDep(name='buf98', index=c0, size=(512, 4096)),
        MemoryDep(name='buf98', index=c0, size=(512,))]
buf98.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=c0, size=(2097152,)),
        MemoryDep(name='buf97', index=c0, size=(2097152,))]
buf98.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf98.group.device = cuda:0
buf98.group.iteration = (512, 4096)
buf98.sizes = ([512], [4096])
class buf98_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf98', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = [MemoryDep(name='buf99', index=c0, size=(512,))]
buf99.unmet_dependencies = [MemoryDep(name='buf98', index=c0, size=(512,))]
buf99.met_dependencies = []
buf99.group.device = cuda:0
buf99.group.iteration = (512, 1)
buf99.sizes = ([512], [])
class buf99_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, div, None)
        return store


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = 
    [   MemoryDep(name='buf100', index=c0, size=(512, 4096)),
        MemoryDep(name='buf100', index=c0, size=(512,))]
buf100.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=c0, size=(2097152,)),
        MemoryDep(name='buf97', index=c0, size=(2097152,)),
        MemoryDep(name='buf99', index=c0, size=(512, 4096))]
buf100.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf100.group.device = cuda:0
buf100.group.iteration = (512, 4096)
buf100.sizes = ([512], [4096])
class buf100_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf100', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = [MemoryDep(name='buf101', index=c0, size=(2097152,))]
buf101.unmet_dependencies = 
    [   MemoryDep(name='buf100', index=c0, size=(512, 4096)),
        MemoryDep(name='buf92', index=c0, size=(2097152,)),
        MemoryDep(name='buf97', index=c0, size=(2097152,)),
        MemoryDep(name='buf99', index=c0, size=(512, 4096))]
buf101.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf101.group.device = cuda:0
buf101.group.iteration = (2097152, 1)
buf101.sizes = ([512, 4096], [])
class buf101_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf100', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf101', get_index_6, mul_1, None)
        return store


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = [MemoryDep(name='buf102', index=c0, size=(2097152,))]
buf102.unmet_dependencies = [MemoryDep(name='buf101', index=c0, size=(2097152,))]
buf102.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf102.group.device = cuda:0
buf102.group.iteration = (2097152, 1)
buf102.sizes = ([512, 4096], [])
class buf102_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf102', get_index_3, add, None)
        return store


buf103: ExternKernelSchedulerNode(ExternKernelOut)
buf103.writes = [StarDep(name='buf103')]
buf103.unmet_dependencies = [StarDep(name='buf102')]
buf103.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf103.node.kernel = extern_kernels.addmm


buf104: ExternKernelSchedulerNode(ExternKernelOut)
buf104.writes = [StarDep(name='buf104')]
buf104.unmet_dependencies = [StarDep(name='buf102')]
buf104.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf104.node.kernel = extern_kernels.addmm


buf105: ExternKernelSchedulerNode(ExternKernelOut)
buf105.writes = [StarDep(name='buf105')]
buf105.unmet_dependencies = [StarDep(name='buf102')]
buf105.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf105.node.kernel = extern_kernels.addmm


buf106: ExternKernelSchedulerNode(ExternKernelOut)
buf106.writes = [StarDep(name='buf106')]
buf106.unmet_dependencies = [StarDep(name='buf103'), StarDep(name='buf104')]
buf106.met_dependencies = []
buf106.node.kernel = extern_kernels.bmm


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = 
    [   MemoryDep(name='buf107', index=c0, size=(32768, 512)),
        MemoryDep(name='buf107', index=c0, size=(32768,))]
buf107.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(16777216,))]
buf107.met_dependencies = []
buf107.group.device = cuda:0
buf107.group.iteration = (32768, 512)
buf107.sizes = ([32768], [512])
class buf107_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf107', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = 
    [   MemoryDep(name='buf108', index=c0, size=(32768, 512)),
        MemoryDep(name='buf108', index=c0, size=(32768,))]
buf108.unmet_dependencies = 
    [   MemoryDep(name='buf106', index=c0, size=(16777216,)),
        MemoryDep(name='buf107', index=c0, size=(32768, 512))]
buf108.met_dependencies = []
buf108.group.device = cuda:0
buf108.group.iteration = (32768, 512)
buf108.sizes = ([32768], [512])
class buf108_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf108', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = [MemoryDep(name='buf109', index=c0, size=(16777216,))]
buf109.unmet_dependencies = 
    [   MemoryDep(name='buf106', index=c0, size=(16777216,)),
        MemoryDep(name='buf107', index=c0, size=(32768, 512)),
        MemoryDep(name='buf108', index=c0, size=(32768, 512))]
buf109.met_dependencies = []
buf109.group.device = cuda:0
buf109.group.iteration = (16777216, 1)
buf109.sizes = ([32768, 512], [])
class buf109_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf109', get_index_3, div_1, None)
        return store


buf110: ExternKernelSchedulerNode(ExternKernelOut)
buf110.writes = [StarDep(name='buf110')]
buf110.unmet_dependencies = [StarDep(name='buf105'), StarDep(name='buf109')]
buf110.met_dependencies = []
buf110.node.kernel = extern_kernels.bmm


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep(name='buf111', index=c0, size=(2097152,))]
buf111.unmet_dependencies = [   MemoryDep(name='buf110', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf111.met_dependencies = []
buf111.group.device = cuda:0
buf111.group.iteration = (2097152, 1)
buf111.sizes = ([512, 4096], [])
class buf111_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


buf112: ExternKernelSchedulerNode(ExternKernelOut)
buf112.writes = [StarDep(name='buf112')]
buf112.unmet_dependencies = [StarDep(name='buf111')]
buf112.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf112.node.kernel = extern_kernels.addmm


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = 
    [   MemoryDep(name='buf113', index=c0, size=(512, 4096)),
        MemoryDep(name='buf113', index=c0, size=(512,))]
buf113.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,))]
buf113.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf113.group.device = cuda:0
buf113.group.iteration = (512, 4096)
buf113.sizes = ([512], [4096])
class buf113_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf112', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf113', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = [MemoryDep(name='buf114', index=c0, size=(512,))]
buf114.unmet_dependencies = [MemoryDep(name='buf113', index=c0, size=(512,))]
buf114.met_dependencies = []
buf114.group.device = cuda:0
buf114.group.iteration = (512, 1)
buf114.sizes = ([512], [])
class buf114_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf114', get_index_1, div, None)
        return store


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = 
    [   MemoryDep(name='buf115', index=c0, size=(512, 4096)),
        MemoryDep(name='buf115', index=c0, size=(512,))]
buf115.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,)),
        MemoryDep(name='buf114', index=c0, size=(512, 4096))]
buf115.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf115.group.device = cuda:0
buf115.group.iteration = (512, 4096)
buf115.sizes = ([512], [4096])
class buf115_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf112', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf114', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf115', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = [MemoryDep(name='buf116', index=c0, size=(2097152,))]
buf116.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(2097152,)),
        MemoryDep(name='buf112', index=c0, size=(2097152,)),
        MemoryDep(name='buf114', index=c0, size=(512, 4096)),
        MemoryDep(name='buf115', index=c0, size=(512, 4096))]
buf116.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf116.group.device = cuda:0
buf116.group.iteration = (2097152, 1)
buf116.sizes = ([512, 4096], [])
class buf116_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf112', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf114', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf115', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf116', get_index_6, mul_1, None)
        return store


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(2097152,))]
buf117.unmet_dependencies = [MemoryDep(name='buf116', index=c0, size=(2097152,))]
buf117.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf117.group.device = cuda:0
buf117.group.iteration = (2097152, 1)
buf117.sizes = ([512, 4096], [])
class buf117_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf117', get_index_3, add, None)
        return store


buf118: ExternKernelSchedulerNode(ExternKernelOut)
buf118.writes = [StarDep(name='buf118')]
buf118.unmet_dependencies = [StarDep(name='buf117')]
buf118.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf118.node.kernel = extern_kernels.addmm


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = [MemoryDep(name='buf119', index=c0, size=(8388608,))]
buf119.unmet_dependencies = [MemoryDep(name='buf118', index=c0, size=(8388608,))]
buf119.met_dependencies = []
buf119.group.device = cuda:0
buf119.group.iteration = (8388608, 1)
buf119.sizes = ([8388608], [])
class buf119_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, tanh, None)
        return store


buf120: SchedulerNode(ComputedBuffer)
buf120.writes = [MemoryDep(name='buf120', index=c0, size=(8388608,))]
buf120.unmet_dependencies = 
    [   MemoryDep(name='buf118', index=c0, size=(8388608,)),
        MemoryDep(name='buf119', index=c0, size=(8388608,))]
buf120.met_dependencies = []
buf120.group.device = cuda:0
buf120.group.iteration = (8388608, 1)
buf120.sizes = ([8388608], [])
class buf120_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf119', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf120', get_index_2, mul_1, None)
        return store


buf121: ExternKernelSchedulerNode(ExternKernelOut)
buf121.writes = [StarDep(name='buf121')]
buf121.unmet_dependencies = [StarDep(name='buf120')]
buf121.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf121.node.kernel = extern_kernels.addmm


buf122: SchedulerNode(ComputedBuffer)
buf122.writes = 
    [   MemoryDep(name='buf122', index=c0, size=(512, 4096)),
        MemoryDep(name='buf122', index=c0, size=(512,))]
buf122.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(2097152,)),
        MemoryDep(name='buf121', index=c0, size=(2097152,))]
buf122.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf122.group.device = cuda:0
buf122.group.iteration = (512, 4096)
buf122.sizes = ([512], [4096])
class buf122_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf116', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf122', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = [MemoryDep(name='buf123', index=c0, size=(512,))]
buf123.unmet_dependencies = [MemoryDep(name='buf122', index=c0, size=(512,))]
buf123.met_dependencies = []
buf123.group.device = cuda:0
buf123.group.iteration = (512, 1)
buf123.sizes = ([512], [])
class buf123_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf123', get_index_1, div, None)
        return store


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = 
    [   MemoryDep(name='buf124', index=c0, size=(512, 4096)),
        MemoryDep(name='buf124', index=c0, size=(512,))]
buf124.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(2097152,)),
        MemoryDep(name='buf121', index=c0, size=(2097152,)),
        MemoryDep(name='buf123', index=c0, size=(512, 4096))]
buf124.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf124.group.device = cuda:0
buf124.group.iteration = (512, 4096)
buf124.sizes = ([512], [4096])
class buf124_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf116', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf124', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = [MemoryDep(name='buf125', index=c0, size=(2097152,))]
buf125.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(2097152,)),
        MemoryDep(name='buf121', index=c0, size=(2097152,)),
        MemoryDep(name='buf123', index=c0, size=(512, 4096)),
        MemoryDep(name='buf124', index=c0, size=(512, 4096))]
buf125.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf125.group.device = cuda:0
buf125.group.iteration = (2097152, 1)
buf125.sizes = ([512, 4096], [])
class buf125_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf116', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf124', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf125', get_index_6, mul_1, None)
        return store


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep(name='buf126', index=c0, size=(2097152,))]
buf126.unmet_dependencies = [MemoryDep(name='buf125', index=c0, size=(2097152,))]
buf126.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf126.group.device = cuda:0
buf126.group.iteration = (2097152, 1)
buf126.sizes = ([512, 4096], [])
class buf126_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf126', get_index_3, add, None)
        return store


buf127: ExternKernelSchedulerNode(ExternKernelOut)
buf127.writes = [StarDep(name='buf127')]
buf127.unmet_dependencies = [StarDep(name='buf126')]
buf127.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf127.node.kernel = extern_kernels.addmm


buf128: ExternKernelSchedulerNode(ExternKernelOut)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf126')]
buf128.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf128.node.kernel = extern_kernels.addmm


buf129: ExternKernelSchedulerNode(ExternKernelOut)
buf129.writes = [StarDep(name='buf129')]
buf129.unmet_dependencies = [StarDep(name='buf126')]
buf129.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf129.node.kernel = extern_kernels.addmm


buf130: ExternKernelSchedulerNode(ExternKernelOut)
buf130.writes = [StarDep(name='buf130')]
buf130.unmet_dependencies = [StarDep(name='buf127'), StarDep(name='buf128')]
buf130.met_dependencies = []
buf130.node.kernel = extern_kernels.bmm


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = 
    [   MemoryDep(name='buf131', index=c0, size=(32768, 512)),
        MemoryDep(name='buf131', index=c0, size=(32768,))]
buf131.unmet_dependencies = [MemoryDep(name='buf130', index=c0, size=(16777216,))]
buf131.met_dependencies = []
buf131.group.device = cuda:0
buf131.group.iteration = (32768, 512)
buf131.sizes = ([32768], [512])
class buf131_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf131', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = 
    [   MemoryDep(name='buf132', index=c0, size=(32768, 512)),
        MemoryDep(name='buf132', index=c0, size=(32768,))]
buf132.unmet_dependencies = 
    [   MemoryDep(name='buf130', index=c0, size=(16777216,)),
        MemoryDep(name='buf131', index=c0, size=(32768, 512))]
buf132.met_dependencies = []
buf132.group.device = cuda:0
buf132.group.iteration = (32768, 512)
buf132.sizes = ([32768], [512])
class buf132_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf132', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(16777216,))]
buf133.unmet_dependencies = 
    [   MemoryDep(name='buf130', index=c0, size=(16777216,)),
        MemoryDep(name='buf131', index=c0, size=(32768, 512)),
        MemoryDep(name='buf132', index=c0, size=(32768, 512))]
buf133.met_dependencies = []
buf133.group.device = cuda:0
buf133.group.iteration = (16777216, 1)
buf133.sizes = ([32768, 512], [])
class buf133_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf133', get_index_3, div_1, None)
        return store


buf134: ExternKernelSchedulerNode(ExternKernelOut)
buf134.writes = [StarDep(name='buf134')]
buf134.unmet_dependencies = [StarDep(name='buf129'), StarDep(name='buf133')]
buf134.met_dependencies = []
buf134.node.kernel = extern_kernels.bmm


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(2097152,))]
buf135.unmet_dependencies = [   MemoryDep(name='buf134', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf135.met_dependencies = []
buf135.group.device = cuda:0
buf135.group.iteration = (2097152, 1)
buf135.sizes = ([512, 4096], [])
class buf135_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store


buf136: ExternKernelSchedulerNode(ExternKernelOut)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf135')]
buf136.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf136.node.kernel = extern_kernels.addmm


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = 
    [   MemoryDep(name='buf137', index=c0, size=(512, 4096)),
        MemoryDep(name='buf137', index=c0, size=(512,))]
buf137.unmet_dependencies = 
    [   MemoryDep(name='buf125', index=c0, size=(2097152,)),
        MemoryDep(name='buf136', index=c0, size=(2097152,))]
buf137.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf137.group.device = cuda:0
buf137.group.iteration = (512, 4096)
buf137.sizes = ([512], [4096])
class buf137_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf136', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf137', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = [MemoryDep(name='buf138', index=c0, size=(512,))]
buf138.unmet_dependencies = [MemoryDep(name='buf137', index=c0, size=(512,))]
buf138.met_dependencies = []
buf138.group.device = cuda:0
buf138.group.iteration = (512, 1)
buf138.sizes = ([512], [])
class buf138_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf138', get_index_1, div, None)
        return store


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = 
    [   MemoryDep(name='buf139', index=c0, size=(512, 4096)),
        MemoryDep(name='buf139', index=c0, size=(512,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf125', index=c0, size=(2097152,)),
        MemoryDep(name='buf136', index=c0, size=(2097152,)),
        MemoryDep(name='buf138', index=c0, size=(512, 4096))]
buf139.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf139.group.device = cuda:0
buf139.group.iteration = (512, 4096)
buf139.sizes = ([512], [4096])
class buf139_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf136', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf138', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf139', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = [MemoryDep(name='buf140', index=c0, size=(2097152,))]
buf140.unmet_dependencies = 
    [   MemoryDep(name='buf125', index=c0, size=(2097152,)),
        MemoryDep(name='buf136', index=c0, size=(2097152,)),
        MemoryDep(name='buf138', index=c0, size=(512, 4096)),
        MemoryDep(name='buf139', index=c0, size=(512, 4096))]
buf140.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf140.group.device = cuda:0
buf140.group.iteration = (2097152, 1)
buf140.sizes = ([512, 4096], [])
class buf140_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf136', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf138', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf139', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf140', get_index_6, mul_1, None)
        return store


buf141: SchedulerNode(ComputedBuffer)
buf141.writes = [MemoryDep(name='buf141', index=c0, size=(2097152,))]
buf141.unmet_dependencies = [MemoryDep(name='buf140', index=c0, size=(2097152,))]
buf141.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf141.group.device = cuda:0
buf141.group.iteration = (2097152, 1)
buf141.sizes = ([512, 4096], [])
class buf141_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf141', get_index_3, add, None)
        return store


buf142: ExternKernelSchedulerNode(ExternKernelOut)
buf142.writes = [StarDep(name='buf142')]
buf142.unmet_dependencies = [StarDep(name='buf141')]
buf142.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf142.node.kernel = extern_kernels.addmm


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = [MemoryDep(name='buf143', index=c0, size=(8388608,))]
buf143.unmet_dependencies = [MemoryDep(name='buf142', index=c0, size=(8388608,))]
buf143.met_dependencies = []
buf143.group.device = cuda:0
buf143.group.iteration = (8388608, 1)
buf143.sizes = ([8388608], [])
class buf143_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf143', get_index_2, tanh, None)
        return store


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = [MemoryDep(name='buf144', index=c0, size=(8388608,))]
buf144.unmet_dependencies = 
    [   MemoryDep(name='buf142', index=c0, size=(8388608,)),
        MemoryDep(name='buf143', index=c0, size=(8388608,))]
buf144.met_dependencies = []
buf144.group.device = cuda:0
buf144.group.iteration = (8388608, 1)
buf144.sizes = ([8388608], [])
class buf144_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, mul_1, None)
        return store


buf145: ExternKernelSchedulerNode(ExternKernelOut)
buf145.writes = [StarDep(name='buf145')]
buf145.unmet_dependencies = [StarDep(name='buf144')]
buf145.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf145.node.kernel = extern_kernels.addmm


buf146: SchedulerNode(ComputedBuffer)
buf146.writes = 
    [   MemoryDep(name='buf146', index=c0, size=(512, 4096)),
        MemoryDep(name='buf146', index=c0, size=(512,))]
buf146.unmet_dependencies = 
    [   MemoryDep(name='buf140', index=c0, size=(2097152,)),
        MemoryDep(name='buf145', index=c0, size=(2097152,))]
buf146.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf146.group.device = cuda:0
buf146.group.iteration = (512, 4096)
buf146.sizes = ([512], [4096])
class buf146_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf140', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf146', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = [MemoryDep(name='buf147', index=c0, size=(512,))]
buf147.unmet_dependencies = [MemoryDep(name='buf146', index=c0, size=(512,))]
buf147.met_dependencies = []
buf147.group.device = cuda:0
buf147.group.iteration = (512, 1)
buf147.sizes = ([512], [])
class buf147_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf147', get_index_1, div, None)
        return store


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(512, 4096)),
        MemoryDep(name='buf148', index=c0, size=(512,))]
buf148.unmet_dependencies = 
    [   MemoryDep(name='buf140', index=c0, size=(2097152,)),
        MemoryDep(name='buf145', index=c0, size=(2097152,)),
        MemoryDep(name='buf147', index=c0, size=(512, 4096))]
buf148.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf148.group.device = cuda:0
buf148.group.iteration = (512, 4096)
buf148.sizes = ([512], [4096])
class buf148_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf140', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = [MemoryDep(name='buf149', index=c0, size=(2097152,))]
buf149.unmet_dependencies = 
    [   MemoryDep(name='buf140', index=c0, size=(2097152,)),
        MemoryDep(name='buf145', index=c0, size=(2097152,)),
        MemoryDep(name='buf147', index=c0, size=(512, 4096)),
        MemoryDep(name='buf148', index=c0, size=(512, 4096))]
buf149.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf149.group.device = cuda:0
buf149.group.iteration = (2097152, 1)
buf149.sizes = ([512, 4096], [])
class buf149_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf140', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf148', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf149', get_index_6, mul_1, None)
        return store


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = [MemoryDep(name='buf150', index=c0, size=(2097152,))]
buf150.unmet_dependencies = [MemoryDep(name='buf149', index=c0, size=(2097152,))]
buf150.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf150.group.device = cuda:0
buf150.group.iteration = (2097152, 1)
buf150.sizes = ([512, 4096], [])
class buf150_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf150', get_index_3, add, None)
        return store


buf151: ExternKernelSchedulerNode(ExternKernelOut)
buf151.writes = [StarDep(name='buf151')]
buf151.unmet_dependencies = [StarDep(name='buf150')]
buf151.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf151.node.kernel = extern_kernels.addmm


buf152: ExternKernelSchedulerNode(ExternKernelOut)
buf152.writes = [StarDep(name='buf152')]
buf152.unmet_dependencies = [StarDep(name='buf150')]
buf152.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf152.node.kernel = extern_kernels.addmm


buf153: ExternKernelSchedulerNode(ExternKernelOut)
buf153.writes = [StarDep(name='buf153')]
buf153.unmet_dependencies = [StarDep(name='buf150')]
buf153.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf153.node.kernel = extern_kernels.addmm


buf154: ExternKernelSchedulerNode(ExternKernelOut)
buf154.writes = [StarDep(name='buf154')]
buf154.unmet_dependencies = [StarDep(name='buf151'), StarDep(name='buf152')]
buf154.met_dependencies = []
buf154.node.kernel = extern_kernels.bmm


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = 
    [   MemoryDep(name='buf155', index=c0, size=(32768, 512)),
        MemoryDep(name='buf155', index=c0, size=(32768,))]
buf155.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(16777216,))]
buf155.met_dependencies = []
buf155.group.device = cuda:0
buf155.group.iteration = (32768, 512)
buf155.sizes = ([32768], [512])
class buf155_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf155', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = 
    [   MemoryDep(name='buf156', index=c0, size=(32768, 512)),
        MemoryDep(name='buf156', index=c0, size=(32768,))]
buf156.unmet_dependencies = 
    [   MemoryDep(name='buf154', index=c0, size=(16777216,)),
        MemoryDep(name='buf155', index=c0, size=(32768, 512))]
buf156.met_dependencies = []
buf156.group.device = cuda:0
buf156.group.iteration = (32768, 512)
buf156.sizes = ([32768], [512])
class buf156_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf156', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(16777216,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf154', index=c0, size=(16777216,)),
        MemoryDep(name='buf155', index=c0, size=(32768, 512)),
        MemoryDep(name='buf156', index=c0, size=(32768, 512))]
buf157.met_dependencies = []
buf157.group.device = cuda:0
buf157.group.iteration = (16777216, 1)
buf157.sizes = ([32768, 512], [])
class buf157_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf157', get_index_3, div_1, None)
        return store


buf158: ExternKernelSchedulerNode(ExternKernelOut)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf153'), StarDep(name='buf157')]
buf158.met_dependencies = []
buf158.node.kernel = extern_kernels.bmm


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = [MemoryDep(name='buf159', index=c0, size=(2097152,))]
buf159.unmet_dependencies = [   MemoryDep(name='buf158', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf159.met_dependencies = []
buf159.group.device = cuda:0
buf159.group.iteration = (2097152, 1)
buf159.sizes = ([512, 4096], [])
class buf159_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store


buf160: ExternKernelSchedulerNode(ExternKernelOut)
buf160.writes = [StarDep(name='buf160')]
buf160.unmet_dependencies = [StarDep(name='buf159')]
buf160.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf160.node.kernel = extern_kernels.addmm


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = 
    [   MemoryDep(name='buf161', index=c0, size=(512, 4096)),
        MemoryDep(name='buf161', index=c0, size=(512,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf149', index=c0, size=(2097152,)),
        MemoryDep(name='buf160', index=c0, size=(2097152,))]
buf161.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf161.group.device = cuda:0
buf161.group.iteration = (512, 4096)
buf161.sizes = ([512], [4096])
class buf161_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf161', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = [MemoryDep(name='buf162', index=c0, size=(512,))]
buf162.unmet_dependencies = [MemoryDep(name='buf161', index=c0, size=(512,))]
buf162.met_dependencies = []
buf162.group.device = cuda:0
buf162.group.iteration = (512, 1)
buf162.sizes = ([512], [])
class buf162_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, div, None)
        return store


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = 
    [   MemoryDep(name='buf163', index=c0, size=(512, 4096)),
        MemoryDep(name='buf163', index=c0, size=(512,))]
buf163.unmet_dependencies = 
    [   MemoryDep(name='buf149', index=c0, size=(2097152,)),
        MemoryDep(name='buf160', index=c0, size=(2097152,)),
        MemoryDep(name='buf162', index=c0, size=(512, 4096))]
buf163.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf163.group.device = cuda:0
buf163.group.iteration = (512, 4096)
buf163.sizes = ([512], [4096])
class buf163_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf163', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf164: SchedulerNode(ComputedBuffer)
buf164.writes = [MemoryDep(name='buf164', index=c0, size=(2097152,))]
buf164.unmet_dependencies = 
    [   MemoryDep(name='buf149', index=c0, size=(2097152,)),
        MemoryDep(name='buf160', index=c0, size=(2097152,)),
        MemoryDep(name='buf162', index=c0, size=(512, 4096)),
        MemoryDep(name='buf163', index=c0, size=(512, 4096))]
buf164.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf164.group.device = cuda:0
buf164.group.iteration = (2097152, 1)
buf164.sizes = ([512, 4096], [])
class buf164_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf163', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf164', get_index_6, mul_1, None)
        return store


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = [MemoryDep(name='buf165', index=c0, size=(2097152,))]
buf165.unmet_dependencies = [MemoryDep(name='buf164', index=c0, size=(2097152,))]
buf165.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf165.group.device = cuda:0
buf165.group.iteration = (2097152, 1)
buf165.sizes = ([512, 4096], [])
class buf165_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf165', get_index_3, add, None)
        return store


buf166: ExternKernelSchedulerNode(ExternKernelOut)
buf166.writes = [StarDep(name='buf166')]
buf166.unmet_dependencies = [StarDep(name='buf165')]
buf166.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf166.node.kernel = extern_kernels.addmm


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = [MemoryDep(name='buf167', index=c0, size=(8388608,))]
buf167.unmet_dependencies = [MemoryDep(name='buf166', index=c0, size=(8388608,))]
buf167.met_dependencies = []
buf167.group.device = cuda:0
buf167.group.iteration = (8388608, 1)
buf167.sizes = ([8388608], [])
class buf167_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, tanh, None)
        return store


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = [MemoryDep(name='buf168', index=c0, size=(8388608,))]
buf168.unmet_dependencies = 
    [   MemoryDep(name='buf166', index=c0, size=(8388608,)),
        MemoryDep(name='buf167', index=c0, size=(8388608,))]
buf168.met_dependencies = []
buf168.group.device = cuda:0
buf168.group.iteration = (8388608, 1)
buf168.sizes = ([8388608], [])
class buf168_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf167', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf168', get_index_2, mul_1, None)
        return store


buf169: ExternKernelSchedulerNode(ExternKernelOut)
buf169.writes = [StarDep(name='buf169')]
buf169.unmet_dependencies = [StarDep(name='buf168')]
buf169.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf169.node.kernel = extern_kernels.addmm


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = 
    [   MemoryDep(name='buf170', index=c0, size=(512, 4096)),
        MemoryDep(name='buf170', index=c0, size=(512,))]
buf170.unmet_dependencies = 
    [   MemoryDep(name='buf164', index=c0, size=(2097152,)),
        MemoryDep(name='buf169', index=c0, size=(2097152,))]
buf170.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf170.group.device = cuda:0
buf170.group.iteration = (512, 4096)
buf170.sizes = ([512], [4096])
class buf170_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf170', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = [MemoryDep(name='buf171', index=c0, size=(512,))]
buf171.unmet_dependencies = [MemoryDep(name='buf170', index=c0, size=(512,))]
buf171.met_dependencies = []
buf171.group.device = cuda:0
buf171.group.iteration = (512, 1)
buf171.sizes = ([512], [])
class buf171_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf171', get_index_1, div, None)
        return store


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = 
    [   MemoryDep(name='buf172', index=c0, size=(512, 4096)),
        MemoryDep(name='buf172', index=c0, size=(512,))]
buf172.unmet_dependencies = 
    [   MemoryDep(name='buf164', index=c0, size=(2097152,)),
        MemoryDep(name='buf169', index=c0, size=(2097152,)),
        MemoryDep(name='buf171', index=c0, size=(512, 4096))]
buf172.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf172.group.device = cuda:0
buf172.group.iteration = (512, 4096)
buf172.sizes = ([512], [4096])
class buf172_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf172', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf173: SchedulerNode(ComputedBuffer)
buf173.writes = [MemoryDep(name='buf173', index=c0, size=(2097152,))]
buf173.unmet_dependencies = 
    [   MemoryDep(name='buf164', index=c0, size=(2097152,)),
        MemoryDep(name='buf169', index=c0, size=(2097152,)),
        MemoryDep(name='buf171', index=c0, size=(512, 4096)),
        MemoryDep(name='buf172', index=c0, size=(512, 4096))]
buf173.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf173.group.device = cuda:0
buf173.group.iteration = (2097152, 1)
buf173.sizes = ([512, 4096], [])
class buf173_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf172', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf173', get_index_6, mul_1, None)
        return store


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = [MemoryDep(name='buf174', index=c0, size=(2097152,))]
buf174.unmet_dependencies = [MemoryDep(name='buf173', index=c0, size=(2097152,))]
buf174.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf174.group.device = cuda:0
buf174.group.iteration = (2097152, 1)
buf174.sizes = ([512, 4096], [])
class buf174_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf174', get_index_3, add, None)
        return store


buf175: ExternKernelSchedulerNode(ExternKernelOut)
buf175.writes = [StarDep(name='buf175')]
buf175.unmet_dependencies = [StarDep(name='buf174')]
buf175.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf175.node.kernel = extern_kernels.addmm


buf176: ExternKernelSchedulerNode(ExternKernelOut)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf174')]
buf176.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf176.node.kernel = extern_kernels.addmm


buf177: ExternKernelSchedulerNode(ExternKernelOut)
buf177.writes = [StarDep(name='buf177')]
buf177.unmet_dependencies = [StarDep(name='buf174')]
buf177.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf177.node.kernel = extern_kernels.addmm


buf178: ExternKernelSchedulerNode(ExternKernelOut)
buf178.writes = [StarDep(name='buf178')]
buf178.unmet_dependencies = [StarDep(name='buf175'), StarDep(name='buf176')]
buf178.met_dependencies = []
buf178.node.kernel = extern_kernels.bmm


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = 
    [   MemoryDep(name='buf179', index=c0, size=(32768, 512)),
        MemoryDep(name='buf179', index=c0, size=(32768,))]
buf179.unmet_dependencies = [MemoryDep(name='buf178', index=c0, size=(16777216,))]
buf179.met_dependencies = []
buf179.group.device = cuda:0
buf179.group.iteration = (32768, 512)
buf179.sizes = ([32768], [512])
class buf179_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf179', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = 
    [   MemoryDep(name='buf180', index=c0, size=(32768, 512)),
        MemoryDep(name='buf180', index=c0, size=(32768,))]
buf180.unmet_dependencies = 
    [   MemoryDep(name='buf178', index=c0, size=(16777216,)),
        MemoryDep(name='buf179', index=c0, size=(32768, 512))]
buf180.met_dependencies = []
buf180.group.device = cuda:0
buf180.group.iteration = (32768, 512)
buf180.sizes = ([32768], [512])
class buf180_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf180', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = [MemoryDep(name='buf181', index=c0, size=(16777216,))]
buf181.unmet_dependencies = 
    [   MemoryDep(name='buf178', index=c0, size=(16777216,)),
        MemoryDep(name='buf179', index=c0, size=(32768, 512)),
        MemoryDep(name='buf180', index=c0, size=(32768, 512))]
buf181.met_dependencies = []
buf181.group.device = cuda:0
buf181.group.iteration = (16777216, 1)
buf181.sizes = ([32768, 512], [])
class buf181_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf180', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf181', get_index_3, div_1, None)
        return store


buf182: ExternKernelSchedulerNode(ExternKernelOut)
buf182.writes = [StarDep(name='buf182')]
buf182.unmet_dependencies = [StarDep(name='buf177'), StarDep(name='buf181')]
buf182.met_dependencies = []
buf182.node.kernel = extern_kernels.bmm


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = [MemoryDep(name='buf183', index=c0, size=(2097152,))]
buf183.unmet_dependencies = [   MemoryDep(name='buf182', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf183.met_dependencies = []
buf183.group.device = cuda:0
buf183.group.iteration = (2097152, 1)
buf183.sizes = ([512, 4096], [])
class buf183_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


buf184: ExternKernelSchedulerNode(ExternKernelOut)
buf184.writes = [StarDep(name='buf184')]
buf184.unmet_dependencies = [StarDep(name='buf183')]
buf184.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf184.node.kernel = extern_kernels.addmm


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = 
    [   MemoryDep(name='buf185', index=c0, size=(512, 4096)),
        MemoryDep(name='buf185', index=c0, size=(512,))]
buf185.unmet_dependencies = 
    [   MemoryDep(name='buf173', index=c0, size=(2097152,)),
        MemoryDep(name='buf184', index=c0, size=(2097152,))]
buf185.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf185.group.device = cuda:0
buf185.group.iteration = (512, 4096)
buf185.sizes = ([512], [4096])
class buf185_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf185', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = [MemoryDep(name='buf186', index=c0, size=(512,))]
buf186.unmet_dependencies = [MemoryDep(name='buf185', index=c0, size=(512,))]
buf186.met_dependencies = []
buf186.group.device = cuda:0
buf186.group.iteration = (512, 1)
buf186.sizes = ([512], [])
class buf186_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf186', get_index_1, div, None)
        return store


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = 
    [   MemoryDep(name='buf187', index=c0, size=(512, 4096)),
        MemoryDep(name='buf187', index=c0, size=(512,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf173', index=c0, size=(2097152,)),
        MemoryDep(name='buf184', index=c0, size=(2097152,)),
        MemoryDep(name='buf186', index=c0, size=(512, 4096))]
buf187.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf187.group.device = cuda:0
buf187.group.iteration = (512, 4096)
buf187.sizes = ([512], [4096])
class buf187_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf186', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf187', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf188: SchedulerNode(ComputedBuffer)
buf188.writes = [MemoryDep(name='buf188', index=c0, size=(2097152,))]
buf188.unmet_dependencies = 
    [   MemoryDep(name='buf173', index=c0, size=(2097152,)),
        MemoryDep(name='buf184', index=c0, size=(2097152,)),
        MemoryDep(name='buf186', index=c0, size=(512, 4096)),
        MemoryDep(name='buf187', index=c0, size=(512, 4096))]
buf188.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf188.group.device = cuda:0
buf188.group.iteration = (2097152, 1)
buf188.sizes = ([512, 4096], [])
class buf188_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf184', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf186', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf187', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf188', get_index_6, mul_1, None)
        return store


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = [MemoryDep(name='buf189', index=c0, size=(2097152,))]
buf189.unmet_dependencies = [MemoryDep(name='buf188', index=c0, size=(2097152,))]
buf189.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf189.group.device = cuda:0
buf189.group.iteration = (2097152, 1)
buf189.sizes = ([512, 4096], [])
class buf189_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf189', get_index_3, add, None)
        return store


buf190: ExternKernelSchedulerNode(ExternKernelOut)
buf190.writes = [StarDep(name='buf190')]
buf190.unmet_dependencies = [StarDep(name='buf189')]
buf190.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf190.node.kernel = extern_kernels.addmm


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(8388608,))]
buf191.unmet_dependencies = [MemoryDep(name='buf190', index=c0, size=(8388608,))]
buf191.met_dependencies = []
buf191.group.device = cuda:0
buf191.group.iteration = (8388608, 1)
buf191.sizes = ([8388608], [])
class buf191_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf191', get_index_2, tanh, None)
        return store


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = [MemoryDep(name='buf192', index=c0, size=(8388608,))]
buf192.unmet_dependencies = 
    [   MemoryDep(name='buf190', index=c0, size=(8388608,)),
        MemoryDep(name='buf191', index=c0, size=(8388608,))]
buf192.met_dependencies = []
buf192.group.device = cuda:0
buf192.group.iteration = (8388608, 1)
buf192.sizes = ([8388608], [])
class buf192_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf191', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf192', get_index_2, mul_1, None)
        return store


buf193: ExternKernelSchedulerNode(ExternKernelOut)
buf193.writes = [StarDep(name='buf193')]
buf193.unmet_dependencies = [StarDep(name='buf192')]
buf193.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf193.node.kernel = extern_kernels.addmm


buf194: SchedulerNode(ComputedBuffer)
buf194.writes = 
    [   MemoryDep(name='buf194', index=c0, size=(512, 4096)),
        MemoryDep(name='buf194', index=c0, size=(512,))]
buf194.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(2097152,)),
        MemoryDep(name='buf193', index=c0, size=(2097152,))]
buf194.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf194.group.device = cuda:0
buf194.group.iteration = (512, 4096)
buf194.sizes = ([512], [4096])
class buf194_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf194', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = [MemoryDep(name='buf195', index=c0, size=(512,))]
buf195.unmet_dependencies = [MemoryDep(name='buf194', index=c0, size=(512,))]
buf195.met_dependencies = []
buf195.group.device = cuda:0
buf195.group.iteration = (512, 1)
buf195.sizes = ([512], [])
class buf195_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf195', get_index_1, div, None)
        return store


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = 
    [   MemoryDep(name='buf196', index=c0, size=(512, 4096)),
        MemoryDep(name='buf196', index=c0, size=(512,))]
buf196.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(2097152,)),
        MemoryDep(name='buf193', index=c0, size=(2097152,)),
        MemoryDep(name='buf195', index=c0, size=(512, 4096))]
buf196.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf196.group.device = cuda:0
buf196.group.iteration = (512, 4096)
buf196.sizes = ([512], [4096])
class buf196_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf196', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = [MemoryDep(name='buf197', index=c0, size=(2097152,))]
buf197.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(2097152,)),
        MemoryDep(name='buf193', index=c0, size=(2097152,)),
        MemoryDep(name='buf195', index=c0, size=(512, 4096)),
        MemoryDep(name='buf196', index=c0, size=(512, 4096))]
buf197.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf197.group.device = cuda:0
buf197.group.iteration = (2097152, 1)
buf197.sizes = ([512, 4096], [])
class buf197_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf188', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf196', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf197', get_index_6, mul_1, None)
        return store


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = [MemoryDep(name='buf198', index=c0, size=(2097152,))]
buf198.unmet_dependencies = [MemoryDep(name='buf197', index=c0, size=(2097152,))]
buf198.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf198.group.device = cuda:0
buf198.group.iteration = (2097152, 1)
buf198.sizes = ([512, 4096], [])
class buf198_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf198', get_index_3, add, None)
        return store


buf199: ExternKernelSchedulerNode(ExternKernelOut)
buf199.writes = [StarDep(name='buf199')]
buf199.unmet_dependencies = [StarDep(name='buf198')]
buf199.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf199.node.kernel = extern_kernels.addmm


buf200: ExternKernelSchedulerNode(ExternKernelOut)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf198')]
buf200.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf200.node.kernel = extern_kernels.addmm


buf201: ExternKernelSchedulerNode(ExternKernelOut)
buf201.writes = [StarDep(name='buf201')]
buf201.unmet_dependencies = [StarDep(name='buf198')]
buf201.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf201.node.kernel = extern_kernels.addmm


buf202: ExternKernelSchedulerNode(ExternKernelOut)
buf202.writes = [StarDep(name='buf202')]
buf202.unmet_dependencies = [StarDep(name='buf199'), StarDep(name='buf200')]
buf202.met_dependencies = []
buf202.node.kernel = extern_kernels.bmm


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(32768, 512)),
        MemoryDep(name='buf203', index=c0, size=(32768,))]
buf203.unmet_dependencies = [MemoryDep(name='buf202', index=c0, size=(16777216,))]
buf203.met_dependencies = []
buf203.group.device = cuda:0
buf203.group.iteration = (32768, 512)
buf203.sizes = ([32768], [512])
class buf203_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf203', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = 
    [   MemoryDep(name='buf204', index=c0, size=(32768, 512)),
        MemoryDep(name='buf204', index=c0, size=(32768,))]
buf204.unmet_dependencies = 
    [   MemoryDep(name='buf202', index=c0, size=(16777216,)),
        MemoryDep(name='buf203', index=c0, size=(32768, 512))]
buf204.met_dependencies = []
buf204.group.device = cuda:0
buf204.group.iteration = (32768, 512)
buf204.sizes = ([32768], [512])
class buf204_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf204', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(16777216,))]
buf205.unmet_dependencies = 
    [   MemoryDep(name='buf202', index=c0, size=(16777216,)),
        MemoryDep(name='buf203', index=c0, size=(32768, 512)),
        MemoryDep(name='buf204', index=c0, size=(32768, 512))]
buf205.met_dependencies = []
buf205.group.device = cuda:0
buf205.group.iteration = (16777216, 1)
buf205.sizes = ([32768, 512], [])
class buf205_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf205', get_index_3, div_1, None)
        return store


buf206: ExternKernelSchedulerNode(ExternKernelOut)
buf206.writes = [StarDep(name='buf206')]
buf206.unmet_dependencies = [StarDep(name='buf201'), StarDep(name='buf205')]
buf206.met_dependencies = []
buf206.node.kernel = extern_kernels.bmm


buf207: SchedulerNode(ComputedBuffer)
buf207.writes = [MemoryDep(name='buf207', index=c0, size=(2097152,))]
buf207.unmet_dependencies = [   MemoryDep(name='buf206', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf207.met_dependencies = []
buf207.group.device = cuda:0
buf207.group.iteration = (2097152, 1)
buf207.sizes = ([512, 4096], [])
class buf207_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store


buf208: ExternKernelSchedulerNode(ExternKernelOut)
buf208.writes = [StarDep(name='buf208')]
buf208.unmet_dependencies = [StarDep(name='buf207')]
buf208.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf208.node.kernel = extern_kernels.addmm


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = 
    [   MemoryDep(name='buf209', index=c0, size=(512, 4096)),
        MemoryDep(name='buf209', index=c0, size=(512,))]
buf209.unmet_dependencies = 
    [   MemoryDep(name='buf197', index=c0, size=(2097152,)),
        MemoryDep(name='buf208', index=c0, size=(2097152,))]
buf209.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf209.group.device = cuda:0
buf209.group.iteration = (512, 4096)
buf209.sizes = ([512], [4096])
class buf209_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf208', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf209', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = [MemoryDep(name='buf210', index=c0, size=(512,))]
buf210.unmet_dependencies = [MemoryDep(name='buf209', index=c0, size=(512,))]
buf210.met_dependencies = []
buf210.group.device = cuda:0
buf210.group.iteration = (512, 1)
buf210.sizes = ([512], [])
class buf210_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf210', get_index_1, div, None)
        return store


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = 
    [   MemoryDep(name='buf211', index=c0, size=(512, 4096)),
        MemoryDep(name='buf211', index=c0, size=(512,))]
buf211.unmet_dependencies = 
    [   MemoryDep(name='buf197', index=c0, size=(2097152,)),
        MemoryDep(name='buf208', index=c0, size=(2097152,)),
        MemoryDep(name='buf210', index=c0, size=(512, 4096))]
buf211.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf211.group.device = cuda:0
buf211.group.iteration = (512, 4096)
buf211.sizes = ([512], [4096])
class buf211_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf208', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf210', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf211', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(2097152,))]
buf212.unmet_dependencies = 
    [   MemoryDep(name='buf197', index=c0, size=(2097152,)),
        MemoryDep(name='buf208', index=c0, size=(2097152,)),
        MemoryDep(name='buf210', index=c0, size=(512, 4096)),
        MemoryDep(name='buf211', index=c0, size=(512, 4096))]
buf212.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf212.group.device = cuda:0
buf212.group.iteration = (2097152, 1)
buf212.sizes = ([512, 4096], [])
class buf212_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf208', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf210', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf211', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf212', get_index_6, mul_1, None)
        return store


buf213: SchedulerNode(ComputedBuffer)
buf213.writes = [MemoryDep(name='buf213', index=c0, size=(2097152,))]
buf213.unmet_dependencies = [MemoryDep(name='buf212', index=c0, size=(2097152,))]
buf213.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf213.group.device = cuda:0
buf213.group.iteration = (2097152, 1)
buf213.sizes = ([512, 4096], [])
class buf213_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf213', get_index_3, add, None)
        return store


buf214: ExternKernelSchedulerNode(ExternKernelOut)
buf214.writes = [StarDep(name='buf214')]
buf214.unmet_dependencies = [StarDep(name='buf213')]
buf214.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf214.node.kernel = extern_kernels.addmm


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = [MemoryDep(name='buf215', index=c0, size=(8388608,))]
buf215.unmet_dependencies = [MemoryDep(name='buf214', index=c0, size=(8388608,))]
buf215.met_dependencies = []
buf215.group.device = cuda:0
buf215.group.iteration = (8388608, 1)
buf215.sizes = ([8388608], [])
class buf215_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, tanh, None)
        return store


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = [MemoryDep(name='buf216', index=c0, size=(8388608,))]
buf216.unmet_dependencies = 
    [   MemoryDep(name='buf214', index=c0, size=(8388608,)),
        MemoryDep(name='buf215', index=c0, size=(8388608,))]
buf216.met_dependencies = []
buf216.group.device = cuda:0
buf216.group.iteration = (8388608, 1)
buf216.sizes = ([8388608], [])
class buf216_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf216', get_index_2, mul_1, None)
        return store


buf217: ExternKernelSchedulerNode(ExternKernelOut)
buf217.writes = [StarDep(name='buf217')]
buf217.unmet_dependencies = [StarDep(name='buf216')]
buf217.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf217.node.kernel = extern_kernels.addmm


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = 
    [   MemoryDep(name='buf218', index=c0, size=(512, 4096)),
        MemoryDep(name='buf218', index=c0, size=(512,))]
buf218.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=c0, size=(2097152,)),
        MemoryDep(name='buf217', index=c0, size=(2097152,))]
buf218.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf218.group.device = cuda:0
buf218.group.iteration = (512, 4096)
buf218.sizes = ([512], [4096])
class buf218_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf218', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = [MemoryDep(name='buf219', index=c0, size=(512,))]
buf219.unmet_dependencies = [MemoryDep(name='buf218', index=c0, size=(512,))]
buf219.met_dependencies = []
buf219.group.device = cuda:0
buf219.group.iteration = (512, 1)
buf219.sizes = ([512], [])
class buf219_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf219', get_index_1, div, None)
        return store


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = 
    [   MemoryDep(name='buf220', index=c0, size=(512, 4096)),
        MemoryDep(name='buf220', index=c0, size=(512,))]
buf220.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=c0, size=(2097152,)),
        MemoryDep(name='buf217', index=c0, size=(2097152,)),
        MemoryDep(name='buf219', index=c0, size=(512, 4096))]
buf220.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf220.group.device = cuda:0
buf220.group.iteration = (512, 4096)
buf220.sizes = ([512], [4096])
class buf220_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf219', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf220', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep(name='buf221', index=c0, size=(2097152,))]
buf221.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=c0, size=(2097152,)),
        MemoryDep(name='buf217', index=c0, size=(2097152,)),
        MemoryDep(name='buf219', index=c0, size=(512, 4096)),
        MemoryDep(name='buf220', index=c0, size=(512, 4096))]
buf221.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf221.group.device = cuda:0
buf221.group.iteration = (2097152, 1)
buf221.sizes = ([512, 4096], [])
class buf221_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf219', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf220', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf221', get_index_6, mul_1, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = [MemoryDep(name='buf222', index=c0, size=(2097152,))]
buf222.unmet_dependencies = [MemoryDep(name='buf221', index=c0, size=(2097152,))]
buf222.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf222.group.device = cuda:0
buf222.group.iteration = (2097152, 1)
buf222.sizes = ([512, 4096], [])
class buf222_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf222', get_index_3, add, None)
        return store


buf223: ExternKernelSchedulerNode(ExternKernelOut)
buf223.writes = [StarDep(name='buf223')]
buf223.unmet_dependencies = [StarDep(name='buf222')]
buf223.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf223.node.kernel = extern_kernels.addmm


buf224: ExternKernelSchedulerNode(ExternKernelOut)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf222')]
buf224.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf224.node.kernel = extern_kernels.addmm


buf225: ExternKernelSchedulerNode(ExternKernelOut)
buf225.writes = [StarDep(name='buf225')]
buf225.unmet_dependencies = [StarDep(name='buf222')]
buf225.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf225.node.kernel = extern_kernels.addmm


buf226: ExternKernelSchedulerNode(ExternKernelOut)
buf226.writes = [StarDep(name='buf226')]
buf226.unmet_dependencies = [StarDep(name='buf223'), StarDep(name='buf224')]
buf226.met_dependencies = []
buf226.node.kernel = extern_kernels.bmm


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = 
    [   MemoryDep(name='buf227', index=c0, size=(32768, 512)),
        MemoryDep(name='buf227', index=c0, size=(32768,))]
buf227.unmet_dependencies = [MemoryDep(name='buf226', index=c0, size=(16777216,))]
buf227.met_dependencies = []
buf227.group.device = cuda:0
buf227.group.iteration = (32768, 512)
buf227.sizes = ([32768], [512])
class buf227_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf227', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf228: SchedulerNode(ComputedBuffer)
buf228.writes = 
    [   MemoryDep(name='buf228', index=c0, size=(32768, 512)),
        MemoryDep(name='buf228', index=c0, size=(32768,))]
buf228.unmet_dependencies = 
    [   MemoryDep(name='buf226', index=c0, size=(16777216,)),
        MemoryDep(name='buf227', index=c0, size=(32768, 512))]
buf228.met_dependencies = []
buf228.group.device = cuda:0
buf228.group.iteration = (32768, 512)
buf228.sizes = ([32768], [512])
class buf228_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf228', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = [MemoryDep(name='buf229', index=c0, size=(16777216,))]
buf229.unmet_dependencies = 
    [   MemoryDep(name='buf226', index=c0, size=(16777216,)),
        MemoryDep(name='buf227', index=c0, size=(32768, 512)),
        MemoryDep(name='buf228', index=c0, size=(32768, 512))]
buf229.met_dependencies = []
buf229.group.device = cuda:0
buf229.group.iteration = (16777216, 1)
buf229.sizes = ([32768, 512], [])
class buf229_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf228', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf229', get_index_3, div_1, None)
        return store


buf230: ExternKernelSchedulerNode(ExternKernelOut)
buf230.writes = [StarDep(name='buf230')]
buf230.unmet_dependencies = [StarDep(name='buf225'), StarDep(name='buf229')]
buf230.met_dependencies = []
buf230.node.kernel = extern_kernels.bmm


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = [MemoryDep(name='buf231', index=c0, size=(2097152,))]
buf231.unmet_dependencies = [   MemoryDep(name='buf230', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf231.met_dependencies = []
buf231.group.device = cuda:0
buf231.group.iteration = (2097152, 1)
buf231.sizes = ([512, 4096], [])
class buf231_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf231', get_index_1, load, None)
        return store


buf232: ExternKernelSchedulerNode(ExternKernelOut)
buf232.writes = [StarDep(name='buf232')]
buf232.unmet_dependencies = [StarDep(name='buf231')]
buf232.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf232.node.kernel = extern_kernels.addmm


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = 
    [   MemoryDep(name='buf233', index=c0, size=(512, 4096)),
        MemoryDep(name='buf233', index=c0, size=(512,))]
buf233.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(2097152,)),
        MemoryDep(name='buf232', index=c0, size=(2097152,))]
buf233.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf233.group.device = cuda:0
buf233.group.iteration = (512, 4096)
buf233.sizes = ([512], [4096])
class buf233_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf232', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf233', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = [MemoryDep(name='buf234', index=c0, size=(512,))]
buf234.unmet_dependencies = [MemoryDep(name='buf233', index=c0, size=(512,))]
buf234.met_dependencies = []
buf234.group.device = cuda:0
buf234.group.iteration = (512, 1)
buf234.sizes = ([512], [])
class buf234_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf234', get_index_1, div, None)
        return store


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = 
    [   MemoryDep(name='buf235', index=c0, size=(512, 4096)),
        MemoryDep(name='buf235', index=c0, size=(512,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(2097152,)),
        MemoryDep(name='buf232', index=c0, size=(2097152,)),
        MemoryDep(name='buf234', index=c0, size=(512, 4096))]
buf235.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf235.group.device = cuda:0
buf235.group.iteration = (512, 4096)
buf235.sizes = ([512], [4096])
class buf235_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf232', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf235', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = [MemoryDep(name='buf236', index=c0, size=(2097152,))]
buf236.unmet_dependencies = 
    [   MemoryDep(name='buf221', index=c0, size=(2097152,)),
        MemoryDep(name='buf232', index=c0, size=(2097152,)),
        MemoryDep(name='buf234', index=c0, size=(512, 4096)),
        MemoryDep(name='buf235', index=c0, size=(512, 4096))]
buf236.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf236.group.device = cuda:0
buf236.group.iteration = (2097152, 1)
buf236.sizes = ([512, 4096], [])
class buf236_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf232', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf235', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf236', get_index_6, mul_1, None)
        return store


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = [MemoryDep(name='buf237', index=c0, size=(2097152,))]
buf237.unmet_dependencies = [MemoryDep(name='buf236', index=c0, size=(2097152,))]
buf237.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf237.group.device = cuda:0
buf237.group.iteration = (2097152, 1)
buf237.sizes = ([512, 4096], [])
class buf237_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf237', get_index_3, add, None)
        return store


buf238: ExternKernelSchedulerNode(ExternKernelOut)
buf238.writes = [StarDep(name='buf238')]
buf238.unmet_dependencies = [StarDep(name='buf237')]
buf238.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf238.node.kernel = extern_kernels.addmm


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(8388608,))]
buf239.unmet_dependencies = [MemoryDep(name='buf238', index=c0, size=(8388608,))]
buf239.met_dependencies = []
buf239.group.device = cuda:0
buf239.group.iteration = (8388608, 1)
buf239.sizes = ([8388608], [])
class buf239_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, tanh, None)
        return store


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = [MemoryDep(name='buf240', index=c0, size=(8388608,))]
buf240.unmet_dependencies = 
    [   MemoryDep(name='buf238', index=c0, size=(8388608,)),
        MemoryDep(name='buf239', index=c0, size=(8388608,))]
buf240.met_dependencies = []
buf240.group.device = cuda:0
buf240.group.iteration = (8388608, 1)
buf240.sizes = ([8388608], [])
class buf240_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf240', get_index_2, mul_1, None)
        return store


buf241: ExternKernelSchedulerNode(ExternKernelOut)
buf241.writes = [StarDep(name='buf241')]
buf241.unmet_dependencies = [StarDep(name='buf240')]
buf241.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf241.node.kernel = extern_kernels.addmm


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = 
    [   MemoryDep(name='buf242', index=c0, size=(512, 4096)),
        MemoryDep(name='buf242', index=c0, size=(512,))]
buf242.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=c0, size=(2097152,)),
        MemoryDep(name='buf241', index=c0, size=(2097152,))]
buf242.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf242.group.device = cuda:0
buf242.group.iteration = (512, 4096)
buf242.sizes = ([512], [4096])
class buf242_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf236', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf242', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = [MemoryDep(name='buf243', index=c0, size=(512,))]
buf243.unmet_dependencies = [MemoryDep(name='buf242', index=c0, size=(512,))]
buf243.met_dependencies = []
buf243.group.device = cuda:0
buf243.group.iteration = (512, 1)
buf243.sizes = ([512], [])
class buf243_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf243', get_index_1, div, None)
        return store


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = 
    [   MemoryDep(name='buf244', index=c0, size=(512, 4096)),
        MemoryDep(name='buf244', index=c0, size=(512,))]
buf244.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=c0, size=(2097152,)),
        MemoryDep(name='buf241', index=c0, size=(2097152,)),
        MemoryDep(name='buf243', index=c0, size=(512, 4096))]
buf244.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf244.group.device = cuda:0
buf244.group.iteration = (512, 4096)
buf244.sizes = ([512], [4096])
class buf244_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf236', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf243', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf244', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep(name='buf245', index=c0, size=(2097152,))]
buf245.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=c0, size=(2097152,)),
        MemoryDep(name='buf241', index=c0, size=(2097152,)),
        MemoryDep(name='buf243', index=c0, size=(512, 4096)),
        MemoryDep(name='buf244', index=c0, size=(512, 4096))]
buf245.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf245.group.device = cuda:0
buf245.group.iteration = (2097152, 1)
buf245.sizes = ([512, 4096], [])
class buf245_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf236', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf243', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf244', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf245', get_index_6, mul_1, None)
        return store


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = [MemoryDep(name='buf246', index=c0, size=(2097152,))]
buf246.unmet_dependencies = [MemoryDep(name='buf245', index=c0, size=(2097152,))]
buf246.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf246.group.device = cuda:0
buf246.group.iteration = (2097152, 1)
buf246.sizes = ([512, 4096], [])
class buf246_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf246', get_index_3, add, None)
        return store


buf247: ExternKernelSchedulerNode(ExternKernelOut)
buf247.writes = [StarDep(name='buf247')]
buf247.unmet_dependencies = [StarDep(name='buf246')]
buf247.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf247.node.kernel = extern_kernels.addmm


buf248: ExternKernelSchedulerNode(ExternKernelOut)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf246')]
buf248.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf248.node.kernel = extern_kernels.addmm


buf249: ExternKernelSchedulerNode(ExternKernelOut)
buf249.writes = [StarDep(name='buf249')]
buf249.unmet_dependencies = [StarDep(name='buf246')]
buf249.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf249.node.kernel = extern_kernels.addmm


buf250: ExternKernelSchedulerNode(ExternKernelOut)
buf250.writes = [StarDep(name='buf250')]
buf250.unmet_dependencies = [StarDep(name='buf247'), StarDep(name='buf248')]
buf250.met_dependencies = []
buf250.node.kernel = extern_kernels.bmm


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(32768, 512)),
        MemoryDep(name='buf251', index=c0, size=(32768,))]
buf251.unmet_dependencies = [MemoryDep(name='buf250', index=c0, size=(16777216,))]
buf251.met_dependencies = []
buf251.group.device = cuda:0
buf251.group.iteration = (32768, 512)
buf251.sizes = ([32768], [512])
class buf251_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = 
    [   MemoryDep(name='buf252', index=c0, size=(32768, 512)),
        MemoryDep(name='buf252', index=c0, size=(32768,))]
buf252.unmet_dependencies = 
    [   MemoryDep(name='buf250', index=c0, size=(16777216,)),
        MemoryDep(name='buf251', index=c0, size=(32768, 512))]
buf252.met_dependencies = []
buf252.group.device = cuda:0
buf252.group.iteration = (32768, 512)
buf252.sizes = ([32768], [512])
class buf252_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf252', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = [MemoryDep(name='buf253', index=c0, size=(16777216,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf250', index=c0, size=(16777216,)),
        MemoryDep(name='buf251', index=c0, size=(32768, 512)),
        MemoryDep(name='buf252', index=c0, size=(32768, 512))]
buf253.met_dependencies = []
buf253.group.device = cuda:0
buf253.group.iteration = (16777216, 1)
buf253.sizes = ([32768, 512], [])
class buf253_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf252', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf253', get_index_3, div_1, None)
        return store


buf254: ExternKernelSchedulerNode(ExternKernelOut)
buf254.writes = [StarDep(name='buf254')]
buf254.unmet_dependencies = [StarDep(name='buf249'), StarDep(name='buf253')]
buf254.met_dependencies = []
buf254.node.kernel = extern_kernels.bmm


buf255: SchedulerNode(ComputedBuffer)
buf255.writes = [MemoryDep(name='buf255', index=c0, size=(2097152,))]
buf255.unmet_dependencies = [   MemoryDep(name='buf254', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf255.met_dependencies = []
buf255.group.device = cuda:0
buf255.group.iteration = (2097152, 1)
buf255.sizes = ([512, 4096], [])
class buf255_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf255', get_index_1, load, None)
        return store


buf256: ExternKernelSchedulerNode(ExternKernelOut)
buf256.writes = [StarDep(name='buf256')]
buf256.unmet_dependencies = [StarDep(name='buf255')]
buf256.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf256.node.kernel = extern_kernels.addmm


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = 
    [   MemoryDep(name='buf257', index=c0, size=(512, 4096)),
        MemoryDep(name='buf257', index=c0, size=(512,))]
buf257.unmet_dependencies = 
    [   MemoryDep(name='buf245', index=c0, size=(2097152,)),
        MemoryDep(name='buf256', index=c0, size=(2097152,))]
buf257.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf257.group.device = cuda:0
buf257.group.iteration = (512, 4096)
buf257.sizes = ([512], [4096])
class buf257_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf257', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = [MemoryDep(name='buf258', index=c0, size=(512,))]
buf258.unmet_dependencies = [MemoryDep(name='buf257', index=c0, size=(512,))]
buf258.met_dependencies = []
buf258.group.device = cuda:0
buf258.group.iteration = (512, 1)
buf258.sizes = ([512], [])
class buf258_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf258', get_index_1, div, None)
        return store


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = 
    [   MemoryDep(name='buf259', index=c0, size=(512, 4096)),
        MemoryDep(name='buf259', index=c0, size=(512,))]
buf259.unmet_dependencies = 
    [   MemoryDep(name='buf245', index=c0, size=(2097152,)),
        MemoryDep(name='buf256', index=c0, size=(2097152,)),
        MemoryDep(name='buf258', index=c0, size=(512, 4096))]
buf259.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf259.group.device = cuda:0
buf259.group.iteration = (512, 4096)
buf259.sizes = ([512], [4096])
class buf259_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf258', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf259', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = [MemoryDep(name='buf260', index=c0, size=(2097152,))]
buf260.unmet_dependencies = 
    [   MemoryDep(name='buf245', index=c0, size=(2097152,)),
        MemoryDep(name='buf256', index=c0, size=(2097152,)),
        MemoryDep(name='buf258', index=c0, size=(512, 4096)),
        MemoryDep(name='buf259', index=c0, size=(512, 4096))]
buf260.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf260.group.device = cuda:0
buf260.group.iteration = (2097152, 1)
buf260.sizes = ([512, 4096], [])
class buf260_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf258', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf259', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf260', get_index_6, mul_1, None)
        return store


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = [MemoryDep(name='buf261', index=c0, size=(2097152,))]
buf261.unmet_dependencies = [MemoryDep(name='buf260', index=c0, size=(2097152,))]
buf261.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf261.group.device = cuda:0
buf261.group.iteration = (2097152, 1)
buf261.sizes = ([512, 4096], [])
class buf261_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf261', get_index_3, add, None)
        return store


buf262: ExternKernelSchedulerNode(ExternKernelOut)
buf262.writes = [StarDep(name='buf262')]
buf262.unmet_dependencies = [StarDep(name='buf261')]
buf262.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf262.node.kernel = extern_kernels.addmm


buf263: SchedulerNode(ComputedBuffer)
buf263.writes = [MemoryDep(name='buf263', index=c0, size=(8388608,))]
buf263.unmet_dependencies = [MemoryDep(name='buf262', index=c0, size=(8388608,))]
buf263.met_dependencies = []
buf263.group.device = cuda:0
buf263.group.iteration = (8388608, 1)
buf263.sizes = ([8388608], [])
class buf263_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, tanh, None)
        return store


buf264: SchedulerNode(ComputedBuffer)
buf264.writes = [MemoryDep(name='buf264', index=c0, size=(8388608,))]
buf264.unmet_dependencies = 
    [   MemoryDep(name='buf262', index=c0, size=(8388608,)),
        MemoryDep(name='buf263', index=c0, size=(8388608,))]
buf264.met_dependencies = []
buf264.group.device = cuda:0
buf264.group.iteration = (8388608, 1)
buf264.sizes = ([8388608], [])
class buf264_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf264', get_index_2, mul_1, None)
        return store


buf265: ExternKernelSchedulerNode(ExternKernelOut)
buf265.writes = [StarDep(name='buf265')]
buf265.unmet_dependencies = [StarDep(name='buf264')]
buf265.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf265.node.kernel = extern_kernels.addmm


buf266: SchedulerNode(ComputedBuffer)
buf266.writes = 
    [   MemoryDep(name='buf266', index=c0, size=(512, 4096)),
        MemoryDep(name='buf266', index=c0, size=(512,))]
buf266.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=c0, size=(2097152,)),
        MemoryDep(name='buf265', index=c0, size=(2097152,))]
buf266.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf266.group.device = cuda:0
buf266.group.iteration = (512, 4096)
buf266.sizes = ([512], [4096])
class buf266_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf260', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf266', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = [MemoryDep(name='buf267', index=c0, size=(512,))]
buf267.unmet_dependencies = [MemoryDep(name='buf266', index=c0, size=(512,))]
buf267.met_dependencies = []
buf267.group.device = cuda:0
buf267.group.iteration = (512, 1)
buf267.sizes = ([512], [])
class buf267_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf267', get_index_1, div, None)
        return store


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = 
    [   MemoryDep(name='buf268', index=c0, size=(512, 4096)),
        MemoryDep(name='buf268', index=c0, size=(512,))]
buf268.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=c0, size=(2097152,)),
        MemoryDep(name='buf265', index=c0, size=(2097152,)),
        MemoryDep(name='buf267', index=c0, size=(512, 4096))]
buf268.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf268.group.device = cuda:0
buf268.group.iteration = (512, 4096)
buf268.sizes = ([512], [4096])
class buf268_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf260', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf267', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf268', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = [MemoryDep(name='buf269', index=c0, size=(2097152,))]
buf269.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=c0, size=(2097152,)),
        MemoryDep(name='buf265', index=c0, size=(2097152,)),
        MemoryDep(name='buf267', index=c0, size=(512, 4096)),
        MemoryDep(name='buf268', index=c0, size=(512, 4096))]
buf269.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf269.group.device = cuda:0
buf269.group.iteration = (2097152, 1)
buf269.sizes = ([512, 4096], [])
class buf269_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf260', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf267', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf268', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf269', get_index_6, mul_1, None)
        return store


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = [MemoryDep(name='buf270', index=c0, size=(2097152,))]
buf270.unmet_dependencies = [MemoryDep(name='buf269', index=c0, size=(2097152,))]
buf270.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf270.group.device = cuda:0
buf270.group.iteration = (2097152, 1)
buf270.sizes = ([512, 4096], [])
class buf270_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf270', get_index_3, add, None)
        return store


buf271: ExternKernelSchedulerNode(ExternKernelOut)
buf271.writes = [StarDep(name='buf271')]
buf271.unmet_dependencies = [StarDep(name='buf270')]
buf271.met_dependencies = [StarDep(name='primals_8'), StarDep(name='primals_9')]
buf271.node.kernel = extern_kernels.addmm


buf272: ExternKernelSchedulerNode(ExternKernelOut)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf270')]
buf272.met_dependencies = [StarDep(name='primals_10'), StarDep(name='primals_11')]
buf272.node.kernel = extern_kernels.addmm


buf273: ExternKernelSchedulerNode(ExternKernelOut)
buf273.writes = [StarDep(name='buf273')]
buf273.unmet_dependencies = [StarDep(name='buf270')]
buf273.met_dependencies = [StarDep(name='primals_12'), StarDep(name='primals_13')]
buf273.node.kernel = extern_kernels.addmm


buf274: ExternKernelSchedulerNode(ExternKernelOut)
buf274.writes = [StarDep(name='buf274')]
buf274.unmet_dependencies = [StarDep(name='buf271'), StarDep(name='buf272')]
buf274.met_dependencies = []
buf274.node.kernel = extern_kernels.bmm


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(32768, 512)),
        MemoryDep(name='buf275', index=c0, size=(32768,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=c0, size=(16777216,))]
buf275.met_dependencies = []
buf275.group.device = cuda:0
buf275.group.iteration = (32768, 512)
buf275.sizes = ([32768], [512])
class buf275_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf275', torch.float32, torch.float32, 'max', get_index_1, add)
        return reduction


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = 
    [   MemoryDep(name='buf276', index=c0, size=(32768, 512)),
        MemoryDep(name='buf276', index=c0, size=(32768,))]
buf276.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(16777216,)),
        MemoryDep(name='buf275', index=c0, size=(32768, 512))]
buf276.met_dependencies = []
buf276.group.device = cuda:0
buf276.group.iteration = (32768, 512)
buf276.sizes = ([32768], [512])
class buf276_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf276', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = [MemoryDep(name='buf277', index=c0, size=(16777216,))]
buf277.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(16777216,)),
        MemoryDep(name='buf275', index=c0, size=(32768, 512)),
        MemoryDep(name='buf276', index=c0, size=(32768, 512))]
buf277.met_dependencies = []
buf277.group.device = cuda:0
buf277.group.iteration = (16777216, 1)
buf277.sizes = ([32768, 512], [])
class buf277_loop_body:
    var_ranges = {z0: 32768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(8.0, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(1, torch.float32)
        sub = ops.sub(constant_1, constant_2)
        constant_3 = ops.constant(-10000.0, torch.float32)
        mul = ops.mul(sub, constant_3)
        add = ops.add(div, mul)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub_1 = ops.sub(add, load_1)
        exp = ops.exp(sub_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        div_1 = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf277', get_index_3, div_1, None)
        return store


buf278: ExternKernelSchedulerNode(ExternKernelOut)
buf278.writes = [StarDep(name='buf278')]
buf278.unmet_dependencies = [StarDep(name='buf273'), StarDep(name='buf277')]
buf278.met_dependencies = []
buf278.node.kernel = extern_kernels.bmm


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = [MemoryDep(name='buf279', index=c0, size=(2097152,))]
buf279.unmet_dependencies = [   MemoryDep(name='buf278', index=64*c0 + 32768*(c1//64) + ModularIndexing(c1, 1, 64), size=(512, 4096))]
buf279.met_dependencies = []
buf279.group.device = cuda:0
buf279.group.iteration = (2097152, 1)
buf279.sizes = ([512, 4096], [])
class buf279_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 64*z0 + 32768*(z1//64) + ModularIndexing(z1, 1, 64)
    index1 = 4096*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store


buf280: ExternKernelSchedulerNode(ExternKernelOut)
buf280.writes = [StarDep(name='buf280')]
buf280.unmet_dependencies = [StarDep(name='buf279')]
buf280.met_dependencies = [StarDep(name='primals_14'), StarDep(name='primals_15')]
buf280.node.kernel = extern_kernels.addmm


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = 
    [   MemoryDep(name='buf281', index=c0, size=(512, 4096)),
        MemoryDep(name='buf281', index=c0, size=(512,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf269', index=c0, size=(2097152,)),
        MemoryDep(name='buf280', index=c0, size=(2097152,))]
buf281.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf281.group.device = cuda:0
buf281.group.iteration = (512, 4096)
buf281.sizes = ([512], [4096])
class buf281_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf280', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf281', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = [MemoryDep(name='buf282', index=c0, size=(512,))]
buf282.unmet_dependencies = [MemoryDep(name='buf281', index=c0, size=(512,))]
buf282.met_dependencies = []
buf282.group.device = cuda:0
buf282.group.iteration = (512, 1)
buf282.sizes = ([512], [])
class buf282_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf282', get_index_1, div, None)
        return store


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = 
    [   MemoryDep(name='buf283', index=c0, size=(512, 4096)),
        MemoryDep(name='buf283', index=c0, size=(512,))]
buf283.unmet_dependencies = 
    [   MemoryDep(name='buf269', index=c0, size=(2097152,)),
        MemoryDep(name='buf280', index=c0, size=(2097152,)),
        MemoryDep(name='buf282', index=c0, size=(512, 4096))]
buf283.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf283.group.device = cuda:0
buf283.group.iteration = (512, 4096)
buf283.sizes = ([512], [4096])
class buf283_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf280', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf282', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf283', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf284: SchedulerNode(ComputedBuffer)
buf284.writes = [MemoryDep(name='buf284', index=c0, size=(2097152,))]
buf284.unmet_dependencies = 
    [   MemoryDep(name='buf269', index=c0, size=(2097152,)),
        MemoryDep(name='buf280', index=c0, size=(2097152,)),
        MemoryDep(name='buf282', index=c0, size=(512, 4096)),
        MemoryDep(name='buf283', index=c0, size=(512, 4096))]
buf284.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf284.group.device = cuda:0
buf284.group.iteration = (2097152, 1)
buf284.sizes = ([512, 4096], [])
class buf284_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf280', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf282', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf283', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf284', get_index_6, mul_1, None)
        return store


buf285: SchedulerNode(ComputedBuffer)
buf285.writes = [MemoryDep(name='buf285', index=c0, size=(2097152,))]
buf285.unmet_dependencies = [MemoryDep(name='buf284', index=c0, size=(2097152,))]
buf285.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf285.group.device = cuda:0
buf285.group.iteration = (2097152, 1)
buf285.sizes = ([512, 4096], [])
class buf285_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_17', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf285', get_index_3, add, None)
        return store


buf286: ExternKernelSchedulerNode(ExternKernelOut)
buf286.writes = [StarDep(name='buf286')]
buf286.unmet_dependencies = [StarDep(name='buf285')]
buf286.met_dependencies = [StarDep(name='primals_18'), StarDep(name='primals_19')]
buf286.node.kernel = extern_kernels.addmm


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = [MemoryDep(name='buf287', index=c0, size=(8388608,))]
buf287.unmet_dependencies = [MemoryDep(name='buf286', index=c0, size=(8388608,))]
buf287.met_dependencies = []
buf287.group.device = cuda:0
buf287.group.iteration = (8388608, 1)
buf287.sizes = ([8388608], [])
class buf287_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        mul = ops.mul(load_1, load_1)
        mul_1 = ops.mul(mul, load_1)
        constant = ops.constant(0.044715, torch.float32)
        mul_2 = ops.mul(mul_1, constant)
        add = ops.add(load, mul_2)
        constant_1 = ops.constant(0.7978845608028654, torch.float32)
        mul_3 = ops.mul(add, constant_1)
        tanh = ops.tanh(mul_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf287', get_index_2, tanh, None)
        return store


buf288: SchedulerNode(ComputedBuffer)
buf288.writes = [MemoryDep(name='buf288', index=c0, size=(8388608,))]
buf288.unmet_dependencies = 
    [   MemoryDep(name='buf286', index=c0, size=(8388608,)),
        MemoryDep(name='buf287', index=c0, size=(8388608,))]
buf288.met_dependencies = []
buf288.group.device = cuda:0
buf288.group.iteration = (8388608, 1)
buf288.sizes = ([8388608], [])
class buf288_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf287', get_index_1)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(load_1, constant_1)
        mul_1 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf288', get_index_2, mul_1, None)
        return store


buf289: ExternKernelSchedulerNode(ExternKernelOut)
buf289.writes = [StarDep(name='buf289')]
buf289.unmet_dependencies = [StarDep(name='buf288')]
buf289.met_dependencies = [StarDep(name='primals_20'), StarDep(name='primals_21')]
buf289.node.kernel = extern_kernels.addmm


buf290: SchedulerNode(ComputedBuffer)
buf290.writes = 
    [   MemoryDep(name='buf290', index=c0, size=(512, 4096)),
        MemoryDep(name='buf290', index=c0, size=(512,))]
buf290.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(2097152,)),
        MemoryDep(name='buf289', index=c0, size=(2097152,))]
buf290.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf290.group.device = cuda:0
buf290.group.iteration = (512, 4096)
buf290.sizes = ([512], [4096])
class buf290_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        reduction = ops.reduction('buf290', torch.float32, torch.float32, 'sum', get_index_4, add_1)
        return reduction


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = [MemoryDep(name='buf291', index=c0, size=(512,))]
buf291.unmet_dependencies = [MemoryDep(name='buf290', index=c0, size=(512,))]
buf291.met_dependencies = []
buf291.group.device = cuda:0
buf291.group.iteration = (512, 1)
buf291.sizes = ([512], [])
class buf291_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf291', get_index_1, div, None)
        return store


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = 
    [   MemoryDep(name='buf292', index=c0, size=(512, 4096)),
        MemoryDep(name='buf292', index=c0, size=(512,))]
buf292.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(2097152,)),
        MemoryDep(name='buf289', index=c0, size=(2097152,)),
        MemoryDep(name='buf291', index=c0, size=(512, 4096))]
buf292.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf292.group.device = cuda:0
buf292.group.iteration = (512, 4096)
buf292.sizes = ([512], [4096])
class buf292_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        sub = ops.sub(add_1, load_4)
        square = ops.square(sub)
        get_index_5 = self.get_index('index2')
        reduction = ops.reduction('buf292', torch.float32, torch.float32, 'sum', get_index_5, square)
        return reduction


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = [MemoryDep(name='buf293', index=c0, size=(2097152,))]
buf293.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(2097152,)),
        MemoryDep(name='buf289', index=c0, size=(2097152,)),
        MemoryDep(name='buf291', index=c0, size=(512, 4096)),
        MemoryDep(name='buf292', index=c0, size=(512, 4096))]
buf293.met_dependencies = 
    [   MemoryDep(name='primals_16', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_17', index=c1, size=(512, 4096))]
buf293.group.device = cuda:0
buf293.group.iteration = (2097152, 1)
buf293.sizes = ([512, 4096], [])
class buf293_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        add = ops.add(mul, load_3)
        add_1 = ops.add(load, add)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf292', get_index_5)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_5, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf293', get_index_6, mul_1, None)
        return store


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = [MemoryDep(name='buf294', index=c0, size=(2097152,))]
buf294.unmet_dependencies = [MemoryDep(name='buf293', index=c0, size=(2097152,))]
buf294.met_dependencies = 
    [   MemoryDep(name='primals_22', index=c1, size=(512, 4096)),
        MemoryDep(name='primals_23', index=c1, size=(512, 4096))]
buf294.group.device = cuda:0
buf294.group.iteration = (2097152, 1)
buf294.sizes = ([512, 4096], [])
class buf294_loop_body:
    var_ranges = {z0: 512, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_23', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf294', get_index_3, add, None)
        return store


buf295: ExternKernelSchedulerNode(ExternKernelOut)
buf295.writes = [StarDep(name='buf295')]
buf295.unmet_dependencies = [StarDep(name='buf294')]
buf295.met_dependencies = [StarDep(name='primals_24'), StarDep(name='primals_25')]
buf295.node.kernel = extern_kernels.addmm


buf296: SchedulerNode(ComputedBuffer)
buf296.writes = [MemoryDep(name='buf296', index=c0, size=(512,))]
buf296.unmet_dependencies = [MemoryDep(name='buf295', index=2*c0, size=(512,))]
buf296.met_dependencies = []
buf296.group.device = cuda:0
buf296.group.iteration = (512, 1)
buf296.sizes = ([512], [])
class buf296_loop_body:
    var_ranges = {z0: 512}
    index0 = 2*z0
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf296', get_index_1, load, None)
        return store


buf297: SchedulerNode(ComputedBuffer)
buf297.writes = [MemoryDep(name='buf297', index=c0, size=(512,))]
buf297.unmet_dependencies = [MemoryDep(name='buf295', index=2*c0 + 1, size=(512,))]
buf297.met_dependencies = []
buf297.group.device = cuda:0
buf297.group.iteration = (512, 1)
buf297.sizes = ([512], [])
class buf297_loop_body:
    var_ranges = {z0: 512}
    index0 = 2*z0 + 1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf297', get_index_1, load, None)
        return store


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = 
    [   MemoryDep(name='buf298', index=0, size=()),
        MemoryDep(name='buf298', index=0, size=(512,))]
buf298.unmet_dependencies = [MemoryDep(name='buf296', index=c0, size=(512,))]
buf298.met_dependencies = []
buf298.group.device = cuda:0
buf298.group.iteration = (1, 512)
buf298.sizes = ([], [512])
class buf298_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf298', torch.float32, torch.float32, 'max', get_index_1, load)
        return reduction


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = 
    [   MemoryDep(name='buf299', index=0, size=()),
        MemoryDep(name='buf299', index=0, size=(512,))]
buf299.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=c0, size=(512,)),
        MemoryDep(name='buf298', index=0, size=(512,))]
buf299.met_dependencies = []
buf299.group.device = cuda:0
buf299.group.iteration = (1, 512)
buf299.sizes = ([], [512])
class buf299_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf298', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf299', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = [MemoryDep(name='buf300', index=c0, size=(512,))]
buf300.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=c0, size=(512,)),
        MemoryDep(name='buf298', index=0, size=(512,)),
        MemoryDep(name='buf299', index=0, size=(512,))]
buf300.met_dependencies = []
buf300.group.device = cuda:0
buf300.group.iteration = (512, 1)
buf300.sizes = ([512], [])
class buf300_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf298', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf299', get_index_2)
        log = ops.log(load_2)
        sub_1 = ops.sub(sub, log)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf300', get_index_3, sub_1, None)
        return store


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = [MemoryDep(name='buf301', index=0, size=())]
buf301.unmet_dependencies = []
buf301.met_dependencies = [MemoryDep(name='primals_29', index=0, size=())]
buf301.group.device = cuda:0
buf301.group.iteration = (1, 1)
buf301.sizes = ([], [])
class buf301_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf301', get_index_1, minimum, None)
        return store


buf302: SchedulerNode(ComputedBuffer)
buf302.writes = [MemoryDep(name='buf302', index=0, size=())]
buf302.unmet_dependencies = []
buf302.met_dependencies = [MemoryDep(name='primals_29', index=0, size=())]
buf302.group.device = cuda:0
buf302.group.iteration = (1, 1)
buf302.sizes = ([], [])
class buf302_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf302', get_index_1, ne, None)
        return store


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = 
    [   MemoryDep(name='buf303', index=0, size=()),
        MemoryDep(name='buf303', index=0, size=(512,))]
buf303.unmet_dependencies = [MemoryDep(name='buf297', index=c0, size=(512,))]
buf303.met_dependencies = []
buf303.group.device = cuda:0
buf303.group.iteration = (1, 512)
buf303.sizes = ([], [512])
class buf303_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf303', torch.float32, torch.float32, 'max', get_index_1, load)
        return reduction


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = 
    [   MemoryDep(name='buf304', index=0, size=()),
        MemoryDep(name='buf304', index=0, size=(512,))]
buf304.unmet_dependencies = 
    [   MemoryDep(name='buf297', index=c0, size=(512,)),
        MemoryDep(name='buf303', index=0, size=(512,))]
buf304.met_dependencies = []
buf304.group.device = cuda:0
buf304.group.iteration = (1, 512)
buf304.sizes = ([], [512])
class buf304_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf303', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf304', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = [MemoryDep(name='buf305', index=c0, size=(512,))]
buf305.unmet_dependencies = 
    [   MemoryDep(name='buf297', index=c0, size=(512,)),
        MemoryDep(name='buf303', index=0, size=(512,)),
        MemoryDep(name='buf304', index=0, size=(512,))]
buf305.met_dependencies = []
buf305.group.device = cuda:0
buf305.group.iteration = (512, 1)
buf305.sizes = ([512], [])
class buf305_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf303', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf304', get_index_2)
        log = ops.log(load_2)
        sub_1 = ops.sub(sub, log)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf305', get_index_3, sub_1, None)
        return store


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = [MemoryDep(name='buf306', index=0, size=())]
buf306.unmet_dependencies = []
buf306.met_dependencies = [MemoryDep(name='primals_30', index=0, size=())]
buf306.group.device = cuda:0
buf306.group.iteration = (1, 1)
buf306.sizes = ([], [])
class buf306_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf306', get_index_1, minimum, None)
        return store


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = [MemoryDep(name='buf307', index=0, size=())]
buf307.unmet_dependencies = []
buf307.met_dependencies = [MemoryDep(name='primals_30', index=0, size=())]
buf307.group.device = cuda:0
buf307.group.iteration = (1, 1)
buf307.sizes = ([], [])
class buf307_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(512, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(512, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf307', get_index_1, ne, None)
        return store


buf308: SchedulerNode(ComputedBuffer)
buf308.writes = [MemoryDep(name='buf308', index=c0, size=(512,))]
buf308.unmet_dependencies = [MemoryDep(name='buf292', index=c0, size=(512,))]
buf308.met_dependencies = []
buf308.group.device = cuda:0
buf308.group.iteration = (512, 1)
buf308.sizes = ([512], [])
class buf308_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf308', get_index_1, div_1, None)
        return store


buf309: SchedulerNode(ComputedBuffer)
buf309.writes = [MemoryDep(name='buf309', index=c0, size=(512,))]
buf309.unmet_dependencies = [MemoryDep(name='buf283', index=c0, size=(512,))]
buf309.met_dependencies = []
buf309.group.device = cuda:0
buf309.group.iteration = (512, 1)
buf309.sizes = ([512], [])
class buf309_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf309', get_index_1, div_1, None)
        return store


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = [MemoryDep(name='buf310', index=c0, size=(2097152,))]
buf310.unmet_dependencies = [MemoryDep(name='buf273', index=c0, size=(2097152,))]
buf310.met_dependencies = []
buf310.group.device = cuda:0
buf310.group.iteration = (2097152, 1)
buf310.sizes = ([2097152], [])
class buf310_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf310', get_index_1, load, None)
        return store


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = [MemoryDep(name='buf311', index=c0, size=(2097152,))]
buf311.unmet_dependencies = [MemoryDep(name='buf271', index=c0, size=(2097152,))]
buf311.met_dependencies = []
buf311.group.device = cuda:0
buf311.group.iteration = (2097152, 1)
buf311.sizes = ([2097152], [])
class buf311_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf311', get_index_1, load, None)
        return store


buf312: SchedulerNode(ComputedBuffer)
buf312.writes = [MemoryDep(name='buf312', index=c0, size=(2097152,))]
buf312.unmet_dependencies = [MemoryDep(name='buf272', index=c0, size=(2097152,))]
buf312.met_dependencies = []
buf312.group.device = cuda:0
buf312.group.iteration = (2097152, 1)
buf312.sizes = ([2097152], [])
class buf312_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, load, None)
        return store


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep(name='buf313', index=c0, size=(512,))]
buf313.unmet_dependencies = [MemoryDep(name='buf268', index=c0, size=(512,))]
buf313.met_dependencies = []
buf313.group.device = cuda:0
buf313.group.iteration = (512, 1)
buf313.sizes = ([512], [])
class buf313_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf313', get_index_1, div_1, None)
        return store


buf314: SchedulerNode(ComputedBuffer)
buf314.writes = [MemoryDep(name='buf314', index=c0, size=(512,))]
buf314.unmet_dependencies = [MemoryDep(name='buf259', index=c0, size=(512,))]
buf314.met_dependencies = []
buf314.group.device = cuda:0
buf314.group.iteration = (512, 1)
buf314.sizes = ([512], [])
class buf314_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf314', get_index_1, div_1, None)
        return store


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = [MemoryDep(name='buf315', index=c0, size=(2097152,))]
buf315.unmet_dependencies = [MemoryDep(name='buf249', index=c0, size=(2097152,))]
buf315.met_dependencies = []
buf315.group.device = cuda:0
buf315.group.iteration = (2097152, 1)
buf315.sizes = ([2097152], [])
class buf315_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf315', get_index_1, load, None)
        return store


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = [MemoryDep(name='buf316', index=c0, size=(2097152,))]
buf316.unmet_dependencies = [MemoryDep(name='buf247', index=c0, size=(2097152,))]
buf316.met_dependencies = []
buf316.group.device = cuda:0
buf316.group.iteration = (2097152, 1)
buf316.sizes = ([2097152], [])
class buf316_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf316', get_index_1, load, None)
        return store


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = [MemoryDep(name='buf317', index=c0, size=(2097152,))]
buf317.unmet_dependencies = [MemoryDep(name='buf248', index=c0, size=(2097152,))]
buf317.met_dependencies = []
buf317.group.device = cuda:0
buf317.group.iteration = (2097152, 1)
buf317.sizes = ([2097152], [])
class buf317_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf317', get_index_1, load, None)
        return store


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = [MemoryDep(name='buf318', index=c0, size=(512,))]
buf318.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(512,))]
buf318.met_dependencies = []
buf318.group.device = cuda:0
buf318.group.iteration = (512, 1)
buf318.sizes = ([512], [])
class buf318_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf318', get_index_1, div_1, None)
        return store


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = [MemoryDep(name='buf319', index=c0, size=(512,))]
buf319.unmet_dependencies = [MemoryDep(name='buf235', index=c0, size=(512,))]
buf319.met_dependencies = []
buf319.group.device = cuda:0
buf319.group.iteration = (512, 1)
buf319.sizes = ([512], [])
class buf319_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf319', get_index_1, div_1, None)
        return store


buf320: SchedulerNode(ComputedBuffer)
buf320.writes = [MemoryDep(name='buf320', index=c0, size=(2097152,))]
buf320.unmet_dependencies = [MemoryDep(name='buf225', index=c0, size=(2097152,))]
buf320.met_dependencies = []
buf320.group.device = cuda:0
buf320.group.iteration = (2097152, 1)
buf320.sizes = ([2097152], [])
class buf320_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf320', get_index_1, load, None)
        return store


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = [MemoryDep(name='buf321', index=c0, size=(2097152,))]
buf321.unmet_dependencies = [MemoryDep(name='buf223', index=c0, size=(2097152,))]
buf321.met_dependencies = []
buf321.group.device = cuda:0
buf321.group.iteration = (2097152, 1)
buf321.sizes = ([2097152], [])
class buf321_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf321', get_index_1, load, None)
        return store


buf322: SchedulerNode(ComputedBuffer)
buf322.writes = [MemoryDep(name='buf322', index=c0, size=(2097152,))]
buf322.unmet_dependencies = [MemoryDep(name='buf224', index=c0, size=(2097152,))]
buf322.met_dependencies = []
buf322.group.device = cuda:0
buf322.group.iteration = (2097152, 1)
buf322.sizes = ([2097152], [])
class buf322_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, load, None)
        return store


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = [MemoryDep(name='buf323', index=c0, size=(512,))]
buf323.unmet_dependencies = [MemoryDep(name='buf220', index=c0, size=(512,))]
buf323.met_dependencies = []
buf323.group.device = cuda:0
buf323.group.iteration = (512, 1)
buf323.sizes = ([512], [])
class buf323_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf323', get_index_1, div_1, None)
        return store


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = [MemoryDep(name='buf324', index=c0, size=(512,))]
buf324.unmet_dependencies = [MemoryDep(name='buf211', index=c0, size=(512,))]
buf324.met_dependencies = []
buf324.group.device = cuda:0
buf324.group.iteration = (512, 1)
buf324.sizes = ([512], [])
class buf324_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, div_1, None)
        return store


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = [MemoryDep(name='buf325', index=c0, size=(2097152,))]
buf325.unmet_dependencies = [MemoryDep(name='buf201', index=c0, size=(2097152,))]
buf325.met_dependencies = []
buf325.group.device = cuda:0
buf325.group.iteration = (2097152, 1)
buf325.sizes = ([2097152], [])
class buf325_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, load, None)
        return store


buf326: SchedulerNode(ComputedBuffer)
buf326.writes = [MemoryDep(name='buf326', index=c0, size=(2097152,))]
buf326.unmet_dependencies = [MemoryDep(name='buf199', index=c0, size=(2097152,))]
buf326.met_dependencies = []
buf326.group.device = cuda:0
buf326.group.iteration = (2097152, 1)
buf326.sizes = ([2097152], [])
class buf326_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf326', get_index_1, load, None)
        return store


buf327: SchedulerNode(ComputedBuffer)
buf327.writes = [MemoryDep(name='buf327', index=c0, size=(2097152,))]
buf327.unmet_dependencies = [MemoryDep(name='buf200', index=c0, size=(2097152,))]
buf327.met_dependencies = []
buf327.group.device = cuda:0
buf327.group.iteration = (2097152, 1)
buf327.sizes = ([2097152], [])
class buf327_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf327', get_index_1, load, None)
        return store


buf328: SchedulerNode(ComputedBuffer)
buf328.writes = [MemoryDep(name='buf328', index=c0, size=(512,))]
buf328.unmet_dependencies = [MemoryDep(name='buf196', index=c0, size=(512,))]
buf328.met_dependencies = []
buf328.group.device = cuda:0
buf328.group.iteration = (512, 1)
buf328.sizes = ([512], [])
class buf328_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf328', get_index_1, div_1, None)
        return store


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = [MemoryDep(name='buf329', index=c0, size=(512,))]
buf329.unmet_dependencies = [MemoryDep(name='buf187', index=c0, size=(512,))]
buf329.met_dependencies = []
buf329.group.device = cuda:0
buf329.group.iteration = (512, 1)
buf329.sizes = ([512], [])
class buf329_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf329', get_index_1, div_1, None)
        return store


buf330: SchedulerNode(ComputedBuffer)
buf330.writes = [MemoryDep(name='buf330', index=c0, size=(2097152,))]
buf330.unmet_dependencies = [MemoryDep(name='buf177', index=c0, size=(2097152,))]
buf330.met_dependencies = []
buf330.group.device = cuda:0
buf330.group.iteration = (2097152, 1)
buf330.sizes = ([2097152], [])
class buf330_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, load, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = [MemoryDep(name='buf331', index=c0, size=(2097152,))]
buf331.unmet_dependencies = [MemoryDep(name='buf175', index=c0, size=(2097152,))]
buf331.met_dependencies = []
buf331.group.device = cuda:0
buf331.group.iteration = (2097152, 1)
buf331.sizes = ([2097152], [])
class buf331_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf331', get_index_1, load, None)
        return store


buf332: SchedulerNode(ComputedBuffer)
buf332.writes = [MemoryDep(name='buf332', index=c0, size=(2097152,))]
buf332.unmet_dependencies = [MemoryDep(name='buf176', index=c0, size=(2097152,))]
buf332.met_dependencies = []
buf332.group.device = cuda:0
buf332.group.iteration = (2097152, 1)
buf332.sizes = ([2097152], [])
class buf332_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, load, None)
        return store


buf333: SchedulerNode(ComputedBuffer)
buf333.writes = [MemoryDep(name='buf333', index=c0, size=(512,))]
buf333.unmet_dependencies = [MemoryDep(name='buf172', index=c0, size=(512,))]
buf333.met_dependencies = []
buf333.group.device = cuda:0
buf333.group.iteration = (512, 1)
buf333.sizes = ([512], [])
class buf333_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf333', get_index_1, div_1, None)
        return store


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = [MemoryDep(name='buf334', index=c0, size=(512,))]
buf334.unmet_dependencies = [MemoryDep(name='buf163', index=c0, size=(512,))]
buf334.met_dependencies = []
buf334.group.device = cuda:0
buf334.group.iteration = (512, 1)
buf334.sizes = ([512], [])
class buf334_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf334', get_index_1, div_1, None)
        return store


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = [MemoryDep(name='buf335', index=c0, size=(2097152,))]
buf335.unmet_dependencies = [MemoryDep(name='buf153', index=c0, size=(2097152,))]
buf335.met_dependencies = []
buf335.group.device = cuda:0
buf335.group.iteration = (2097152, 1)
buf335.sizes = ([2097152], [])
class buf335_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf335', get_index_1, load, None)
        return store


buf336: SchedulerNode(ComputedBuffer)
buf336.writes = [MemoryDep(name='buf336', index=c0, size=(2097152,))]
buf336.unmet_dependencies = [MemoryDep(name='buf151', index=c0, size=(2097152,))]
buf336.met_dependencies = []
buf336.group.device = cuda:0
buf336.group.iteration = (2097152, 1)
buf336.sizes = ([2097152], [])
class buf336_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf336', get_index_1, load, None)
        return store


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep(name='buf337', index=c0, size=(2097152,))]
buf337.unmet_dependencies = [MemoryDep(name='buf152', index=c0, size=(2097152,))]
buf337.met_dependencies = []
buf337.group.device = cuda:0
buf337.group.iteration = (2097152, 1)
buf337.sizes = ([2097152], [])
class buf337_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf337', get_index_1, load, None)
        return store


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = [MemoryDep(name='buf338', index=c0, size=(512,))]
buf338.unmet_dependencies = [MemoryDep(name='buf148', index=c0, size=(512,))]
buf338.met_dependencies = []
buf338.group.device = cuda:0
buf338.group.iteration = (512, 1)
buf338.sizes = ([512], [])
class buf338_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, div_1, None)
        return store


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = [MemoryDep(name='buf339', index=c0, size=(512,))]
buf339.unmet_dependencies = [MemoryDep(name='buf139', index=c0, size=(512,))]
buf339.met_dependencies = []
buf339.group.device = cuda:0
buf339.group.iteration = (512, 1)
buf339.sizes = ([512], [])
class buf339_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf339', get_index_1, div_1, None)
        return store


buf340: SchedulerNode(ComputedBuffer)
buf340.writes = [MemoryDep(name='buf340', index=c0, size=(2097152,))]
buf340.unmet_dependencies = [MemoryDep(name='buf129', index=c0, size=(2097152,))]
buf340.met_dependencies = []
buf340.group.device = cuda:0
buf340.group.iteration = (2097152, 1)
buf340.sizes = ([2097152], [])
class buf340_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf340', get_index_1, load, None)
        return store


buf341: SchedulerNode(ComputedBuffer)
buf341.writes = [MemoryDep(name='buf341', index=c0, size=(2097152,))]
buf341.unmet_dependencies = [MemoryDep(name='buf127', index=c0, size=(2097152,))]
buf341.met_dependencies = []
buf341.group.device = cuda:0
buf341.group.iteration = (2097152, 1)
buf341.sizes = ([2097152], [])
class buf341_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf341', get_index_1, load, None)
        return store


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = [MemoryDep(name='buf342', index=c0, size=(2097152,))]
buf342.unmet_dependencies = [MemoryDep(name='buf128', index=c0, size=(2097152,))]
buf342.met_dependencies = []
buf342.group.device = cuda:0
buf342.group.iteration = (2097152, 1)
buf342.sizes = ([2097152], [])
class buf342_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf342', get_index_1, load, None)
        return store


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = [MemoryDep(name='buf343', index=c0, size=(512,))]
buf343.unmet_dependencies = [MemoryDep(name='buf124', index=c0, size=(512,))]
buf343.met_dependencies = []
buf343.group.device = cuda:0
buf343.group.iteration = (512, 1)
buf343.sizes = ([512], [])
class buf343_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf343', get_index_1, div_1, None)
        return store


buf344: SchedulerNode(ComputedBuffer)
buf344.writes = [MemoryDep(name='buf344', index=c0, size=(512,))]
buf344.unmet_dependencies = [MemoryDep(name='buf115', index=c0, size=(512,))]
buf344.met_dependencies = []
buf344.group.device = cuda:0
buf344.group.iteration = (512, 1)
buf344.sizes = ([512], [])
class buf344_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf344', get_index_1, div_1, None)
        return store


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = [MemoryDep(name='buf345', index=c0, size=(2097152,))]
buf345.unmet_dependencies = [MemoryDep(name='buf105', index=c0, size=(2097152,))]
buf345.met_dependencies = []
buf345.group.device = cuda:0
buf345.group.iteration = (2097152, 1)
buf345.sizes = ([2097152], [])
class buf345_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf345', get_index_1, load, None)
        return store


buf346: SchedulerNode(ComputedBuffer)
buf346.writes = [MemoryDep(name='buf346', index=c0, size=(2097152,))]
buf346.unmet_dependencies = [MemoryDep(name='buf103', index=c0, size=(2097152,))]
buf346.met_dependencies = []
buf346.group.device = cuda:0
buf346.group.iteration = (2097152, 1)
buf346.sizes = ([2097152], [])
class buf346_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf346', get_index_1, load, None)
        return store


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = [MemoryDep(name='buf347', index=c0, size=(2097152,))]
buf347.unmet_dependencies = [MemoryDep(name='buf104', index=c0, size=(2097152,))]
buf347.met_dependencies = []
buf347.group.device = cuda:0
buf347.group.iteration = (2097152, 1)
buf347.sizes = ([2097152], [])
class buf347_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf347', get_index_1, load, None)
        return store


buf348: SchedulerNode(ComputedBuffer)
buf348.writes = [MemoryDep(name='buf348', index=c0, size=(512,))]
buf348.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(512,))]
buf348.met_dependencies = []
buf348.group.device = cuda:0
buf348.group.iteration = (512, 1)
buf348.sizes = ([512], [])
class buf348_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf348', get_index_1, div_1, None)
        return store


buf349: SchedulerNode(ComputedBuffer)
buf349.writes = [MemoryDep(name='buf349', index=c0, size=(512,))]
buf349.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(512,))]
buf349.met_dependencies = []
buf349.group.device = cuda:0
buf349.group.iteration = (512, 1)
buf349.sizes = ([512], [])
class buf349_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf349', get_index_1, div_1, None)
        return store


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = [MemoryDep(name='buf350', index=c0, size=(2097152,))]
buf350.unmet_dependencies = [MemoryDep(name='buf81', index=c0, size=(2097152,))]
buf350.met_dependencies = []
buf350.group.device = cuda:0
buf350.group.iteration = (2097152, 1)
buf350.sizes = ([2097152], [])
class buf350_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf350', get_index_1, load, None)
        return store


buf351: SchedulerNode(ComputedBuffer)
buf351.writes = [MemoryDep(name='buf351', index=c0, size=(2097152,))]
buf351.unmet_dependencies = [MemoryDep(name='buf79', index=c0, size=(2097152,))]
buf351.met_dependencies = []
buf351.group.device = cuda:0
buf351.group.iteration = (2097152, 1)
buf351.sizes = ([2097152], [])
class buf351_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf351', get_index_1, load, None)
        return store


buf352: SchedulerNode(ComputedBuffer)
buf352.writes = [MemoryDep(name='buf352', index=c0, size=(2097152,))]
buf352.unmet_dependencies = [MemoryDep(name='buf80', index=c0, size=(2097152,))]
buf352.met_dependencies = []
buf352.group.device = cuda:0
buf352.group.iteration = (2097152, 1)
buf352.sizes = ([2097152], [])
class buf352_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf352', get_index_1, load, None)
        return store


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = [MemoryDep(name='buf353', index=c0, size=(512,))]
buf353.unmet_dependencies = [MemoryDep(name='buf76', index=c0, size=(512,))]
buf353.met_dependencies = []
buf353.group.device = cuda:0
buf353.group.iteration = (512, 1)
buf353.sizes = ([512], [])
class buf353_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf353', get_index_1, div_1, None)
        return store


buf354: SchedulerNode(ComputedBuffer)
buf354.writes = [MemoryDep(name='buf354', index=c0, size=(512,))]
buf354.unmet_dependencies = [MemoryDep(name='buf67', index=c0, size=(512,))]
buf354.met_dependencies = []
buf354.group.device = cuda:0
buf354.group.iteration = (512, 1)
buf354.sizes = ([512], [])
class buf354_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf354', get_index_1, div_1, None)
        return store


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = [MemoryDep(name='buf355', index=c0, size=(2097152,))]
buf355.unmet_dependencies = [MemoryDep(name='buf57', index=c0, size=(2097152,))]
buf355.met_dependencies = []
buf355.group.device = cuda:0
buf355.group.iteration = (2097152, 1)
buf355.sizes = ([2097152], [])
class buf355_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf355', get_index_1, load, None)
        return store


buf356: SchedulerNode(ComputedBuffer)
buf356.writes = [MemoryDep(name='buf356', index=c0, size=(2097152,))]
buf356.unmet_dependencies = [MemoryDep(name='buf55', index=c0, size=(2097152,))]
buf356.met_dependencies = []
buf356.group.device = cuda:0
buf356.group.iteration = (2097152, 1)
buf356.sizes = ([2097152], [])
class buf356_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf356', get_index_1, load, None)
        return store


buf357: SchedulerNode(ComputedBuffer)
buf357.writes = [MemoryDep(name='buf357', index=c0, size=(2097152,))]
buf357.unmet_dependencies = [MemoryDep(name='buf56', index=c0, size=(2097152,))]
buf357.met_dependencies = []
buf357.group.device = cuda:0
buf357.group.iteration = (2097152, 1)
buf357.sizes = ([2097152], [])
class buf357_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf357', get_index_1, load, None)
        return store


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = [MemoryDep(name='buf358', index=c0, size=(512,))]
buf358.unmet_dependencies = [MemoryDep(name='buf52', index=c0, size=(512,))]
buf358.met_dependencies = []
buf358.group.device = cuda:0
buf358.group.iteration = (512, 1)
buf358.sizes = ([512], [])
class buf358_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf358', get_index_1, div_1, None)
        return store


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(512,))]
buf359.unmet_dependencies = [MemoryDep(name='buf43', index=c0, size=(512,))]
buf359.met_dependencies = []
buf359.group.device = cuda:0
buf359.group.iteration = (512, 1)
buf359.sizes = ([512], [])
class buf359_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf359', get_index_1, div_1, None)
        return store


buf360: SchedulerNode(ComputedBuffer)
buf360.writes = [MemoryDep(name='buf360', index=c0, size=(2097152,))]
buf360.unmet_dependencies = [MemoryDep(name='buf33', index=c0, size=(2097152,))]
buf360.met_dependencies = []
buf360.group.device = cuda:0
buf360.group.iteration = (2097152, 1)
buf360.sizes = ([2097152], [])
class buf360_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf360', get_index_1, load, None)
        return store


buf361: SchedulerNode(ComputedBuffer)
buf361.writes = [MemoryDep(name='buf361', index=c0, size=(2097152,))]
buf361.unmet_dependencies = [MemoryDep(name='buf31', index=c0, size=(2097152,))]
buf361.met_dependencies = []
buf361.group.device = cuda:0
buf361.group.iteration = (2097152, 1)
buf361.sizes = ([2097152], [])
class buf361_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf361', get_index_1, load, None)
        return store


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = [MemoryDep(name='buf362', index=c0, size=(2097152,))]
buf362.unmet_dependencies = [MemoryDep(name='buf32', index=c0, size=(2097152,))]
buf362.met_dependencies = []
buf362.group.device = cuda:0
buf362.group.iteration = (2097152, 1)
buf362.sizes = ([2097152], [])
class buf362_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf362', get_index_1, load, None)
        return store


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = [MemoryDep(name='buf363', index=c0, size=(512,))]
buf363.unmet_dependencies = [MemoryDep(name='buf28', index=c0, size=(512,))]
buf363.met_dependencies = []
buf363.group.device = cuda:0
buf363.group.iteration = (512, 1)
buf363.sizes = ([512], [])
class buf363_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf363', get_index_1, div_1, None)
        return store


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = [MemoryDep(name='buf364', index=c0, size=(512,))]
buf364.unmet_dependencies = [MemoryDep(name='buf19', index=c0, size=(512,))]
buf364.met_dependencies = []
buf364.group.device = cuda:0
buf364.group.iteration = (512, 1)
buf364.sizes = ([512], [])
class buf364_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(4096, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf364', get_index_1, div_1, None)
        return store


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = [MemoryDep(name='buf365', index=c0, size=(2097152,))]
buf365.unmet_dependencies = [MemoryDep(name='buf9', index=c0, size=(2097152,))]
buf365.met_dependencies = []
buf365.group.device = cuda:0
buf365.group.iteration = (2097152, 1)
buf365.sizes = ([2097152], [])
class buf365_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf365', get_index_1, load, None)
        return store


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = [MemoryDep(name='buf366', index=c0, size=(2097152,))]
buf366.unmet_dependencies = [MemoryDep(name='buf7', index=c0, size=(2097152,))]
buf366.met_dependencies = []
buf366.group.device = cuda:0
buf366.group.iteration = (2097152, 1)
buf366.sizes = ([2097152], [])
class buf366_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf366', get_index_1, load, None)
        return store


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = [MemoryDep(name='buf367', index=c0, size=(2097152,))]
buf367.unmet_dependencies = [MemoryDep(name='buf8', index=c0, size=(2097152,))]
buf367.met_dependencies = []
buf367.group.device = cuda:0
buf367.group.iteration = (2097152, 1)
buf367.sizes = ([2097152], [])
class buf367_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, load, None)
        return store


buf368: SchedulerNode(ComputedBuffer)
buf368.writes = [MemoryDep(name='buf368', index=c0, size=(512,))]
buf368.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(512,))]
buf368.met_dependencies = []
buf368.group.device = cuda:0
buf368.group.iteration = (512, 1)
buf368.sizes = ([512], [])
class buf368_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(128, torch.float32)
        div_1 = ops.div(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf368', get_index_1, div_1, None)
        return store


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = [MemoryDep(name='buf369', index=c0, size=(512,))]
buf369.unmet_dependencies = []
buf369.met_dependencies = [MemoryDep(name='primals_27', index=c0, size=(512,))]
buf369.group.device = cuda:0
buf369.group.iteration = (512, 1)
buf369.sizes = ([512], [])
class buf369_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf369', get_index_1, to_dtype, None)
        return store


buf370: SchedulerNode(ComputedBuffer)
buf370.writes = [MemoryDep(name='buf370', index=c0, size=(512,))]
buf370.unmet_dependencies = []
buf370.met_dependencies = [MemoryDep(name='primals_26', index=c0, size=(512,))]
buf370.group.device = cuda:0
buf370.group.iteration = (512, 1)
buf370.sizes = ([512], [])
class buf370_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf370', get_index_1, to_dtype, None)
        return store


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = [MemoryDep(name='buf371', index=c0, size=(512,))]
buf371.unmet_dependencies = []
buf371.met_dependencies = [MemoryDep(name='primals_28', index=c0, size=(512,))]
buf371.group.device = cuda:0
buf371.group.iteration = (512, 1)
buf371.sizes = ([512], [])
class buf371_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_28', get_index)
        to_dtype = ops.to_dtype(load, torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf371', get_index_1, to_dtype, None)
        return store


buf372: SchedulerNode(ComputedBuffer)
buf372.writes = [MemoryDep(name='buf372', index=0, size=())]
buf372.unmet_dependencies = 
    [   MemoryDep(name='buf300', index=(tmp1), size=()),
        MemoryDep(name='buf301', index=0, size=()),
        MemoryDep(name='buf302', index=0, size=()),
        MemoryDep(name='buf305', index=(tmp11), size=()),
        MemoryDep(name='buf306', index=0, size=()),
        MemoryDep(name='buf307', index=0, size=())]
buf372.met_dependencies = []
buf372.group.device = cuda:0
buf372.group.iteration = (1, 1)
buf372.sizes = ([], [])
class buf372_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = indirect0
    index2 = indirect1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf301', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf300', get_index_2)
        neg = ops.neg(load_2)
        constant = ops.constant(0, torch.float32)
        where = ops.where(load, neg, constant)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf302', get_index_3)
        to_dtype = ops.to_dtype(load_3, torch.int64)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32)
        div = ops.div(where, to_dtype_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf307', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf306', get_index_5)
        set_indirect1 = self.set_indirect1(load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf305', get_index_6)
        neg_1 = ops.neg(load_6)
        constant_1 = ops.constant(0, torch.float32)
        where_1 = ops.where(load_4, neg_1, constant_1)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf307', get_index_7)
        to_dtype_2 = ops.to_dtype(load_7, torch.int64)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32)
        div_1 = ops.div(where_1, to_dtype_3)
        add = ops.add(div, div_1)
        constant_2 = ops.constant(2, torch.float32)
        div_2 = ops.div(add, constant_2)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf372', get_index_8, div_2, None)
        return store


